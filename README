# ESP32 Dynamixel Controller - React Frontend

A professional React-based web interface for controlling Dynamixel motors via ESP32 using WebSerial API. This application provides real-time motor control, Challenge 10 execution, data visualization, and comprehensive system monitoring.

## 🚀 Features

- **Real-time Motor Control**: Individual motor position and velocity control
- **WebSerial Integration**: Direct communication with ESP32 via browser
- **Challenge 10**: Mixed mode control demonstration
- **Live Data Visualization**: Real-time charts using Chart.js
- **Modern UI**: Material-UI components with dark theme
- **State Management**: Redux Toolkit for predictable state updates
- **Progressive Web App**: PWA support for desktop and mobile
- **Responsive Design**: Works on desktop, tablet, and mobile devices

## 🏗️ Project Structure

```
```
└── 📁public
    ├── favicon.ico
    ├── index.html
    ├── logo192.png
    ├── logo512.png
    ├── manifest.json
└── 📁src
    └── 📁__mocks__
        ├── robotService.js
        ├── websocketService.js
    └── 📁components
        └── 📁auth
            ├── AuthGuard.jsx
            ├── LoginForm.jsx
            ├── ProtectedRoute.jsx
            ├── RegisterForm.jsx
        └── 📁challenges
            ├── Challenge1.jsx
            ├── Challenge2.jsx
            ├── ChallengeCard.jsx
            ├── ChallengeHistoryDialogue.jsx
            ├── ChallengeMap.jsx
            ├── ChallengeProgressPanel.jsx
            ├── challengeRegistry.js
            ├── ChallengeRunner.jsx
            ├── CodeEditor.jsx
            ├── ConsoleOutput.jsx
            ├── ControlPanel.jsx
            ├── GenericChallenge.jsx
            ├── index.js
            ├── ManualMovementChallenge.jsx
            ├── PDControlChallenge.jsx
            ├── QuizChallenge.jsx
            ├── ResultsDisplay.jsx
            ├── RobotVisualizer.jsx
        └── 📁common
            ├── ConfirmDialog.jsx
            ├── ConnectionStatus.jsx
            ├── ErrorBoundary.jsx
            ├── Footer.jsx
            ├── Header.jsx
            ├── index.js
            ├── LoadingSpinner.jsx
            ├── Modal.jsx
            ├── Notification.jsx
            ├── ProgressBar.jsx
            ├── StatusIndicator.jsx
            ├── Tooltip.jsx
        └── 📁dashboard
            ├── Achievements.jsx
            ├── ChallengeGrid.jsx
            ├── CompactDashboard.jsx
            ├── DashboardHeader.jsx
            ├── DashboardLayout.jsx
            ├── DashboardPage.jsx
            ├── DashboardProvider.jsx
            ├── DashboardStatus.jsx
            ├── index.js
            ├── ProgressTracker.jsx
            ├── QuickActions.jsx
            ├── RecentActivity.jsx
            ├── RobotStatus.css
            ├── RobotStatus.jsx
        └── 📁debug
            ├── AuthDebug.jsx
        └── 📁robot
            ├── CalibrationTool.jsx
            ├── ControlPanel.jsx
            ├── index.js
            ├── JointController.jsx
            ├── KinematicsDisplay.jsx
            ├── MotorStatus.jsx
            ├── RobotDashboard.jsx
            ├── RobotLogger.jsx
            ├── RobotVisualizer.jsx
            ├── SafetyControls.jsx
            ├── StatusMonitor.jsx
            ├── text
            ├── TrajectoryPlanner.jsx
    └── 📁contexts
        ├── ErrorContext.jsx
    └── 📁hooks
        ├── useAuth.js
        ├── useChallenges.js
        ├── useRobot.js
        ├── useRobotController.js
        ├── useSafeRobotData.js
        ├── useWebSocketService.js
    └── 📁pages
        ├── ChallengePage.jsx
        ├── ChallengesListPage.jsx
        ├── DashboardPage.jsx
        ├── HomePage.jsx
        ├── IndividualChallengePage.jsx
        ├── LeaderboardPage.jsx
        ├── ProfilePage.jsx
    └── 📁services
        ├── api.js
        ├── auth.js
        ├── authService.js
        ├── challengeService.js
        ├── robotController.js
        ├── robotService.js
        ├── websocketService.js
    └── 📁store
        ├── authSlice.js
        ├── challengeSlice.js
        ├── index.js
        ├── robotSlice.js
        ├── uiSlice.js
    └── 📁styles
        ├── animations.css
        ├── components.css
        ├── dashboard.css
        ├── globals.css
        ├── robotStatus.css
        ├── themes.js
        ├── variables.css
    └── 📁utils
        ├── ChallengeData.js
        ├── constants.js
        ├── globalErrorHandler.js
        ├── helpers.js
        ├── mockChallengeData.js
        ├── performanceMonitor.js
        ├── robotUtils
        ├── testUtils.js
        ├── validation.js

├── App.js               
├── packange.json              
├── packange-lock.json             
└── .env           
```

## 🛠️ Technology Stack

- **React 18**: Modern React with hooks and concurrent features
- **Material-UI (MUI)**: Professional UI component library
- **Redux Toolkit**: Predictable state management
- **Chart.js**: Real-time data visualization
- **WebSerial API**: Direct browser-to-ESP32 communication
- **React Router**: Client-side routing
- **Axios**: HTTP client for API calls

## 📋 Prerequisites

- Node.js 16+ and npm
- Modern browser with WebSerial support (Chrome 89+, Edge 89+)
- ESP32 with Dynamixel motors (for hardware functionality)

## 🚀 Quick Start

### 1. Installation

```bash
# Clone the repository
git clone <repository-url>
cd esp32-dynamixel-controller

# Install dependencies
npm install
```

### 2. Environment Configuration

Create a `.env` file in the root directory:

```env
REACT_APP_API_URL=http://localhost:8000/api/v1
REACT_APP_WS_URL=ws://localhost:8000/ws
REACT_APP_VERSION=1.0.0
```

### 3. Development

```bash
# Start development server
npm start

# Open browser to http://localhost:3000
```

### 4. Production Build

```bash
# Create production build
npm run build

# Serve static files
npm install -g serve
serve -s build
```

## 🔧 Configuration

### WebSerial Settings

The application uses the following WebSerial configuration:

```javascript
const WEBSERIAL_CONFIG = {
  baudRate: 115200,
  dataBits: 8,
  stopBits: 1,
  parity: 'none',
  flowControl: 'none',
};
```

### Motor Constants

Configured for Dynamixel XL330-M288 motors:

```javascript
const MOTOR_CONSTANTS = {
  resolution: 4095,        // 12-bit resolution
  maxPosition: 4095,
  centerPosition: 2048,
  maxVelocity: 50,         // degrees per second
  degreesPerUnit: 360 / 4095,
  protocol: 2.0,
};
```

## 🎮 Usage Guide

### Connecting to ESP32

1. **Check Browser Compatibility**: Ensure you're using Chrome 89+ or Edge 89+
2. **Connect Hardware**: Connect ESP32 to your computer via USB
3. **Click Connect**: Use the "Connect to ESP32" button in the dashboard
4. **Select Port**: Choose the correct COM port in the browser dialog
5. **Scan Motors**: Click "Scan Motors" to detect connected Dynamixel motors

### Motor Control

1. **Enable Torque**: Toggle torque on individual motors or globally
2. **Position Control**: Use sliders or input fields to set target positions (0-360°)
3. **Velocity Control**: Set motor velocities (-50 to +50 degrees/second)
4. **Quick Actions**: Use Home, Stop, and Emergency Stop buttons

### Challenge 10 - Mixed Mode Control

1. **Navigate**: Go to Challenge 10 page
2. **Configure**: Set duration, speed, and frequency parameters
3. **Prerequisites**: Ensure motors 1 and 2 are connected and online
4. **Start**: Click "Start Challenge" to begin mixed mode control
5. **Monitor**: Watch real-time charts showing position and velocity data
6. **Stop**: Use "Stop Challenge" or wait for automatic completion

### Data Export

1. **Chart Data**: Export motor position/velocity data to CSV
2. **Communication Logs**: Export all ESP32 communication logs
3. **Screenshots**: Capture interface screenshots
4. **Advanced**: Use bulk commands and manual testing features

## 🔍 Advanced Features

### Custom Commands

Send raw commands to ESP32:
```
PING:1              # Ping motor 1
ENABLE_TORQUE:1     # Enable torque on motor 1
SET_POS:1:2048      # Set motor 1 to center position
SET_VEL:1:100       # Set motor 1 velocity
GET_POS:1           # Read motor 1 position
```

### Bulk Operations

Execute multiple commands sequentially:
```
PING:1
ENABLE_TORQUE:1
SET_POS:1:2048
DISABLE_TORQUE:1
```

### System Settings

- **Debug Mode**: Enable verbose logging
- **Auto Connect**: Automatically connect on page load
- **Chart Update Rate**: Adjust real-time chart refresh rate
- **Log Level**: Filter communication logs by severity

## 🐛 Troubleshooting

### WebSerial Issues

- **Not Supported**: Use Chrome 89+ or Edge 89+
- **Permission Denied**: Check browser security settings
- **Port Not Found**: Ensure ESP32 drivers are installed

### Connection Problems

- **ESP32 Not Responding**: Check USB cable and power
- **Invalid Baud Rate**: Verify ESP32 is configured for 115200
- **Timeout Errors**: Check for interference or cable issues

### Motor Detection

- **No Motors Found**: Verify motor power and connections
- **Wrong IDs**: Use Dynamixel Wizard to set motor IDs (1, 2, 3...)
- **Communication Errors**: Check TTL level conversion

## 📱 Mobile Support

The interface is responsive and works on mobile devices:

- **Touch Controls**: All sliders and buttons work with touch
- **Responsive Layout**: Adapts to different screen sizes
- **PWA Support**: Can be installed as a mobile app

## 🔒 Security

- **Local Communication**: WebSerial provides secure direct communication
- **No External Dependencies**: Runs entirely in the browser
- **HTTPS Required**: WebSerial requires secure context (HTTPS/localhost)

## 🚀 Performance

### Optimization Features

- **Component Memoization**: React.memo prevents unnecessary re-renders
- **Virtual Scrolling**: Efficient handling of large log lists
- **Throttled Updates**: Rate-limited chart updates for smooth performance
- **Lazy Loading**: Components loaded on demand

### Real-time Performance

- **10ms Update Rate**: Challenge 10 runs at 100Hz for precise control
- **Chart Optimization**: Limited to 300 data points for smooth rendering
- **WebSerial Optimization**: Efficient binary communication protocol

## 📊 Monitoring & Analytics

### Real-time Charts

- **Position Tracking**: Live motor position visualization
- **Velocity Monitoring**: Real-time velocity data
- **Multi-motor Support**: Up to 3 motors simultaneously
- **Data Export**: CSV export for analysis

### System Metrics

- **Connection Uptime**: Track connection duration
- **Command Count**: Monitor communication volume
- **Error Rate**: Track communication failures
- **Performance**: Monitor update rates and latency

## 🔧 Development

### Adding New Components

1. Create component in appropriate directory
2. Follow existing patterns for state management
3. Use Material-UI components for consistency
4. Add proper TypeScript types if converting

### Custom Hooks

The application uses custom hooks for:

- **useWebSerial**: Low-level ESP32 communication
- **useRobot**: High-level motor control operations
- **Redux hooks**: State management integration

### State Management

- **Robot State**: Connection, motors, real-time data
- **Challenge State**: Challenge 10 progress and parameters
- **UI State**: Notifications, preferences, layout

## 📝 API Integration

The frontend is designed to work with both:

1. **Direct WebSerial**: Direct ESP32 communication (current implementation)
2. **Backend API**: RESTful API for advanced features (future enhancement)

### WebSerial Protocol

Commands follow this format:
```
COMMAND:MOTOR_ID:PARAMETER;
```

Responses:
```
OK                    # Command successful
PING_OK              # Motor responded to ping
POS:2048             # Position reading
ERROR:message        # Error occurred
```

## 🔄 Future Enhancements

- **3D Robot Visualization**: Three.js robot arm model
- **Advanced Kinematics**: Forward/inverse kinematics calculations
- **More Challenges**: Additional educational challenges
- **Cloud Sync**: Save configurations and data to cloud
- **Multi-User**: Collaborative control sessions
- **VR Support**: Virtual reality motor control interface

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📞 Support

For support and questions:
- Check the troubleshooting section
- Review browser compatibility requirements
- Ensure hardware connections are correct
- Verify ESP32 firmware is compatible

---

**Note**: This is a browser-based application that requires WebSerial API support. It will not work in browsers that don't support this feature (Safari, Firefox, etc.). Use Chrome 89+ or Edge 89+ for full functionality.

{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice';\nimport challengeReducer from './challengeSlice';\nimport robotReducer from './robotSlice';\nimport uiReducer from './uiSlice';\n\n// Configure the Redux store\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    challenges: challengeReducer,\n    robot: robotReducer,\n    ui: uiReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE', 'persist/PAUSE', 'persist/FLUSH', 'persist/PURGE', 'persist/REGISTER']\n    }\n  }),\n  devTools: process.env.NODE_ENV !== 'production' // Enables Redux DevTools only in development\n});\n\n// Inferred types for RootState and AppDispatch","map":{"version":3,"names":["configureStore","authReducer","challengeReducer","robotReducer","uiReducer","store","reducer","auth","challenges","robot","ui","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","devTools","process","env","NODE_ENV"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/index.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from './authSlice';\nimport challengeReducer from './challengeSlice';\nimport robotReducer from './robotSlice';\nimport uiReducer from './uiSlice';\n\n// Configure the Redux store\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    challenges: challengeReducer,\n    robot: robotReducer,\n    ui: uiReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          'persist/PERSIST',\n          'persist/REHYDRATE',\n          'persist/PAUSE',\n          'persist/FLUSH',\n          'persist/PURGE',\n          'persist/REGISTER',\n        ],\n      },\n    }),\n  devTools: process.env.NODE_ENV !== 'production', // Enables Redux DevTools only in development\n});\n\n// Inferred types for RootState and AppDispatch\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,gBAAgB,MAAM,kBAAkB;AAC/C,OAAOC,YAAY,MAAM,cAAc;AACvC,OAAOC,SAAS,MAAM,WAAW;;AAEjC;AACA,OAAO,MAAMC,KAAK,GAAGL,cAAc,CAAC;EAClCM,OAAO,EAAE;IACPC,IAAI,EAAEN,WAAW;IACjBO,UAAU,EAAEN,gBAAgB;IAC5BO,KAAK,EAAEN,YAAY;IACnBO,EAAE,EAAEN;EACN,CAAC;EACDO,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CACd,iBAAiB,EACjB,mBAAmB,EACnB,eAAe,EACf,eAAe,EACf,eAAe,EACf,kBAAkB;IAEtB;EACF,CAAC,CAAC;EACJC,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,CAAE;AACnD,CAAC,CAAC;;AAEF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
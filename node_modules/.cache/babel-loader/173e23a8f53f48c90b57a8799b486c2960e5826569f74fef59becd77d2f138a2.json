{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useRobot.js\nimport { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { connectRobot, disconnectRobot, moveJoint, moveToPosition, emergencyStop, calibrateRobot, executeCode, setRobotData, addError, clearErrors, addWarning, clearWarnings, selectIsConnected, selectConnectionStatus, selectTelemetry, selectRobotErrors, selectRobotWarnings, selectExecutionState, selectSafetyState, selectCalibrationState, selectRobotConfig, selectLoadingState } from '../store/robotSlice';\nimport websocketService from '../services/websocketService';\nimport robotService from '../services/robotService';\nexport const useRobot = () => {\n  _s();\n  var _errors;\n  const dispatch = useDispatch();\n\n  // Selectors\n  const connected = useSelector(selectIsConnected);\n  const connectionStatus = useSelector(selectConnectionStatus);\n  const telemetry = useSelector(selectTelemetry);\n  const errors = useSelector(selectRobotErrors);\n  const warnings = useSelector(selectRobotWarnings);\n  const executionState = useSelector(selectExecutionState);\n  const safetyState = useSelector(selectSafetyState);\n  const calibrationState = useSelector(selectCalibrationState);\n  const robotConfig = useSelector(selectRobotConfig);\n  const loading = useSelector(selectLoadingState);\n\n  // Computed values\n  const jointAngles = (telemetry === null || telemetry === void 0 ? void 0 : telemetry.joint_angles) || [0, 0, 0];\n  const jointVelocities = (telemetry === null || telemetry === void 0 ? void 0 : telemetry.joint_velocities) || [0, 0, 0];\n  const jointTemperatures = (telemetry === null || telemetry === void 0 ? void 0 : telemetry.joint_temperatures) || [25, 25, 25];\n  const jointCurrents = (telemetry === null || telemetry === void 0 ? void 0 : telemetry.joint_currents) || [0, 0, 0];\n  const isExecuting = (executionState === null || executionState === void 0 ? void 0 : executionState.isExecuting) || false;\n  const isCalibrated = (calibrationState === null || calibrationState === void 0 ? void 0 : calibrationState.isCalibrated) || false;\n  const error = (errors === null || errors === void 0 ? void 0 : (_errors = errors[errors.length - 1]) === null || _errors === void 0 ? void 0 : _errors.message) || null;\n\n  // Connection methods\n  const connect = useCallback(async () => {\n    try {\n      await dispatch(connectRobot()).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to connect robot:', error);\n      return false;\n    }\n  }, [dispatch]);\n  const disconnect = useCallback(async () => {\n    try {\n      await dispatch(disconnectRobot()).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to disconnect robot:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Movement methods\n  const moveJointToPosition = useCallback(async (jointId, position) => {\n    try {\n      await dispatch(moveJoint({\n        jointId,\n        position\n      })).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to move joint:', error);\n      return false;\n    }\n  }, [dispatch]);\n  const moveToTargetPosition = useCallback(async positions => {\n    try {\n      await dispatch(moveToPosition(positions)).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to move to position:', error);\n      return false;\n    }\n  }, [dispatch]);\n  const setJointAngles = useCallback(async angles => {\n    try {\n      // Convert angles to appropriate format and send command\n      const command = connected && websocketService.isConnected() ? websocketService.sendRobotCommand('set_joint_angles', {\n        angles\n      }) : await robotService.setJointAngles(angles);\n      if (command !== false) {\n        // Update local state optimistically\n        dispatch(setRobotData({\n          joint_angles: angles\n        }));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      dispatch(addError({\n        message: `Failed to set joint angles: ${error.message}`\n      }));\n      return false;\n    }\n  }, [dispatch, connected]);\n  const getJointAngles = useCallback(async () => {\n    try {\n      if (connected && websocketService.isConnected()) {\n        // Return current telemetry data\n        return jointAngles;\n      } else {\n        var _response$data;\n        // Fetch from API\n        const response = await robotService.getJointAngles();\n        return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.joint_angles) || jointAngles;\n      }\n    } catch (error) {\n      dispatch(addError({\n        message: `Failed to get joint angles: ${error.message}`\n      }));\n      return jointAngles; // Return cached data as fallback\n    }\n  }, [dispatch, connected, jointAngles]);\n\n  // Torque control\n  const enableTorque = useCallback(async actuatorId => {\n    try {\n      const command = connected && websocketService.isConnected() ? websocketService.sendRobotCommand('enable_torque', {\n        actuator_id: actuatorId\n      }) : await robotService.enableTorque(actuatorId);\n      return command !== false;\n    } catch (error) {\n      dispatch(addError({\n        message: `Failed to enable torque: ${error.message}`\n      }));\n      return false;\n    }\n  }, [dispatch, connected]);\n  const disableTorque = useCallback(async actuatorId => {\n    try {\n      const command = connected && websocketService.isConnected() ? websocketService.sendRobotCommand('disable_torque', {\n        actuator_id: actuatorId\n      }) : await robotService.disableTorque(actuatorId);\n      return command !== false;\n    } catch (error) {\n      dispatch(addError({\n        message: `Failed to disable torque: ${error.message}`\n      }));\n      return false;\n    }\n  }, [dispatch, connected]);\n\n  // Safety methods\n  const triggerEmergencyStop = useCallback(async () => {\n    try {\n      await dispatch(emergencyStop()).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to trigger emergency stop:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Calibration\n  const calibrate = useCallback(async () => {\n    try {\n      await dispatch(calibrateRobot()).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to calibrate robot:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Code execution\n  const executeRobotCode = useCallback(async code => {\n    try {\n      await dispatch(executeCode(code)).unwrap();\n      return true;\n    } catch (error) {\n      console.error('Failed to execute code:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Error handling\n  const clearError = useCallback(() => {\n    dispatch(clearErrors());\n  }, [dispatch]);\n  const clearWarning = useCallback(() => {\n    dispatch(clearWarnings());\n  }, [dispatch]);\n\n  // State update methods\n  const updateRobotState = useCallback(newState => {\n    dispatch(setRobotData(newState));\n  }, [dispatch]);\n\n  // Send generic command\n  const sendCommand = useCallback(async (command, parameters = {}) => {\n    try {\n      if (connected && websocketService.isConnected()) {\n        return websocketService.sendRobotCommand(command, parameters);\n      } else {\n        // Fallback to HTTP API\n        const response = await robotService.sendCommand(command, parameters);\n        return response.data;\n      }\n    } catch (error) {\n      dispatch(addError({\n        message: `Command failed: ${error.message}`\n      }));\n      return false;\n    }\n  }, [dispatch, connected]);\n\n  // Hardware status (mock data for compatibility)\n  const hardware = {\n    actuators: [{\n      id: 1,\n      enabled: true,\n      position: jointAngles[0] || 0,\n      current: jointCurrents[0] || 0,\n      temperature: jointTemperatures[0] || 25\n    }, {\n      id: 2,\n      enabled: true,\n      position: jointAngles[1] || 0,\n      current: jointCurrents[1] || 0,\n      temperature: jointTemperatures[1] || 25\n    }, {\n      id: 3,\n      enabled: true,\n      position: jointAngles[2] || 0,\n      current: jointCurrents[2] || 0,\n      temperature: jointTemperatures[2] || 25\n    }],\n    connected: connected,\n    status: connectionStatus\n  };\n  return {\n    // Connection state\n    connected,\n    connectionStatus,\n    loading,\n    // Robot data\n    jointAngles,\n    jointVelocities,\n    jointTemperatures,\n    jointCurrents,\n    telemetry,\n    hardware,\n    // Execution state\n    isExecuting,\n    executionState,\n    // Safety and calibration\n    safetyState,\n    isCalibrated,\n    calibrationState,\n    robotConfig,\n    // Errors and warnings\n    error,\n    errors,\n    warnings,\n    // Connection methods\n    connect,\n    disconnect,\n    // Movement methods\n    moveJoint: moveJointToPosition,\n    moveToPosition: moveToTargetPosition,\n    setJointAngles,\n    getJointAngles,\n    // Torque control\n    enableTorque,\n    disableTorque,\n    // Safety methods\n    emergencyStop: triggerEmergencyStop,\n    // Calibration\n    calibrate,\n    // Code execution\n    executeCode: executeRobotCode,\n    // Error handling\n    clearError,\n    clearWarning,\n    // State management\n    updateState: updateRobotState,\n    sendCommand,\n    // Utility methods\n    isConnected: () => connected,\n    getStatus: () => ({\n      connected,\n      status: connectionStatus,\n      executing: isExecuting,\n      calibrated: isCalibrated,\n      errors: errors.length,\n      warnings: warnings.length\n    })\n  };\n};\n_s(useRobot, \"Tum0SB+Blzl5qGppZDAUowHid2I=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});","map":{"version":3,"names":["useCallback","useSelector","useDispatch","connectRobot","disconnectRobot","moveJoint","moveToPosition","emergencyStop","calibrateRobot","executeCode","setRobotData","addError","clearErrors","addWarning","clearWarnings","selectIsConnected","selectConnectionStatus","selectTelemetry","selectRobotErrors","selectRobotWarnings","selectExecutionState","selectSafetyState","selectCalibrationState","selectRobotConfig","selectLoadingState","websocketService","robotService","useRobot","_s","_errors","dispatch","connected","connectionStatus","telemetry","errors","warnings","executionState","safetyState","calibrationState","robotConfig","loading","jointAngles","joint_angles","jointVelocities","joint_velocities","jointTemperatures","joint_temperatures","jointCurrents","joint_currents","isExecuting","isCalibrated","error","length","message","connect","unwrap","console","disconnect","moveJointToPosition","jointId","position","moveToTargetPosition","positions","setJointAngles","angles","command","isConnected","sendRobotCommand","getJointAngles","_response$data","response","data","enableTorque","actuatorId","actuator_id","disableTorque","triggerEmergencyStop","calibrate","executeRobotCode","code","clearError","clearWarning","updateRobotState","newState","sendCommand","parameters","hardware","actuators","id","enabled","current","temperature","status","updateState","getStatus","executing","calibrated"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/hooks/useRobot.js"],"sourcesContent":["// src/hooks/useRobot.js\r\nimport { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { \r\n  connectRobot, \r\n  disconnectRobot,\r\n  moveJoint,\r\n  moveToPosition,\r\n  emergencyStop,\r\n  calibrateRobot,\r\n  executeCode,\r\n  setRobotData,\r\n  addError,\r\n  clearErrors,\r\n  addWarning,\r\n  clearWarnings,\r\n  selectIsConnected,\r\n  selectConnectionStatus,\r\n  selectTelemetry,\r\n  selectRobotErrors,\r\n  selectRobotWarnings,\r\n  selectExecutionState,\r\n  selectSafetyState,\r\n  selectCalibrationState,\r\n  selectRobotConfig,\r\n  selectLoadingState\r\n} from '../store/robotSlice';\r\nimport websocketService from '../services/websocketService';\r\nimport robotService from '../services/robotService';\r\n\r\nexport const useRobot = () => {\r\n  const dispatch = useDispatch();\r\n  \r\n  // Selectors\r\n  const connected = useSelector(selectIsConnected);\r\n  const connectionStatus = useSelector(selectConnectionStatus);\r\n  const telemetry = useSelector(selectTelemetry);\r\n  const errors = useSelector(selectRobotErrors);\r\n  const warnings = useSelector(selectRobotWarnings);\r\n  const executionState = useSelector(selectExecutionState);\r\n  const safetyState = useSelector(selectSafetyState);\r\n  const calibrationState = useSelector(selectCalibrationState);\r\n  const robotConfig = useSelector(selectRobotConfig);\r\n  const loading = useSelector(selectLoadingState);\r\n\r\n  // Computed values\r\n  const jointAngles = telemetry?.joint_angles || [0, 0, 0];\r\n  const jointVelocities = telemetry?.joint_velocities || [0, 0, 0];\r\n  const jointTemperatures = telemetry?.joint_temperatures || [25, 25, 25];\r\n  const jointCurrents = telemetry?.joint_currents || [0, 0, 0];\r\n  const isExecuting = executionState?.isExecuting || false;\r\n  const isCalibrated = calibrationState?.isCalibrated || false;\r\n  const error = errors?.[errors.length - 1]?.message || null;\r\n\r\n  // Connection methods\r\n  const connect = useCallback(async () => {\r\n    try {\r\n      await dispatch(connectRobot()).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to connect robot:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const disconnect = useCallback(async () => {\r\n    try {\r\n      await dispatch(disconnectRobot()).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to disconnect robot:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Movement methods\r\n  const moveJointToPosition = useCallback(async (jointId, position) => {\r\n    try {\r\n      await dispatch(moveJoint({ jointId, position })).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to move joint:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const moveToTargetPosition = useCallback(async (positions) => {\r\n    try {\r\n      await dispatch(moveToPosition(positions)).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to move to position:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  const setJointAngles = useCallback(async (angles) => {\r\n    try {\r\n      // Convert angles to appropriate format and send command\r\n      const command = connected && websocketService.isConnected() \r\n        ? websocketService.sendRobotCommand('set_joint_angles', { angles })\r\n        : await robotService.setJointAngles(angles);\r\n      \r\n      if (command !== false) {\r\n        // Update local state optimistically\r\n        dispatch(setRobotData({ joint_angles: angles }));\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      dispatch(addError({ message: `Failed to set joint angles: ${error.message}` }));\r\n      return false;\r\n    }\r\n  }, [dispatch, connected]);\r\n\r\n  const getJointAngles = useCallback(async () => {\r\n    try {\r\n      if (connected && websocketService.isConnected()) {\r\n        // Return current telemetry data\r\n        return jointAngles;\r\n      } else {\r\n        // Fetch from API\r\n        const response = await robotService.getJointAngles();\r\n        return response.data?.joint_angles || jointAngles;\r\n      }\r\n    } catch (error) {\r\n      dispatch(addError({ message: `Failed to get joint angles: ${error.message}` }));\r\n      return jointAngles; // Return cached data as fallback\r\n    }\r\n  }, [dispatch, connected, jointAngles]);\r\n\r\n  // Torque control\r\n  const enableTorque = useCallback(async (actuatorId) => {\r\n    try {\r\n      const command = connected && websocketService.isConnected()\r\n        ? websocketService.sendRobotCommand('enable_torque', { actuator_id: actuatorId })\r\n        : await robotService.enableTorque(actuatorId);\r\n      \r\n      return command !== false;\r\n    } catch (error) {\r\n      dispatch(addError({ message: `Failed to enable torque: ${error.message}` }));\r\n      return false;\r\n    }\r\n  }, [dispatch, connected]);\r\n\r\n  const disableTorque = useCallback(async (actuatorId) => {\r\n    try {\r\n      const command = connected && websocketService.isConnected()\r\n        ? websocketService.sendRobotCommand('disable_torque', { actuator_id: actuatorId })\r\n        : await robotService.disableTorque(actuatorId);\r\n      \r\n      return command !== false;\r\n    } catch (error) {\r\n      dispatch(addError({ message: `Failed to disable torque: ${error.message}` }));\r\n      return false;\r\n    }\r\n  }, [dispatch, connected]);\r\n\r\n  // Safety methods\r\n  const triggerEmergencyStop = useCallback(async () => {\r\n    try {\r\n      await dispatch(emergencyStop()).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to trigger emergency stop:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Calibration\r\n  const calibrate = useCallback(async () => {\r\n    try {\r\n      await dispatch(calibrateRobot()).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to calibrate robot:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Code execution\r\n  const executeRobotCode = useCallback(async (code) => {\r\n    try {\r\n      await dispatch(executeCode(code)).unwrap();\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Failed to execute code:', error);\r\n      return false;\r\n    }\r\n  }, [dispatch]);\r\n\r\n  // Error handling\r\n  const clearError = useCallback(() => {\r\n    dispatch(clearErrors());\r\n  }, [dispatch]);\r\n\r\n  const clearWarning = useCallback(() => {\r\n    dispatch(clearWarnings());\r\n  }, [dispatch]);\r\n\r\n  // State update methods\r\n  const updateRobotState = useCallback((newState) => {\r\n    dispatch(setRobotData(newState));\r\n  }, [dispatch]);\r\n\r\n  // Send generic command\r\n  const sendCommand = useCallback(async (command, parameters = {}) => {\r\n    try {\r\n      if (connected && websocketService.isConnected()) {\r\n        return websocketService.sendRobotCommand(command, parameters);\r\n      } else {\r\n        // Fallback to HTTP API\r\n        const response = await robotService.sendCommand(command, parameters);\r\n        return response.data;\r\n      }\r\n    } catch (error) {\r\n      dispatch(addError({ message: `Command failed: ${error.message}` }));\r\n      return false;\r\n    }\r\n  }, [dispatch, connected]);\r\n\r\n  // Hardware status (mock data for compatibility)\r\n  const hardware = {\r\n    actuators: [\r\n      { id: 1, enabled: true, position: jointAngles[0] || 0, current: jointCurrents[0] || 0, temperature: jointTemperatures[0] || 25 },\r\n      { id: 2, enabled: true, position: jointAngles[1] || 0, current: jointCurrents[1] || 0, temperature: jointTemperatures[1] || 25 },\r\n      { id: 3, enabled: true, position: jointAngles[2] || 0, current: jointCurrents[2] || 0, temperature: jointTemperatures[2] || 25 }\r\n    ],\r\n    connected: connected,\r\n    status: connectionStatus\r\n  };\r\n\r\n  return {\r\n    // Connection state\r\n    connected,\r\n    connectionStatus,\r\n    loading,\r\n    \r\n    // Robot data\r\n    jointAngles,\r\n    jointVelocities,\r\n    jointTemperatures,\r\n    jointCurrents,\r\n    telemetry,\r\n    hardware,\r\n    \r\n    // Execution state\r\n    isExecuting,\r\n    executionState,\r\n    \r\n    // Safety and calibration\r\n    safetyState,\r\n    isCalibrated,\r\n    calibrationState,\r\n    robotConfig,\r\n    \r\n    // Errors and warnings\r\n    error,\r\n    errors,\r\n    warnings,\r\n    \r\n    // Connection methods\r\n    connect,\r\n    disconnect,\r\n    \r\n    // Movement methods\r\n    moveJoint: moveJointToPosition,\r\n    moveToPosition: moveToTargetPosition,\r\n    setJointAngles,\r\n    getJointAngles,\r\n    \r\n    // Torque control\r\n    enableTorque,\r\n    disableTorque,\r\n    \r\n    // Safety methods\r\n    emergencyStop: triggerEmergencyStop,\r\n    \r\n    // Calibration\r\n    calibrate,\r\n    \r\n    // Code execution\r\n    executeCode: executeRobotCode,\r\n    \r\n    // Error handling\r\n    clearError,\r\n    clearWarning,\r\n    \r\n    // State management\r\n    updateState: updateRobotState,\r\n    sendCommand,\r\n    \r\n    // Utility methods\r\n    isConnected: () => connected,\r\n    getStatus: () => ({\r\n      connected,\r\n      status: connectionStatus,\r\n      executing: isExecuting,\r\n      calibrated: isCalibrated,\r\n      errors: errors.length,\r\n      warnings: warnings.length\r\n    })\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
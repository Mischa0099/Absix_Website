{"ast":null,"code":"// src/services/challengeService.js\nimport api from './api';\nconst challengeService = {\n  // Get all challenges with user progress\n  getChallenges: async () => {\n    try {\n      console.log('🎯 Challenge Service: Fetching challenges...');\n      const response = await api.get('/api/v1/challenges');\n      console.log('🎯 Challenge Service: Challenges fetched successfully');\n      return response;\n    } catch (error) {\n      console.error('🎯 Challenge Service: Fetch challenges failed:', error);\n\n      // Return mock data structure that matches your frontend expectations\n      console.log('🎯 Using fallback mock data for challenges');\n      const mockChallenges = {\n        challenges: [{\n          id: \"C1\",\n          challenge_id: \"C1\",\n          title: \"Combined Angle Challenge\",\n          name: \"Combined Angle Challenge\",\n          description: \"Master robot joint control by manually positioning the robot to match target angles. Test your understanding of robot configuration and physical manipulation.\",\n          challenge_type: \"manual_movement\",\n          difficulty: \"beginner\",\n          is_unlocked: true,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 15,\n          order_index: 1\n        }, {\n          id: \"C2\",\n          challenge_id: \"C2\",\n          title: \"Controls Quiz\",\n          name: \"Controls Quiz\",\n          description: \"Test your theoretical knowledge of control systems with this interactive quiz. Master the fundamentals before diving into practical applications.\",\n          challenge_type: \"quiz\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 10,\n          order_index: 2\n        }, {\n          id: \"C3\",\n          challenge_id: \"C3\",\n          title: \"PD Gain Tuning\",\n          name: \"PD Gain Tuning\",\n          description: \"Learn controller design by tuning PD gains for optimal robot performance. Balance stability, response time, and accuracy.\",\n          challenge_type: \"pd_control\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 20,\n          order_index: 3\n        }, {\n          id: \"C4\",\n          challenge_id: \"C4\",\n          title: \"Workspace Identification\",\n          name: \"Workspace Identification\",\n          description: \"We will throw points at your robot, will it be able to catch them? Test your understanding of robot workspace and reachability.\",\n          challenge_type: \"workspace\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 25,\n          order_index: 4\n        }, {\n          id: \"C5\",\n          challenge_id: \"C5\",\n          title: \"2R - EE Orientation & Position\",\n          name: \"2R - EE Orientation & Position\",\n          description: \"Verify end effector's orientation and position kinematics for a 2R robot. Master forward kinematics and transformation matrices.\",\n          challenge_type: \"orientation\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 30,\n          order_index: 5\n        }],\n        userProgress: {\n          completed: 0,\n          totalScore: 0,\n          rank: 'Rising Roboticist',\n          challengesCompleted: 0,\n          streakCount: 0\n        }\n      };\n      return {\n        data: mockChallenges\n      };\n    }\n  },\n  // Get specific challenge details\n  getChallenge: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}`);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} fetched successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch challenge ${challengeId} failed:`, error);\n\n      // Return mock challenge data based on ID\n      console.log(`🎯 Using fallback mock data for challenge ${challengeId}`);\n      const mockChallengeData = {\n        C1: {\n          id: \"C1\",\n          challenge_id: \"C1\",\n          title: \"Combined Angle Challenge\",\n          description: \"Master robot joint control by manually positioning the robot to match target angles. Test your understanding of robot configuration and physical manipulation.\",\n          challenge_type: \"manual_movement\",\n          type: \"manual_movement\",\n          difficulty: \"beginner\",\n          is_unlocked: true,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 15,\n          parameters: {\n            joint_limits: [-180, 180],\n            precision_threshold: 5\n          },\n          success_criteria: {\n            accuracy_threshold: 90,\n            time_limit: 900\n          },\n          instructions: \"Use the robot controls to move each joint to match the target angles displayed. You have 3 tasks to complete with increasing difficulty.\",\n          video_url: null\n        },\n        C2: {\n          id: \"C2\",\n          challenge_id: \"C2\",\n          title: \"Controls Quiz\",\n          description: \"Test your theoretical knowledge of control systems with this interactive quiz. Master the fundamentals before diving into practical applications.\",\n          challenge_type: \"quiz\",\n          type: \"quiz\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 10,\n          instructions: \"Answer the quiz questions about control theory concepts. You need to score at least 70% to pass.\",\n          video_url: null\n        },\n        C3: {\n          id: \"C3\",\n          challenge_id: \"C3\",\n          title: \"PD Gain Tuning\",\n          description: \"Learn controller design by tuning PD gains for optimal robot performance. Balance stability, response time, and accuracy.\",\n          challenge_type: \"pd_control\",\n          type: \"pd_control\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 20,\n          instructions: \"Adjust the proportional (Kp) and derivative (Kd) gains to achieve optimal control performance.\",\n          video_url: null\n        },\n        C4: {\n          id: \"C4\",\n          challenge_id: \"C4\",\n          title: \"Workspace Identification\",\n          description: \"We will throw points at your robot, will it be able to catch them? Test your understanding of robot workspace and reachability.\",\n          challenge_type: \"workspace\",\n          type: \"workspace\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 25,\n          instructions: \"Identify whether the given points are within the robot's reachable workspace.\",\n          video_url: null\n        },\n        C5: {\n          id: \"C5\",\n          challenge_id: \"C5\",\n          title: \"2R - EE Orientation & Position\",\n          description: \"Verify end effector's orientation and position kinematics for a 2R robot. Master forward kinematics and transformation matrices.\",\n          challenge_type: \"orientation\",\n          type: \"orientation\",\n          difficulty: \"beginner\",\n          is_unlocked: false,\n          is_completed: false,\n          best_score: 0,\n          attempts: 0,\n          estimated_time: 30,\n          instructions: \"Calculate the end effector position and orientation for given joint angles.\",\n          video_url: null\n        }\n      };\n      const mockChallenge = mockChallengeData[challengeId];\n      if (mockChallenge) {\n        return {\n          data: {\n            challenge: mockChallenge,\n            user_progress: {\n              best_score: mockChallenge.best_score,\n              total_attempts: mockChallenge.attempts,\n              is_completed: mockChallenge.is_completed\n            },\n            is_unlocked: mockChallenge.is_unlocked\n          }\n        };\n      } else {\n        // Return a generic challenge if specific one not found\n        return {\n          data: {\n            challenge: {\n              id: challengeId,\n              challenge_id: challengeId,\n              title: `Challenge ${challengeId}`,\n              description: `This is challenge ${challengeId}. Complete the tasks to earn points.`,\n              challenge_type: \"manual_movement\",\n              type: \"manual_movement\",\n              difficulty: \"beginner\",\n              is_unlocked: challengeId === \"C1\",\n              is_completed: false,\n              best_score: 0,\n              attempts: 0,\n              estimated_time: 15,\n              instructions: \"Follow the instructions to complete this challenge.\",\n              video_url: null\n            },\n            user_progress: {\n              best_score: 0,\n              total_attempts: 0,\n              is_completed: false\n            },\n            is_unlocked: challengeId === \"C1\"\n          }\n        };\n      }\n    }\n  },\n  // Start a challenge\n  startChallenge: async (challengeId, parameters = {}) => {\n    try {\n      console.log(`🎯 Challenge Service: Starting challenge ${challengeId}...`);\n      const response = await api.post(`/api/v1/challenges/${challengeId}/start`, parameters);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} started successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Start challenge ${challengeId} failed:`, error);\n\n      // Mock successful start response\n      console.log(`🎯 Using fallback mock start response for challenge ${challengeId}`);\n      return {\n        data: {\n          attempt_id: Date.now(),\n          challenge_id: challengeId,\n          status: \"started\",\n          attempt_number: 1,\n          parameters: parameters || {},\n          session_id: `session_${Date.now()}`,\n          started_at: new Date().toISOString()\n        }\n      };\n    }\n  },\n  // Submit challenge solution\n  submitChallenge: async (challengeId, submission) => {\n    try {\n      console.log(`🎯 Challenge Service: Submitting challenge ${challengeId}...`);\n      const response = await api.post(`/api/v1/challenges/${challengeId}/submit`, submission);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} submitted successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Submit challenge ${challengeId} failed:`, error);\n\n      // Mock submission response\n      console.log(`🎯 Using fallback mock submit response for challenge ${challengeId}`);\n      const mockScore = Math.floor(Math.random() * 50) + 50; // 50-100\n\n      return {\n        data: {\n          attempt_id: Date.now(),\n          score: mockScore,\n          success: mockScore > 60,\n          feedback: mockScore > 80 ? \"Excellent work! You completed the challenge with high precision.\" : mockScore > 60 ? \"Good job! You completed the challenge successfully.\" : \"Keep practicing! You can improve your performance.\",\n          performance_data: submission,\n          completed_at: new Date().toISOString()\n        }\n      };\n    }\n  },\n  // Get challenge results/history\n  getChallengeResults: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching results for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/results`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch results for challenge ${challengeId} failed:`, error);\n\n      // Mock results\n      return {\n        data: {\n          attempts: [],\n          best_score: 0,\n          total_attempts: 0,\n          average_score: 0,\n          last_attempt: null\n        }\n      };\n    }\n  },\n  // Get challenge attempt history\n  getChallengeHistory: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching history for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/attempts`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch history for challenge ${challengeId} failed:`, error);\n\n      // Mock history\n      return {\n        data: {\n          attempts: [],\n          total_count: 0\n        }\n      };\n    }\n  },\n  // Get challenge leaderboard\n  getChallengeLeaderboard: async (challengeId, limit = 10) => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching leaderboard for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/leaderboard?limit=${limit}`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch leaderboard for challenge ${challengeId} failed:`, error);\n\n      // Mock leaderboard\n      return {\n        data: [{\n          rank: 1,\n          username: \"RobotMaster\",\n          score: 95,\n          attempts: 3,\n          completion_time: \"2:45\"\n        }, {\n          rank: 2,\n          username: \"TechGuru\",\n          score: 88,\n          attempts: 5,\n          completion_time: \"3:12\"\n        }]\n      };\n    }\n  },\n  // Get user progress\n  getUserProgress: async () => {\n    try {\n      console.log('👤 Challenge Service: Fetching user progress...');\n      const response = await api.get('/api/v1/users/progress');\n      return response;\n    } catch (error) {\n      console.error('👤 Challenge Service: Fetch user progress failed:', error);\n\n      // Mock user progress\n      return {\n        data: {\n          completed: 0,\n          totalScore: 0,\n          rank: 'Rising Roboticist',\n          challengesCompleted: 0,\n          streakCount: 0,\n          achievements: [],\n          recent_activity: []\n        }\n      };\n    }\n  },\n  // Get global leaderboard\n  getLeaderboard: async (limit = 50) => {\n    try {\n      console.log('🏆 Challenge Service: Fetching leaderboard...');\n      const response = await api.get(`/api/v1/users/leaderboard?limit=${limit}`);\n      return response;\n    } catch (error) {\n      console.error('🏆 Challenge Service: Fetch leaderboard failed:', error);\n\n      // Mock leaderboard\n      return {\n        data: [{\n          id: 1,\n          username: \"RobotMaster\",\n          challengesCompleted: 5,\n          totalScore: 450,\n          rank: \"Robotics Master\"\n        }, {\n          id: 2,\n          username: \"TechGuru\",\n          challengesCompleted: 4,\n          totalScore: 380,\n          rank: \"Robotics Specialist\"\n        }, {\n          id: 3,\n          username: \"CodeBot\",\n          challengesCompleted: 3,\n          totalScore: 290,\n          rank: \"Robotics Beginner\"\n        }]\n      };\n    }\n  },\n  // Get hardware status\n  getHardwareStatus: async () => {\n    try {\n      console.log('🤖 Challenge Service: Fetching hardware status...');\n      const response = await api.get('/api/v1/challenges/system/hardware-status');\n      return response;\n    } catch (error) {\n      console.error('🤖 Challenge Service: Fetch hardware status failed:', error);\n\n      // Mock hardware status\n      return {\n        data: {\n          connected: false,\n          robot_status: \"disconnected\",\n          joints: [{\n            id: 1,\n            position: 0,\n            enabled: false\n          }, {\n            id: 2,\n            position: 0,\n            enabled: false\n          }, {\n            id: 3,\n            position: 0,\n            enabled: false\n          }],\n          last_update: new Date().toISOString()\n        }\n      };\n    }\n  },\n  // Add a method to validate API connection\n  validateConnection: async () => {\n    try {\n      const response = await api.get('/api/v1/health');\n      return {\n        connected: true,\n        data: response.data\n      };\n    } catch (error) {\n      console.warn('⚠️ API Connection failed, using mock data mode');\n      return {\n        connected: false,\n        error: error.message\n      };\n    }\n  }\n};\nexport default challengeService;","map":{"version":3,"names":["api","challengeService","getChallenges","console","log","response","get","error","mockChallenges","challenges","id","challenge_id","title","name","description","challenge_type","difficulty","is_unlocked","is_completed","best_score","attempts","estimated_time","order_index","userProgress","completed","totalScore","rank","challengesCompleted","streakCount","data","getChallenge","challengeId","mockChallengeData","C1","type","parameters","joint_limits","precision_threshold","success_criteria","accuracy_threshold","time_limit","instructions","video_url","C2","C3","C4","C5","mockChallenge","challenge","user_progress","total_attempts","startChallenge","post","attempt_id","Date","now","status","attempt_number","session_id","started_at","toISOString","submitChallenge","submission","mockScore","Math","floor","random","score","success","feedback","performance_data","completed_at","getChallengeResults","average_score","last_attempt","getChallengeHistory","total_count","getChallengeLeaderboard","limit","username","completion_time","getUserProgress","achievements","recent_activity","getLeaderboard","getHardwareStatus","connected","robot_status","joints","position","enabled","last_update","validateConnection","warn","message"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/services/challengeService.js"],"sourcesContent":["// src/services/challengeService.js\r\nimport api from './api';\r\n\r\nconst challengeService = {\r\n  // Get all challenges with user progress\r\n  getChallenges: async () => {\r\n    try {\r\n      console.log('🎯 Challenge Service: Fetching challenges...');\r\n      const response = await api.get('/api/v1/challenges');\r\n      console.log('🎯 Challenge Service: Challenges fetched successfully');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🎯 Challenge Service: Fetch challenges failed:', error);\r\n      \r\n      // Return mock data structure that matches your frontend expectations\r\n      console.log('🎯 Using fallback mock data for challenges');\r\n      const mockChallenges = {\r\n        challenges: [\r\n          {\r\n            id: \"C1\",\r\n            challenge_id: \"C1\", \r\n            title: \"Combined Angle Challenge\",\r\n            name: \"Combined Angle Challenge\",\r\n            description: \"Master robot joint control by manually positioning the robot to match target angles. Test your understanding of robot configuration and physical manipulation.\",\r\n            challenge_type: \"manual_movement\",\r\n            difficulty: \"beginner\",\r\n            is_unlocked: true,\r\n            is_completed: false,\r\n            best_score: 0,\r\n            attempts: 0,\r\n            estimated_time: 15,\r\n            order_index: 1\r\n          },\r\n          {\r\n            id: \"C2\",\r\n            challenge_id: \"C2\",\r\n            title: \"Controls Quiz\", \r\n            name: \"Controls Quiz\",\r\n            description: \"Test your theoretical knowledge of control systems with this interactive quiz. Master the fundamentals before diving into practical applications.\",\r\n            challenge_type: \"quiz\",\r\n            difficulty: \"beginner\", \r\n            is_unlocked: false,\r\n            is_completed: false,\r\n            best_score: 0,\r\n            attempts: 0,\r\n            estimated_time: 10,\r\n            order_index: 2\r\n          },\r\n          {\r\n            id: \"C3\",\r\n            challenge_id: \"C3\",\r\n            title: \"PD Gain Tuning\",\r\n            name: \"PD Gain Tuning\", \r\n            description: \"Learn controller design by tuning PD gains for optimal robot performance. Balance stability, response time, and accuracy.\",\r\n            challenge_type: \"pd_control\",\r\n            difficulty: \"beginner\",\r\n            is_unlocked: false,\r\n            is_completed: false,\r\n            best_score: 0,\r\n            attempts: 0,\r\n            estimated_time: 20,\r\n            order_index: 3\r\n          },\r\n          {\r\n            id: \"C4\",\r\n            challenge_id: \"C4\",\r\n            title: \"Workspace Identification\",\r\n            name: \"Workspace Identification\",\r\n            description: \"We will throw points at your robot, will it be able to catch them? Test your understanding of robot workspace and reachability.\",\r\n            challenge_type: \"workspace\",\r\n            difficulty: \"beginner\",\r\n            is_unlocked: false,\r\n            is_completed: false,\r\n            best_score: 0,\r\n            attempts: 0,\r\n            estimated_time: 25,\r\n            order_index: 4\r\n          },\r\n          {\r\n            id: \"C5\", \r\n            challenge_id: \"C5\",\r\n            title: \"2R - EE Orientation & Position\",\r\n            name: \"2R - EE Orientation & Position\",\r\n            description: \"Verify end effector's orientation and position kinematics for a 2R robot. Master forward kinematics and transformation matrices.\",\r\n            challenge_type: \"orientation\",\r\n            difficulty: \"beginner\",\r\n            is_unlocked: false,\r\n            is_completed: false,\r\n            best_score: 0,\r\n            attempts: 0,\r\n            estimated_time: 30,\r\n            order_index: 5\r\n          }\r\n        ],\r\n        userProgress: {\r\n          completed: 0,\r\n          totalScore: 0,\r\n          rank: 'Rising Roboticist',\r\n          challengesCompleted: 0,\r\n          streakCount: 0\r\n        }\r\n      };\r\n      \r\n      return { data: mockChallenges };\r\n    }\r\n  },\r\n\r\n  // Get specific challenge details\r\n  getChallenge: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}`);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} fetched successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch challenge ${challengeId} failed:`, error);\r\n      \r\n      // Return mock challenge data based on ID\r\n      console.log(`🎯 Using fallback mock data for challenge ${challengeId}`);\r\n      const mockChallengeData = {\r\n        C1: {\r\n          id: \"C1\",\r\n          challenge_id: \"C1\",\r\n          title: \"Combined Angle Challenge\",\r\n          description: \"Master robot joint control by manually positioning the robot to match target angles. Test your understanding of robot configuration and physical manipulation.\",\r\n          challenge_type: \"manual_movement\",\r\n          type: \"manual_movement\",\r\n          difficulty: \"beginner\",\r\n          is_unlocked: true,\r\n          is_completed: false,\r\n          best_score: 0,\r\n          attempts: 0,\r\n          estimated_time: 15,\r\n          parameters: {\r\n            joint_limits: [-180, 180],\r\n            precision_threshold: 5\r\n          },\r\n          success_criteria: {\r\n            accuracy_threshold: 90,\r\n            time_limit: 900\r\n          },\r\n          instructions: \"Use the robot controls to move each joint to match the target angles displayed. You have 3 tasks to complete with increasing difficulty.\",\r\n          video_url: null\r\n        },\r\n        C2: {\r\n          id: \"C2\", \r\n          challenge_id: \"C2\",\r\n          title: \"Controls Quiz\",\r\n          description: \"Test your theoretical knowledge of control systems with this interactive quiz. Master the fundamentals before diving into practical applications.\",\r\n          challenge_type: \"quiz\",\r\n          type: \"quiz\",\r\n          difficulty: \"beginner\",\r\n          is_unlocked: false,\r\n          is_completed: false,\r\n          best_score: 0,\r\n          attempts: 0,\r\n          estimated_time: 10,\r\n          instructions: \"Answer the quiz questions about control theory concepts. You need to score at least 70% to pass.\",\r\n          video_url: null\r\n        },\r\n        C3: {\r\n          id: \"C3\",\r\n          challenge_id: \"C3\", \r\n          title: \"PD Gain Tuning\",\r\n          description: \"Learn controller design by tuning PD gains for optimal robot performance. Balance stability, response time, and accuracy.\",\r\n          challenge_type: \"pd_control\",\r\n          type: \"pd_control\",\r\n          difficulty: \"beginner\",\r\n          is_unlocked: false,\r\n          is_completed: false,\r\n          best_score: 0,\r\n          attempts: 0,\r\n          estimated_time: 20,\r\n          instructions: \"Adjust the proportional (Kp) and derivative (Kd) gains to achieve optimal control performance.\",\r\n          video_url: null\r\n        },\r\n        C4: {\r\n          id: \"C4\",\r\n          challenge_id: \"C4\",\r\n          title: \"Workspace Identification\", \r\n          description: \"We will throw points at your robot, will it be able to catch them? Test your understanding of robot workspace and reachability.\",\r\n          challenge_type: \"workspace\",\r\n          type: \"workspace\", \r\n          difficulty: \"beginner\",\r\n          is_unlocked: false,\r\n          is_completed: false,\r\n          best_score: 0,\r\n          attempts: 0,\r\n          estimated_time: 25,\r\n          instructions: \"Identify whether the given points are within the robot's reachable workspace.\",\r\n          video_url: null\r\n        },\r\n        C5: {\r\n          id: \"C5\",\r\n          challenge_id: \"C5\",\r\n          title: \"2R - EE Orientation & Position\",\r\n          description: \"Verify end effector's orientation and position kinematics for a 2R robot. Master forward kinematics and transformation matrices.\",\r\n          challenge_type: \"orientation\", \r\n          type: \"orientation\",\r\n          difficulty: \"beginner\",\r\n          is_unlocked: false,\r\n          is_completed: false,\r\n          best_score: 0,\r\n          attempts: 0,\r\n          estimated_time: 30,\r\n          instructions: \"Calculate the end effector position and orientation for given joint angles.\",\r\n          video_url: null\r\n        }\r\n      };\r\n      \r\n      const mockChallenge = mockChallengeData[challengeId];\r\n      if (mockChallenge) {\r\n        return { \r\n          data: {\r\n            challenge: mockChallenge,\r\n            user_progress: {\r\n              best_score: mockChallenge.best_score,\r\n              total_attempts: mockChallenge.attempts,\r\n              is_completed: mockChallenge.is_completed\r\n            },\r\n            is_unlocked: mockChallenge.is_unlocked\r\n          }\r\n        };\r\n      } else {\r\n        // Return a generic challenge if specific one not found\r\n        return {\r\n          data: {\r\n            challenge: {\r\n              id: challengeId,\r\n              challenge_id: challengeId,\r\n              title: `Challenge ${challengeId}`,\r\n              description: `This is challenge ${challengeId}. Complete the tasks to earn points.`,\r\n              challenge_type: \"manual_movement\",\r\n              type: \"manual_movement\",\r\n              difficulty: \"beginner\",\r\n              is_unlocked: challengeId === \"C1\",\r\n              is_completed: false,\r\n              best_score: 0,\r\n              attempts: 0,\r\n              estimated_time: 15,\r\n              instructions: \"Follow the instructions to complete this challenge.\",\r\n              video_url: null\r\n            },\r\n            user_progress: {\r\n              best_score: 0,\r\n              total_attempts: 0,\r\n              is_completed: false\r\n            },\r\n            is_unlocked: challengeId === \"C1\"\r\n          }\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  // Start a challenge\r\n  startChallenge: async (challengeId, parameters = {}) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Starting challenge ${challengeId}...`);\r\n      const response = await api.post(`/api/v1/challenges/${challengeId}/start`, parameters);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} started successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Start challenge ${challengeId} failed:`, error);\r\n      \r\n      // Mock successful start response\r\n      console.log(`🎯 Using fallback mock start response for challenge ${challengeId}`);\r\n      return {\r\n        data: {\r\n          attempt_id: Date.now(),\r\n          challenge_id: challengeId,\r\n          status: \"started\",\r\n          attempt_number: 1,\r\n          parameters: parameters || {},\r\n          session_id: `session_${Date.now()}`,\r\n          started_at: new Date().toISOString()\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Submit challenge solution\r\n  submitChallenge: async (challengeId, submission) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Submitting challenge ${challengeId}...`);\r\n      const response = await api.post(`/api/v1/challenges/${challengeId}/submit`, submission);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} submitted successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Submit challenge ${challengeId} failed:`, error);\r\n      \r\n      // Mock submission response\r\n      console.log(`🎯 Using fallback mock submit response for challenge ${challengeId}`);\r\n      const mockScore = Math.floor(Math.random() * 50) + 50; // 50-100\r\n      \r\n      return {\r\n        data: {\r\n          attempt_id: Date.now(),\r\n          score: mockScore,\r\n          success: mockScore > 60,\r\n          feedback: mockScore > 80 ? \r\n            \"Excellent work! You completed the challenge with high precision.\" :\r\n            mockScore > 60 ?\r\n            \"Good job! You completed the challenge successfully.\" :\r\n            \"Keep practicing! You can improve your performance.\",\r\n          performance_data: submission,\r\n          completed_at: new Date().toISOString()\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get challenge results/history\r\n  getChallengeResults: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching results for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/results`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch results for challenge ${challengeId} failed:`, error);\r\n      \r\n      // Mock results\r\n      return {\r\n        data: {\r\n          attempts: [],\r\n          best_score: 0,\r\n          total_attempts: 0,\r\n          average_score: 0,\r\n          last_attempt: null\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get challenge attempt history\r\n  getChallengeHistory: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching history for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/attempts`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch history for challenge ${challengeId} failed:`, error);\r\n      \r\n      // Mock history\r\n      return {\r\n        data: {\r\n          attempts: [],\r\n          total_count: 0\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get challenge leaderboard\r\n  getChallengeLeaderboard: async (challengeId, limit = 10) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching leaderboard for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/leaderboard?limit=${limit}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch leaderboard for challenge ${challengeId} failed:`, error);\r\n      \r\n      // Mock leaderboard\r\n      return {\r\n        data: [\r\n          {\r\n            rank: 1,\r\n            username: \"RobotMaster\",\r\n            score: 95,\r\n            attempts: 3,\r\n            completion_time: \"2:45\"\r\n          },\r\n          {\r\n            rank: 2,\r\n            username: \"TechGuru\", \r\n            score: 88,\r\n            attempts: 5,\r\n            completion_time: \"3:12\"\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get user progress\r\n  getUserProgress: async () => {\r\n    try {\r\n      console.log('👤 Challenge Service: Fetching user progress...');\r\n      const response = await api.get('/api/v1/users/progress');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('👤 Challenge Service: Fetch user progress failed:', error);\r\n      \r\n      // Mock user progress\r\n      return {\r\n        data: {\r\n          completed: 0,\r\n          totalScore: 0,\r\n          rank: 'Rising Roboticist',\r\n          challengesCompleted: 0,\r\n          streakCount: 0,\r\n          achievements: [],\r\n          recent_activity: []\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  getLeaderboard: async (limit = 50) => {\r\n    try {\r\n      console.log('🏆 Challenge Service: Fetching leaderboard...');\r\n      const response = await api.get(`/api/v1/users/leaderboard?limit=${limit}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🏆 Challenge Service: Fetch leaderboard failed:', error);\r\n      \r\n      // Mock leaderboard\r\n      return {\r\n        data: [\r\n          {\r\n            id: 1,\r\n            username: \"RobotMaster\",\r\n            challengesCompleted: 5,\r\n            totalScore: 450,\r\n            rank: \"Robotics Master\"\r\n          },\r\n          {\r\n            id: 2,\r\n            username: \"TechGuru\",\r\n            challengesCompleted: 4,\r\n            totalScore: 380,\r\n            rank: \"Robotics Specialist\"\r\n          },\r\n          {\r\n            id: 3,\r\n            username: \"CodeBot\",\r\n            challengesCompleted: 3,\r\n            totalScore: 290,\r\n            rank: \"Robotics Beginner\"\r\n          }\r\n        ]\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get hardware status\r\n  getHardwareStatus: async () => {\r\n    try {\r\n      console.log('🤖 Challenge Service: Fetching hardware status...');\r\n      const response = await api.get('/api/v1/challenges/system/hardware-status');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Challenge Service: Fetch hardware status failed:', error);\r\n      \r\n      // Mock hardware status\r\n      return {\r\n        data: {\r\n          connected: false,\r\n          robot_status: \"disconnected\",\r\n          joints: [\r\n            { id: 1, position: 0, enabled: false },\r\n            { id: 2, position: 0, enabled: false },\r\n            { id: 3, position: 0, enabled: false }\r\n          ],\r\n          last_update: new Date().toISOString()\r\n        }\r\n      };\r\n    }\r\n  },\r\n\r\n  // Add a method to validate API connection\r\n  validateConnection: async () => {\r\n    try {\r\n      const response = await api.get('/api/v1/health');\r\n      return { connected: true, data: response.data };\r\n    } catch (error) {\r\n      console.warn('⚠️ API Connection failed, using mock data mode');\r\n      return { connected: false, error: error.message };\r\n    }\r\n  }\r\n};\r\n\r\nexport default challengeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/services/challengeService.js\nimport api from './api';\nconst challengeService = {\n  // Get all challenges with user progress\n  getChallenges: async () => {\n    try {\n      console.log('🎯 Challenge Service: Fetching challenges...');\n      const response = await api.get('/api/v1/challenges');\n      console.log('🎯 Challenge Service: Challenges fetched successfully');\n      return response;\n    } catch (error) {\n      console.error('🎯 Challenge Service: Fetch challenges failed:', error);\n      throw error;\n    }\n  },\n  // Get specific challenge details\n  getChallenge: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}`);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} fetched successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Start a challenge\n  startChallenge: async (challengeId, parameters = {}) => {\n    try {\n      console.log(`🎯 Challenge Service: Starting challenge ${challengeId}...`);\n      const response = await api.post(`/api/v1/challenges/${challengeId}/start`, parameters);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} started successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Start challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Submit challenge solution\n  submitChallenge: async (challengeId, submission) => {\n    try {\n      console.log(`🎯 Challenge Service: Submitting challenge ${challengeId}...`);\n      const response = await api.post(`/api/v1/challenges/${challengeId}/submit`, submission);\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} submitted successfully`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Submit challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Get challenge results/history\n  getChallengeResults: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching results for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/results`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch results for challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Get challenge attempt history\n  getChallengeHistory: async challengeId => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching history for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/attempts`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch history for challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Get challenge leaderboard\n  getChallengeLeaderboard: async (challengeId, limit = 10) => {\n    try {\n      console.log(`🎯 Challenge Service: Fetching leaderboard for challenge ${challengeId}...`);\n      const response = await api.get(`/api/v1/challenges/${challengeId}/leaderboard?limit=${limit}`);\n      return response;\n    } catch (error) {\n      console.error(`🎯 Challenge Service: Fetch leaderboard for challenge ${challengeId} failed:`, error);\n      throw error;\n    }\n  },\n  // Get user progress\n  getUserProgress: async () => {\n    try {\n      console.log('👤 Challenge Service: Fetching user progress...');\n      const response = await api.get('/api/v1/users/progress');\n      return response;\n    } catch (error) {\n      console.error('👤 Challenge Service: Fetch user progress failed:', error);\n      throw error;\n    }\n  },\n  // Get global leaderboard\n  getLeaderboard: async (limit = 50) => {\n    try {\n      console.log('🏆 Challenge Service: Fetching leaderboard...');\n      const response = await api.get(`/api/v1/users/leaderboard?limit=${limit}`);\n      return response;\n    } catch (error) {\n      console.error('🏆 Challenge Service: Fetch leaderboard failed:', error);\n      throw error;\n    }\n  },\n  // Get hardware status\n  getHardwareStatus: async () => {\n    try {\n      console.log('🤖 Challenge Service: Fetching hardware status...');\n      const response = await api.get('/api/v1/challenges/system/hardware-status');\n      return response;\n    } catch (error) {\n      console.error('🤖 Challenge Service: Fetch hardware status failed:', error);\n      throw error;\n    }\n  }\n};\nexport default challengeService;","map":{"version":3,"names":["api","challengeService","getChallenges","console","log","response","get","error","getChallenge","challengeId","startChallenge","parameters","post","submitChallenge","submission","getChallengeResults","getChallengeHistory","getChallengeLeaderboard","limit","getUserProgress","getLeaderboard","getHardwareStatus"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/services/challengeService.js"],"sourcesContent":["// src/services/challengeService.js\r\nimport api from './api';\r\n\r\nconst challengeService = {\r\n  // Get all challenges with user progress\r\n  getChallenges: async () => {\r\n    try {\r\n      console.log('🎯 Challenge Service: Fetching challenges...');\r\n      const response = await api.get('/api/v1/challenges');\r\n      console.log('🎯 Challenge Service: Challenges fetched successfully');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🎯 Challenge Service: Fetch challenges failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get specific challenge details\r\n  getChallenge: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}`);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} fetched successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Start a challenge\r\n  startChallenge: async (challengeId, parameters = {}) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Starting challenge ${challengeId}...`);\r\n      const response = await api.post(`/api/v1/challenges/${challengeId}/start`, parameters);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} started successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Start challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Submit challenge solution\r\n  submitChallenge: async (challengeId, submission) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Submitting challenge ${challengeId}...`);\r\n      const response = await api.post(`/api/v1/challenges/${challengeId}/submit`, submission);\r\n      console.log(`🎯 Challenge Service: Challenge ${challengeId} submitted successfully`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Submit challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get challenge results/history\r\n  getChallengeResults: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching results for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/results`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch results for challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get challenge attempt history\r\n  getChallengeHistory: async (challengeId) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching history for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/attempts`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch history for challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get challenge leaderboard\r\n  getChallengeLeaderboard: async (challengeId, limit = 10) => {\r\n    try {\r\n      console.log(`🎯 Challenge Service: Fetching leaderboard for challenge ${challengeId}...`);\r\n      const response = await api.get(`/api/v1/challenges/${challengeId}/leaderboard?limit=${limit}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🎯 Challenge Service: Fetch leaderboard for challenge ${challengeId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get user progress\r\n  getUserProgress: async () => {\r\n    try {\r\n      console.log('👤 Challenge Service: Fetching user progress...');\r\n      const response = await api.get('/api/v1/users/progress');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('👤 Challenge Service: Fetch user progress failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get global leaderboard\r\n  getLeaderboard: async (limit = 50) => {\r\n    try {\r\n      console.log('🏆 Challenge Service: Fetching leaderboard...');\r\n      const response = await api.get(`/api/v1/users/leaderboard?limit=${limit}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🏆 Challenge Service: Fetch leaderboard failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get hardware status\r\n  getHardwareStatus: async () => {\r\n    try {\r\n      console.log('🤖 Challenge Service: Fetching hardware status...');\r\n      const response = await api.get('/api/v1/challenges/system/hardware-status');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Challenge Service: Fetch hardware status failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default challengeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
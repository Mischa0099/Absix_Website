{"ast":null,"code":"import Aes from 'crypto-js/aes.js';\nimport CryptoJsCore from 'crypto-js/core.js';\nimport stringify from 'json-stringify-safe';\nimport { createTransform } from 'redux-persist';\nconst makeError = message => new Error(`redux-persist-transform-encrypt: ${message}`);\nexport const encryptTransform = (config, transformConfig) => {\n  if (typeof config === 'undefined') {\n    throw makeError('No configuration provided.');\n  }\n  const {\n    secretKey\n  } = config;\n  if (!secretKey) {\n    throw makeError('No secret key provided.');\n  }\n  const onError = typeof config.onError === 'function' ? config.onError : console.warn;\n  return createTransform((inboundState, _key) => Aes.encrypt(stringify(inboundState), secretKey).toString(), (outboundState, _key) => {\n    if (typeof outboundState !== 'string') {\n      return onError(makeError('Expected outbound state to be a string.'));\n    }\n    try {\n      const decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);\n      if (!decryptedString) {\n        throw new Error('Decrypted string is empty.');\n      }\n      try {\n        return JSON.parse(decryptedString);\n      } catch {\n        return onError(makeError('Failed to parse state as JSON.'));\n      }\n    } catch {\n      return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));\n    }\n  }, transformConfig);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
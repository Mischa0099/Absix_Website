{"ast":null,"code":"// // src/pages/ChallengesListPage.jsx\n// import React, { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { Container, Grid, Typography, Box, Paper, Card, CardContent, Button, Chip } from '@mui/material';\n// import { useNavigate } from 'react-router-dom';\n// import { PlayArrow, CheckCircle, Lock } from '@mui/icons-material';\n// import { fetchChallenges } from '../store/challengeSlice';\n// import LoadingSpinner from '../components/common/LoadingSpinner';\n\n// const ChallengesListPage = () => {\n//   const navigate = useNavigate();\n//   const dispatch = useDispatch();\n//   const { user } = useSelector(state => state.auth);\n//   const { challenges, userProgress, loading, error } = useSelector(state => state.challenges);\n\n//   useEffect(() => {\n//     dispatch(fetchChallenges());\n//   }, [dispatch]);\n\n//   const handleChallengeClick = (challengeId) => {\n//     navigate(`/challenges/${challengeId}`);\n//   };\n\n//   if (loading) {\n//     return (\n//       <Box className=\"flex-center\" style={{ minHeight: '60vh' }}>\n//         <LoadingSpinner message=\"Loading challenges...\" />\n//       </Box>\n//     );\n//   }\n\n//   return (\n//     <Container maxWidth=\"xl\">\n//       <Box sx={{ py: 4 }}>\n//         {/* Header */}\n//         <Typography variant=\"h3\" component=\"h1\" gutterBottom className=\"text-center\">\n//           ü§ñ Robotics Challenges\n//         </Typography>\n//         <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom className=\"text-center\" sx={{ mb: 4 }}>\n//           Complete hands-on robotics challenges to build your skills\n//         </Typography>\n\n//         {/* Debug Info - Remove this after testing */}\n//         <Paper sx={{ p: 2, mb: 4, bgcolor: 'rgba(255,255,255,0.05)' }}>\n//           <Typography variant=\"subtitle2\" gutterBottom>\n//             üîç Debug Info:\n//           </Typography>\n//           <Typography variant=\"body2\">\n//             ‚Ä¢ Challenges loaded: {challenges?.length || 0}<br/>\n//             ‚Ä¢ Loading: {loading ? 'Yes' : 'No'}<br/>\n//             ‚Ä¢ Error: {error || 'None'}<br/>\n//             ‚Ä¢ User authenticated: {user ? `Yes (${user.username})` : 'No'}\n//           </Typography>\n//         </Paper>\n\n//         {/* Error State */}\n//         {error && (\n//           <Paper sx={{ p: 3, mb: 4, bgcolor: 'error.dark' }}>\n//             <Typography variant=\"h6\" color=\"error.light\">\n//               ‚ùå Error Loading Challenges\n//             </Typography>\n//             <Typography variant=\"body2\" color=\"error.light\">\n//               {error}\n//             </Typography>\n//             <Button \n//               variant=\"outlined\" \n//               onClick={() => dispatch(fetchChallenges())}\n//               sx={{ mt: 2 }}\n//             >\n//               Retry\n//             </Button>\n//           </Paper>\n//         )}\n\n//         {/* Challenges Grid */}\n//         {challenges && challenges.length > 0 ? (\n//           <Grid container spacing={3}>\n//             {challenges.map((challenge, index) => (\n//               <Grid item key={challenge.id || index} xs={12} sm={6} md={4} lg={3}>\n//                 <Card \n//                   sx={{ \n//                     height: '100%',\n//                     display: 'flex',\n//                     flexDirection: 'column',\n//                     cursor: 'pointer',\n//                     transition: 'transform 0.2s, box-shadow 0.2s',\n//                     '&:hover': {\n//                       transform: 'translateY(-4px)',\n//                       boxShadow: 4\n//                     },\n//                     bgcolor: challenge.is_completed ? 'rgba(76, 175, 80, 0.1)' : \n//                            challenge.is_unlocked ? 'background.paper' : 'rgba(158, 158, 158, 0.1)'\n//                   }}\n//                   onClick={() => challenge.is_unlocked && handleChallengeClick(challenge.id)}\n//                 >\n//                   <CardContent sx={{ flexGrow: 1, p: 3 }}>\n//                     {/* Challenge Status Icon */}\n//                     <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n//                       <Typography variant=\"h6\" component=\"h3\">\n//                         Challenge {challenge.id || index + 1}\n//                       </Typography>\n//                       {challenge.is_completed ? (\n//                         <CheckCircle color=\"success\" />\n//                       ) : challenge.is_unlocked ? (\n//                         <PlayArrow color=\"primary\" />\n//                       ) : (\n//                         <Lock color=\"disabled\" />\n//                       )}\n//                     </Box>\n\n//                     {/* Challenge Title */}\n//                     <Typography variant=\"h6\" gutterBottom>\n//                       {challenge.title || `Challenge ${index + 1}`}\n//                     </Typography>\n\n//                     {/* Challenge Description */}\n//                     <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n//                       {challenge.description || 'Complete this robotics challenge to earn points and improve your skills.'}\n//                     </Typography>\n\n//                     {/* Difficulty Badge */}\n//                     <Box sx={{ mb: 2 }}>\n//                       <Chip\n//                         label={challenge.difficulty || 'Beginner'}\n//                         size=\"small\"\n//                         color={\n//                           challenge.difficulty === 'Expert' ? 'error' :\n//                           challenge.difficulty === 'Advanced' ? 'warning' :\n//                           challenge.difficulty === 'Intermediate' ? 'info' : 'success'\n//                         }\n//                       />\n//                     </Box>\n\n//                     {/* Challenge Stats */}\n//                     <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\n//                         {challenge.estimated_time || 30} min\n//                       </Typography>\n\n//                       {challenge.is_completed && challenge.best_score && (\n//                         <Chip\n//                           label={`Score: ${challenge.best_score}`}\n//                           size=\"small\"\n//                           color=\"success\"\n//                           variant=\"outlined\"\n//                         />\n//                       )}\n//                     </Box>\n\n//                     {/* Challenge Status */}\n//                     <Box sx={{ mt: 2 }}>\n//                       <Chip\n//                         label={\n//                           challenge.is_completed ? 'Completed' :\n//                           challenge.is_unlocked ? 'Available' : 'Locked'\n//                         }\n//                         size=\"small\"\n//                         color={\n//                           challenge.is_completed ? 'success' :\n//                           challenge.is_unlocked ? 'primary' : 'default'\n//                         }\n//                         variant={challenge.is_unlocked ? 'filled' : 'outlined'}\n//                       />\n//                     </Box>\n//                   </CardContent>\n//                 </Card>\n//               </Grid>\n//             ))}\n//           </Grid>\n//         ) : (\n//           /* No Challenges State */\n//           <Paper sx={{ p: 6, textAlign: 'center', bgcolor: 'background.paper' }}>\n//             <Typography variant=\"h5\" gutterBottom>\n//               üöß No Challenges Available\n//             </Typography>\n//             <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n//               It looks like no challenges have been loaded yet.\n//             </Typography>\n\n//             {/* Create Mock Challenges Button for Testing */}\n//             <Button \n//               variant=\"outlined\" \n//               onClick={() => {\n//                 // Create mock challenges for testing\n//                 const mockChallenges = [\n//                   {\n//                     id: 1,\n//                     title: 'Basic Joint Movement',\n//                     description: 'Learn to control individual robot joints and understand forward kinematics.',\n//                     difficulty: 'Beginner',\n//                     estimated_time: 30,\n//                     is_unlocked: true,\n//                     is_completed: false\n//                   },\n//                   {\n//                     id: 2,\n//                     title: 'Position Control',\n//                     description: 'Move the robot end-effector to specific positions in 3D space.',\n//                     difficulty: 'Intermediate',\n//                     estimated_time: 45,\n//                     is_unlocked: true,\n//                     is_completed: false\n//                   },\n//                   {\n//                     id: 3,\n//                     title: 'Path Planning',\n//                     description: 'Plan and execute smooth trajectories between multiple points.',\n//                     difficulty: 'Advanced',\n//                     estimated_time: 60,\n//                     is_unlocked: false,\n//                     is_completed: false\n//                   }\n//                 ];\n\n//                 // For now, just show alert. In real app, you'd dispatch to store\n//                 alert(`Mock data: ${mockChallenges.length} challenges would be loaded`);\n//                 console.log('Mock challenges:', mockChallenges);\n//               }}\n//               sx={{ mr: 2 }}\n//             >\n//               üîß Load Test Challenges\n//             </Button>\n\n//             <Button \n//               variant=\"contained\"\n//               onClick={() => dispatch(fetchChallenges())}\n//             >\n//               üîÑ Refresh Challenges\n//             </Button>\n//           </Paper>\n//         )}\n\n//         {/* User Progress Summary */}\n//         {userProgress && (\n//           <Paper sx={{ p: 3, mt: 4, bgcolor: 'rgba(25, 118, 210, 0.1)' }}>\n//             <Typography variant=\"h6\" gutterBottom>\n//               üìä Your Progress\n//             </Typography>\n//             <Grid container spacing={2}>\n//               <Grid item xs={6} sm={3}>\n//                 <Typography variant=\"h4\" color=\"primary\">\n//                   {userProgress.challengesCompleted || 0}\n//                 </Typography>\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\n//                   Completed\n//                 </Typography>\n//               </Grid>\n//               <Grid item xs={6} sm={3}>\n//                 <Typography variant=\"h4\" color=\"primary\">\n//                   {userProgress.totalScore || 0}\n//                 </Typography>\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\n//                   Total Score\n//                 </Typography>\n//               </Grid>\n//               <Grid item xs={6} sm={3}>\n//                 <Typography variant=\"h4\" color=\"primary\">\n//                   {userProgress.streakCount || 0}\n//                 </Typography>\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\n//                   Streak\n//                 </Typography>\n//               </Grid>\n//               <Grid item xs={6} sm={3}>\n//                 <Typography variant=\"h4\" color=\"primary\">\n//                   {userProgress.rank || 'Beginner'}\n//                 </Typography>\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\n//                   Rank\n//                 </Typography>\n//               </Grid>\n//             </Grid>\n//           </Paper>\n//         )}\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default ChallengesListPage;","map":{"version":3,"names":[],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/pages/ChallengesListPage.jsx"],"sourcesContent":["// // src/pages/ChallengesListPage.jsx\r\n// import React, { useEffect } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux';\r\n// import { Container, Grid, Typography, Box, Paper, Card, CardContent, Button, Chip } from '@mui/material';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { PlayArrow, CheckCircle, Lock } from '@mui/icons-material';\r\n// import { fetchChallenges } from '../store/challengeSlice';\r\n// import LoadingSpinner from '../components/common/LoadingSpinner';\r\n\r\n// const ChallengesListPage = () => {\r\n//   const navigate = useNavigate();\r\n//   const dispatch = useDispatch();\r\n//   const { user } = useSelector(state => state.auth);\r\n//   const { challenges, userProgress, loading, error } = useSelector(state => state.challenges);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchChallenges());\r\n//   }, [dispatch]);\r\n\r\n//   const handleChallengeClick = (challengeId) => {\r\n//     navigate(`/challenges/${challengeId}`);\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <Box className=\"flex-center\" style={{ minHeight: '60vh' }}>\r\n//         <LoadingSpinner message=\"Loading challenges...\" />\r\n//       </Box>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Container maxWidth=\"xl\">\r\n//       <Box sx={{ py: 4 }}>\r\n//         {/* Header */}\r\n//         <Typography variant=\"h3\" component=\"h1\" gutterBottom className=\"text-center\">\r\n//           ü§ñ Robotics Challenges\r\n//         </Typography>\r\n//         <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom className=\"text-center\" sx={{ mb: 4 }}>\r\n//           Complete hands-on robotics challenges to build your skills\r\n//         </Typography>\r\n\r\n//         {/* Debug Info - Remove this after testing */}\r\n//         <Paper sx={{ p: 2, mb: 4, bgcolor: 'rgba(255,255,255,0.05)' }}>\r\n//           <Typography variant=\"subtitle2\" gutterBottom>\r\n//             üîç Debug Info:\r\n//           </Typography>\r\n//           <Typography variant=\"body2\">\r\n//             ‚Ä¢ Challenges loaded: {challenges?.length || 0}<br/>\r\n//             ‚Ä¢ Loading: {loading ? 'Yes' : 'No'}<br/>\r\n//             ‚Ä¢ Error: {error || 'None'}<br/>\r\n//             ‚Ä¢ User authenticated: {user ? `Yes (${user.username})` : 'No'}\r\n//           </Typography>\r\n//         </Paper>\r\n\r\n//         {/* Error State */}\r\n//         {error && (\r\n//           <Paper sx={{ p: 3, mb: 4, bgcolor: 'error.dark' }}>\r\n//             <Typography variant=\"h6\" color=\"error.light\">\r\n//               ‚ùå Error Loading Challenges\r\n//             </Typography>\r\n//             <Typography variant=\"body2\" color=\"error.light\">\r\n//               {error}\r\n//             </Typography>\r\n//             <Button \r\n//               variant=\"outlined\" \r\n//               onClick={() => dispatch(fetchChallenges())}\r\n//               sx={{ mt: 2 }}\r\n//             >\r\n//               Retry\r\n//             </Button>\r\n//           </Paper>\r\n//         )}\r\n\r\n//         {/* Challenges Grid */}\r\n//         {challenges && challenges.length > 0 ? (\r\n//           <Grid container spacing={3}>\r\n//             {challenges.map((challenge, index) => (\r\n//               <Grid item key={challenge.id || index} xs={12} sm={6} md={4} lg={3}>\r\n//                 <Card \r\n//                   sx={{ \r\n//                     height: '100%',\r\n//                     display: 'flex',\r\n//                     flexDirection: 'column',\r\n//                     cursor: 'pointer',\r\n//                     transition: 'transform 0.2s, box-shadow 0.2s',\r\n//                     '&:hover': {\r\n//                       transform: 'translateY(-4px)',\r\n//                       boxShadow: 4\r\n//                     },\r\n//                     bgcolor: challenge.is_completed ? 'rgba(76, 175, 80, 0.1)' : \r\n//                            challenge.is_unlocked ? 'background.paper' : 'rgba(158, 158, 158, 0.1)'\r\n//                   }}\r\n//                   onClick={() => challenge.is_unlocked && handleChallengeClick(challenge.id)}\r\n//                 >\r\n//                   <CardContent sx={{ flexGrow: 1, p: 3 }}>\r\n//                     {/* Challenge Status Icon */}\r\n//                     <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n//                       <Typography variant=\"h6\" component=\"h3\">\r\n//                         Challenge {challenge.id || index + 1}\r\n//                       </Typography>\r\n//                       {challenge.is_completed ? (\r\n//                         <CheckCircle color=\"success\" />\r\n//                       ) : challenge.is_unlocked ? (\r\n//                         <PlayArrow color=\"primary\" />\r\n//                       ) : (\r\n//                         <Lock color=\"disabled\" />\r\n//                       )}\r\n//                     </Box>\r\n\r\n//                     {/* Challenge Title */}\r\n//                     <Typography variant=\"h6\" gutterBottom>\r\n//                       {challenge.title || `Challenge ${index + 1}`}\r\n//                     </Typography>\r\n\r\n//                     {/* Challenge Description */}\r\n//                     <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\r\n//                       {challenge.description || 'Complete this robotics challenge to earn points and improve your skills.'}\r\n//                     </Typography>\r\n\r\n//                     {/* Difficulty Badge */}\r\n//                     <Box sx={{ mb: 2 }}>\r\n//                       <Chip\r\n//                         label={challenge.difficulty || 'Beginner'}\r\n//                         size=\"small\"\r\n//                         color={\r\n//                           challenge.difficulty === 'Expert' ? 'error' :\r\n//                           challenge.difficulty === 'Advanced' ? 'warning' :\r\n//                           challenge.difficulty === 'Intermediate' ? 'info' : 'success'\r\n//                         }\r\n//                       />\r\n//                     </Box>\r\n\r\n//                     {/* Challenge Stats */}\r\n//                     <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n//                       <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                         {challenge.estimated_time || 30} min\r\n//                       </Typography>\r\n                      \r\n//                       {challenge.is_completed && challenge.best_score && (\r\n//                         <Chip\r\n//                           label={`Score: ${challenge.best_score}`}\r\n//                           size=\"small\"\r\n//                           color=\"success\"\r\n//                           variant=\"outlined\"\r\n//                         />\r\n//                       )}\r\n//                     </Box>\r\n\r\n//                     {/* Challenge Status */}\r\n//                     <Box sx={{ mt: 2 }}>\r\n//                       <Chip\r\n//                         label={\r\n//                           challenge.is_completed ? 'Completed' :\r\n//                           challenge.is_unlocked ? 'Available' : 'Locked'\r\n//                         }\r\n//                         size=\"small\"\r\n//                         color={\r\n//                           challenge.is_completed ? 'success' :\r\n//                           challenge.is_unlocked ? 'primary' : 'default'\r\n//                         }\r\n//                         variant={challenge.is_unlocked ? 'filled' : 'outlined'}\r\n//                       />\r\n//                     </Box>\r\n//                   </CardContent>\r\n//                 </Card>\r\n//               </Grid>\r\n//             ))}\r\n//           </Grid>\r\n//         ) : (\r\n//           /* No Challenges State */\r\n//           <Paper sx={{ p: 6, textAlign: 'center', bgcolor: 'background.paper' }}>\r\n//             <Typography variant=\"h5\" gutterBottom>\r\n//               üöß No Challenges Available\r\n//             </Typography>\r\n//             <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 3 }}>\r\n//               It looks like no challenges have been loaded yet.\r\n//             </Typography>\r\n            \r\n//             {/* Create Mock Challenges Button for Testing */}\r\n//             <Button \r\n//               variant=\"outlined\" \r\n//               onClick={() => {\r\n//                 // Create mock challenges for testing\r\n//                 const mockChallenges = [\r\n//                   {\r\n//                     id: 1,\r\n//                     title: 'Basic Joint Movement',\r\n//                     description: 'Learn to control individual robot joints and understand forward kinematics.',\r\n//                     difficulty: 'Beginner',\r\n//                     estimated_time: 30,\r\n//                     is_unlocked: true,\r\n//                     is_completed: false\r\n//                   },\r\n//                   {\r\n//                     id: 2,\r\n//                     title: 'Position Control',\r\n//                     description: 'Move the robot end-effector to specific positions in 3D space.',\r\n//                     difficulty: 'Intermediate',\r\n//                     estimated_time: 45,\r\n//                     is_unlocked: true,\r\n//                     is_completed: false\r\n//                   },\r\n//                   {\r\n//                     id: 3,\r\n//                     title: 'Path Planning',\r\n//                     description: 'Plan and execute smooth trajectories between multiple points.',\r\n//                     difficulty: 'Advanced',\r\n//                     estimated_time: 60,\r\n//                     is_unlocked: false,\r\n//                     is_completed: false\r\n//                   }\r\n//                 ];\r\n                \r\n//                 // For now, just show alert. In real app, you'd dispatch to store\r\n//                 alert(`Mock data: ${mockChallenges.length} challenges would be loaded`);\r\n//                 console.log('Mock challenges:', mockChallenges);\r\n//               }}\r\n//               sx={{ mr: 2 }}\r\n//             >\r\n//               üîß Load Test Challenges\r\n//             </Button>\r\n            \r\n//             <Button \r\n//               variant=\"contained\"\r\n//               onClick={() => dispatch(fetchChallenges())}\r\n//             >\r\n//               üîÑ Refresh Challenges\r\n//             </Button>\r\n//           </Paper>\r\n//         )}\r\n\r\n//         {/* User Progress Summary */}\r\n//         {userProgress && (\r\n//           <Paper sx={{ p: 3, mt: 4, bgcolor: 'rgba(25, 118, 210, 0.1)' }}>\r\n//             <Typography variant=\"h6\" gutterBottom>\r\n//               üìä Your Progress\r\n//             </Typography>\r\n//             <Grid container spacing={2}>\r\n//               <Grid item xs={6} sm={3}>\r\n//                 <Typography variant=\"h4\" color=\"primary\">\r\n//                   {userProgress.challengesCompleted || 0}\r\n//                 </Typography>\r\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                   Completed\r\n//                 </Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6} sm={3}>\r\n//                 <Typography variant=\"h4\" color=\"primary\">\r\n//                   {userProgress.totalScore || 0}\r\n//                 </Typography>\r\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                   Total Score\r\n//                 </Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6} sm={3}>\r\n//                 <Typography variant=\"h4\" color=\"primary\">\r\n//                   {userProgress.streakCount || 0}\r\n//                 </Typography>\r\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                   Streak\r\n//                 </Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6} sm={3}>\r\n//                 <Typography variant=\"h4\" color=\"primary\">\r\n//                   {userProgress.rank || 'Beginner'}\r\n//                 </Typography>\r\n//                 <Typography variant=\"body2\" color=\"text.secondary\">\r\n//                   Rank\r\n//                 </Typography>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Paper>\r\n//         )}\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default ChallengesListPage;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
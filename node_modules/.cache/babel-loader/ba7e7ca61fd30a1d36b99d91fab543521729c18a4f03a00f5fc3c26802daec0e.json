{"ast":null,"code":"// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { robotService } from '../services/robotService';\nimport { websocketService } from '../services/websocketService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk('robot/connect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const result = await robotService.connect();\n    if (result.success) {\n      // Start WebSocket connection\n      await websocketService.connect({\n        onTelemetry: data => {\n          // This will be handled by the WebSocket service\n        }\n      });\n      return result;\n    } else {\n      throw new Error(result.error);\n    }\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const disconnectRobot = createAsyncThunk('robot/disconnect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    websocketService.disconnect();\n    const result = await robotService.disconnect();\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const executeCode = createAsyncThunk('robot/executeCode', async ({\n  code,\n  options\n}, {\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    dispatch(setExecutionState({\n      isExecuting: true\n    }));\n    const result = await robotService.executeCode(code, options);\n    dispatch(setExecutionState({\n      isExecuting: false,\n      lastExecution: {\n        success: result.success,\n        timestamp: new Date().toISOString(),\n        result\n      }\n    }));\n    return result;\n  } catch (error) {\n    dispatch(setExecutionState({\n      isExecuting: false\n    }));\n    return rejectWithValue(error.message);\n  }\n});\nexport const moveJoint = createAsyncThunk('robot/moveJoint', async ({\n  jointId,\n  angle,\n  options\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const result = await robotService.moveJoint(jointId, angle, options);\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const moveToPosition = createAsyncThunk('robot/moveToPosition', async ({\n  targetAngles,\n  options\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const result = await robotService.moveToPosition(targetAngles, options);\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const emergencyStop = createAsyncThunk('robot/emergencyStop', async (_, {\n  rejectWithValue,\n  dispatch\n}) => {\n  try {\n    const result = await robotService.emergencyStop();\n\n    // Update safety state\n    dispatch(setSafetyState({\n      emergencyStopActive: true,\n      lastEmergencyStop: new Date().toISOString()\n    }));\n\n    // Stop any ongoing execution\n    dispatch(setExecutionState({\n      isExecuting: false\n    }));\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const getRobotStatus = createAsyncThunk('robot/getStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const status = await robotService.getStatus();\n    return status;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const calibrateRobot = createAsyncThunk('robot/calibrate', async (options, {\n  rejectWithValue\n}) => {\n  try {\n    const result = await robotService.calibrate(options);\n    return result;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Initial state\nconst initialState = {\n  // Connection state\n  isConnected: false,\n  connectionStatus: 'disconnected',\n  // 'disconnected' | 'connecting' | 'connected' | 'error'\n  lastConnectionAttempt: null,\n  connectionError: null,\n  // Real-time telemetry data\n  telemetry: {\n    joint_angles: [0, 0, 0],\n    joint_velocities: [0, 0, 0],\n    joint_currents: [0, 0, 0],\n    joint_temperatures: [25, 25, 25],\n    joint_torques: [0, 0, 0],\n    end_effector_position: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    end_effector_velocity: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    system_status: 'idle',\n    // 'idle' | 'moving' | 'executing' | 'error' | 'emergency_stop'\n    timestamp: null,\n    updateRate: 0 // Hz\n  },\n  // Current robot position (for UI display)\n  currentPosition: [0, 0, 0],\n  targetPosition: null,\n  // Execution state\n  executionState: {\n    isExecuting: false,\n    executionId: null,\n    executionProgress: null,\n    executionStartTime: null,\n    executionEndTime: null,\n    lastExecution: null,\n    executionQueue: []\n  },\n  // Robot configuration\n  robotConfig: {\n    dof: 3,\n    linkLengths: [140, 120, 100],\n    // mm\n    linkWidths: [24, 20, 16],\n    // mm for visualization\n    jointLimits: [{\n      min: -150,\n      max: 150,\n      name: 'Base'\n    }, {\n      min: -120,\n      max: 120,\n      name: 'Shoulder'\n    }, {\n      min: -90,\n      max: 90,\n      name: 'Elbow'\n    }],\n    maxVelocity: [120, 120, 120],\n    // deg/s\n    maxAcceleration: [240, 240, 240],\n    // deg/s²\n    maxCurrent: [2.0, 2.0, 2.0],\n    // Amperes\n    maxTemperature: 65,\n    // °C\n    baseHeight: 50,\n    endEffectorLength: 20,\n    workspaceRadius: {\n      min: 0,\n      max: 360\n    }\n  },\n  // Safety monitoring\n  safety: {\n    emergencyStopActive: false,\n    safetyLimitsEnabled: true,\n    temperatureAlarms: [],\n    currentAlarms: [],\n    positionAlarms: [],\n    lastEmergencyStop: null,\n    safetyViolations: []\n  },\n  // Calibration state\n  calibration: {\n    isCalibrated: false,\n    calibrationDate: null,\n    calibrationData: null,\n    needsCalibration: false,\n    calibrationInProgress: false\n  },\n  // Performance metrics\n  performance: {\n    totalCommands: 0,\n    successfulCommands: 0,\n    averageExecutionTime: 0,\n    totalExecutions: 0,\n    successfulExecutions: 0,\n    averagePositionError: 0,\n    uptime: 0,\n    lastMaintenanceDate: null,\n    telemetryStats: {\n      packetsReceived: 0,\n      packetsLost: 0,\n      averageLatency: 0,\n      lastUpdate: null\n    }\n  },\n  // Error handling\n  errors: [],\n  warnings: [],\n  lastError: null,\n  // Loading states\n  loading: {\n    connecting: false,\n    executing: false,\n    calibrating: false,\n    moving: false\n  }\n};\n\n// Robot slice\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    // Connection management\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.isConnected = action.payload === 'connected';\n      if (action.payload === 'connected') {\n        state.connectionError = null;\n        state.lastConnectionAttempt = new Date().toISOString();\n      }\n    },\n    setConnectionError: (state, action) => {\n      state.connectionError = action.payload;\n      state.connectionStatus = 'error';\n      state.isConnected = false;\n    },\n    // Real-time telemetry updates\n    setRobotData: (state, action) => {\n      const newTelemetry = action.payload;\n\n      // Update telemetry\n      state.telemetry = {\n        ...state.telemetry,\n        ...newTelemetry,\n        timestamp: newTelemetry.timestamp || new Date().toISOString()\n      };\n\n      // Update current position for UI\n      if (newTelemetry.joint_angles) {\n        state.currentPosition = newTelemetry.joint_angles;\n      }\n\n      // Update performance stats\n      if (state.performance.telemetryStats.lastUpdate) {\n        const timeDiff = new Date(state.telemetry.timestamp) - new Date(state.performance.telemetryStats.lastUpdate);\n        if (timeDiff > 0) {\n          state.telemetry.updateRate = 1000 / timeDiff;\n        }\n      }\n      state.performance.telemetryStats.packetsReceived++;\n      state.performance.telemetryStats.lastUpdate = state.telemetry.timestamp;\n    },\n    // Execution state management\n    setExecutionState: (state, action) => {\n      state.executionState = {\n        ...state.executionState,\n        ...action.payload\n      };\n\n      // Update loading state\n      state.loading.executing = action.payload.isExecuting || false;\n\n      // Update performance metrics\n      if (action.payload.lastExecution) {\n        state.performance.totalExecutions++;\n        if (action.payload.lastExecution.success) {\n          state.performance.successfulExecutions++;\n        }\n      }\n    },\n    setExecutionProgress: (state, action) => {\n      state.executionState.executionProgress = action.payload;\n    },\n    // Robot configuration\n    setRobotConfig: (state, action) => {\n      state.robotConfig = {\n        ...state.robotConfig,\n        ...action.payload\n      };\n    },\n    // Position management\n    setTargetPosition: (state, action) => {\n      state.targetPosition = action.payload;\n    },\n    updateCurrentPosition: (state, action) => {\n      state.currentPosition = action.payload;\n    },\n    // Safety management\n    setSafetyState: (state, action) => {\n      state.safety = {\n        ...state.safety,\n        ...action.payload\n      };\n    },\n    addSafetyViolation: (state, action) => {\n      const violation = {\n        ...action.payload,\n        timestamp: new Date().toISOString(),\n        id: Date.now()\n      };\n      state.safety.safetyViolations.push(violation);\n\n      // Keep only last 100 violations\n      if (state.safety.safetyViolations.length > 100) {\n        state.safety.safetyViolations = state.safety.safetyViolations.slice(-100);\n      }\n\n      // Add to warnings\n      state.warnings.push({\n        type: 'safety_violation',\n        message: `Safety violation: ${violation.message || 'Unknown violation'}`,\n        timestamp: violation.timestamp,\n        severity: violation.severity || 'warning'\n      });\n    },\n    clearSafetyViolations: state => {\n      state.safety.safetyViolations = [];\n    },\n    // Calibration management\n    setCalibrationState: (state, action) => {\n      state.calibration = {\n        ...state.calibration,\n        ...action.payload\n      };\n      state.loading.calibrating = action.payload.calibrationInProgress || false;\n    },\n    // Error management\n    addError: (state, action) => {\n      const error = {\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: action.payload.message || action.payload,\n        type: action.payload.type || 'error',\n        context: action.payload.context || null\n      };\n      state.errors.push(error);\n      state.lastError = error;\n\n      // Keep only last 50 errors\n      if (state.errors.length > 50) {\n        state.errors = state.errors.slice(-50);\n      }\n    },\n    addWarning: (state, action) => {\n      const warning = {\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: action.payload.message || action.payload,\n        type: action.payload.type || 'warning',\n        context: action.payload.context || null\n      };\n      state.warnings.push(warning);\n\n      // Keep only last 50 warnings\n      if (state.warnings.length > 50) {\n        state.warnings = state.warnings.slice(-50);\n      }\n    },\n    clearErrors: state => {\n      state.errors = [];\n      state.lastError = null;\n    },\n    clearWarnings: state => {\n      state.warnings = [];\n    },\n    removeError: (state, action) => {\n      state.errors = state.errors.filter(error => error.id !== action.payload);\n    },\n    removeWarning: (state, action) => {\n      state.warnings = state.warnings.filter(warning => warning.id !== action.payload);\n    },\n    // Performance metrics\n    updatePerformanceMetrics: (state, action) => {\n      state.performance = {\n        ...state.performance,\n        ...action.payload\n      };\n    },\n    incrementCommandCount: (state, action) => {\n      var _action$payload;\n      state.performance.totalCommands++;\n      if ((_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.success) {\n        state.performance.successfulCommands++;\n      }\n    },\n    updateTelemetryStats: (state, action) => {\n      state.performance.telemetryStats = {\n        ...state.performance.telemetryStats,\n        ...action.payload\n      };\n    },\n    // Loading states\n    setLoading: (state, action) => {\n      state.loading = {\n        ...state.loading,\n        ...action.payload\n      };\n    },\n    // Reset functions\n    resetRobotState: state => {\n      // Reset to initial state but keep configuration\n      return {\n        ...initialState,\n        robotConfig: state.robotConfig\n      };\n    },\n    resetTelemetry: state => {\n      state.telemetry = initialState.telemetry;\n    },\n    resetPerformanceMetrics: state => {\n      state.performance = initialState.performance;\n    }\n  },\n  // Extra reducers for async thunks\n  extraReducers: builder => {\n    // Connect robot\n    builder.addCase(connectRobot.pending, state => {\n      state.loading.connecting = true;\n      state.connectionStatus = 'connecting';\n      state.connectionError = null;\n    }).addCase(connectRobot.fulfilled, (state, action) => {\n      state.loading.connecting = false;\n      state.connectionStatus = 'connected';\n      state.isConnected = true;\n      state.connectionError = null;\n      state.lastConnectionAttempt = new Date().toISOString();\n\n      // Update robot config if provided\n      if (action.payload.robotConfig) {\n        state.robotConfig = {\n          ...state.robotConfig,\n          ...action.payload.robotConfig\n        };\n      }\n    }).addCase(connectRobot.rejected, (state, action) => {\n      state.loading.connecting = false;\n      state.connectionStatus = 'error';\n      state.isConnected = false;\n      state.connectionError = action.payload;\n      state.errors.push({\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: `Connection failed: ${action.payload}`,\n        type: 'connection_error'\n      });\n    });\n\n    // Disconnect robot\n    builder.addCase(disconnectRobot.fulfilled, state => {\n      state.connectionStatus = 'disconnected';\n      state.isConnected = false;\n      state.connectionError = null;\n\n      // Reset execution state\n      state.executionState.isExecuting = false;\n      state.loading.executing = false;\n\n      // Reset safety state\n      state.safety.emergencyStopActive = false;\n    });\n\n    // Execute code\n    builder.addCase(executeCode.pending, state => {\n      state.loading.executing = true;\n      state.executionState.isExecuting = true;\n      state.executionState.executionStartTime = new Date().toISOString();\n    }).addCase(executeCode.fulfilled, (state, action) => {\n      state.loading.executing = false;\n      state.executionState.isExecuting = false;\n      state.executionState.executionEndTime = new Date().toISOString();\n\n      // Update position if provided\n      if (action.payload.finalPosition) {\n        state.currentPosition = action.payload.finalPosition;\n      }\n\n      // Update performance metrics\n      state.performance.totalExecutions++;\n      if (action.payload.success) {\n        state.performance.successfulExecutions++;\n      }\n    }).addCase(executeCode.rejected, (state, action) => {\n      state.loading.executing = false;\n      state.executionState.isExecuting = false;\n      state.executionState.executionEndTime = new Date().toISOString();\n      state.errors.push({\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: `Code execution failed: ${action.payload}`,\n        type: 'execution_error'\n      });\n    });\n\n    // Move joint\n    builder.addCase(moveJoint.pending, state => {\n      state.loading.moving = true;\n    }).addCase(moveJoint.fulfilled, (state, action) => {\n      state.loading.moving = false;\n      state.performance.totalCommands++;\n      state.performance.successfulCommands++;\n    }).addCase(moveJoint.rejected, (state, action) => {\n      state.loading.moving = false;\n      state.performance.totalCommands++;\n      state.errors.push({\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: `Joint movement failed: ${action.payload}`,\n        type: 'movement_error'\n      });\n    });\n\n    // Emergency stop\n    builder.addCase(emergencyStop.fulfilled, state => {\n      state.loading.executing = false;\n      state.loading.moving = false;\n      state.executionState.isExecuting = false;\n      state.safety.emergencyStopActive = true;\n      state.safety.lastEmergencyStop = new Date().toISOString();\n    });\n\n    // Get robot status\n    builder.addCase(getRobotStatus.fulfilled, (state, action) => {\n      const status = action.payload;\n\n      // Update connection status\n      state.isConnected = status.connected || false;\n      state.connectionStatus = status.connected ? 'connected' : 'disconnected';\n\n      // Update calibration status\n      if (status.calibration) {\n        state.calibration = {\n          ...state.calibration,\n          ...status.calibration\n        };\n      }\n\n      // Update safety status\n      if (status.safety) {\n        state.safety = {\n          ...state.safety,\n          ...status.safety\n        };\n      }\n    });\n\n    // Calibrate robot\n    builder.addCase(calibrateRobot.pending, state => {\n      state.loading.calibrating = true;\n      state.calibration.calibrationInProgress = true;\n    }).addCase(calibrateRobot.fulfilled, (state, action) => {\n      state.loading.calibrating = false;\n      state.calibration.calibrationInProgress = false;\n      state.calibration.isCalibrated = true;\n      state.calibration.calibrationDate = new Date().toISOString();\n      state.calibration.calibrationData = action.payload;\n    }).addCase(calibrateRobot.rejected, (state, action) => {\n      state.loading.calibrating = false;\n      state.calibration.calibrationInProgress = false;\n      state.errors.push({\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: `Calibration failed: ${action.payload}`,\n        type: 'calibration_error'\n      });\n    });\n  }\n});\n\n// Export actions\nexport const {\n  setConnectionStatus,\n  setConnectionError,\n  setRobotData,\n  setExecutionState,\n  setExecutionProgress,\n  setRobotConfig,\n  setTargetPosition,\n  updateCurrentPosition,\n  setSafetyState,\n  addSafetyViolation,\n  clearSafetyViolations,\n  setCalibrationState,\n  addError,\n  addWarning,\n  clearErrors,\n  clearWarnings,\n  removeError,\n  removeWarning,\n  updatePerformanceMetrics,\n  incrementCommandCount,\n  updateTelemetryStats,\n  setLoading,\n  resetRobotState,\n  resetTelemetry,\n  resetPerformanceMetrics\n} = robotSlice.actions;\n\n// Selectors\nexport const selectRobotState = state => state.robot;\nexport const selectIsConnected = state => state.robot.isConnected;\nexport const selectConnectionStatus = state => state.robot.connectionStatus;\nexport const selectTelemetry = state => state.robot.telemetry;\nexport const selectCurrentPosition = state => state.robot.currentPosition;\nexport const selectTargetPosition = state => state.robot.targetPosition;\nexport const selectExecutionState = state => state.robot.executionState;\nexport const selectIsExecuting = state => state.robot.executionState.isExecuting;\nexport const selectRobotConfig = state => state.robot.robotConfig;\nexport const selectSafetyState = state => state.robot.safety;\nexport const selectCalibrationState = state => state.robot.calibration;\nexport const selectRobotErrors = state => state.robot.errors;\nexport const selectRobotWarnings = state => state.robot.warnings;\nexport const selectPerformanceMetrics = state => state.robot.performance;\nexport const selectLoadingState = state => state.robot.loading;\n\n// Computed selectors\nexport const selectRobotHealth = state => {\n  const {\n    telemetry,\n    safety,\n    calibration,\n    isConnected\n  } = state.robot;\n  if (!isConnected) return 'disconnected';\n  if (safety.emergencyStopActive) return 'emergency';\n  if (safety.temperatureAlarms.length > 0) return 'warning';\n  if (!calibration.isCalibrated) return 'uncalibrated';\n  const maxTemp = Math.max(...telemetry.joint_temperatures);\n  if (maxTemp > 60) return 'warning';\n  if (maxTemp > 70) return 'critical';\n  return 'healthy';\n};\nexport const selectExecutionProgress = state => {\n  const {\n    executionState\n  } = state.robot;\n  return {\n    isExecuting: executionState.isExecuting,\n    progress: executionState.executionProgress,\n    startTime: executionState.executionStartTime,\n    estimatedCompletion: executionState.executionStartTime ? new Date(Date.parse(executionState.executionStartTime) + 30000) : null\n  };\n};\nexport default robotSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","robotService","websocketService","connectRobot","_","rejectWithValue","result","connect","success","onTelemetry","data","Error","error","message","disconnectRobot","disconnect","executeCode","code","options","dispatch","setExecutionState","isExecuting","lastExecution","timestamp","Date","toISOString","moveJoint","jointId","angle","moveToPosition","targetAngles","emergencyStop","setSafetyState","emergencyStopActive","lastEmergencyStop","getRobotStatus","status","getStatus","calibrateRobot","calibrate","initialState","isConnected","connectionStatus","lastConnectionAttempt","connectionError","telemetry","joint_angles","joint_velocities","joint_currents","joint_temperatures","joint_torques","end_effector_position","x","y","z","end_effector_velocity","system_status","updateRate","currentPosition","targetPosition","executionState","executionId","executionProgress","executionStartTime","executionEndTime","executionQueue","robotConfig","dof","linkLengths","linkWidths","jointLimits","min","max","name","maxVelocity","maxAcceleration","maxCurrent","maxTemperature","baseHeight","endEffectorLength","workspaceRadius","safety","safetyLimitsEnabled","temperatureAlarms","currentAlarms","positionAlarms","safetyViolations","calibration","isCalibrated","calibrationDate","calibrationData","needsCalibration","calibrationInProgress","performance","totalCommands","successfulCommands","averageExecutionTime","totalExecutions","successfulExecutions","averagePositionError","uptime","lastMaintenanceDate","telemetryStats","packetsReceived","packetsLost","averageLatency","lastUpdate","errors","warnings","lastError","loading","connecting","executing","calibrating","moving","robotSlice","reducers","setConnectionStatus","state","action","payload","setConnectionError","setRobotData","newTelemetry","timeDiff","setExecutionProgress","setRobotConfig","setTargetPosition","updateCurrentPosition","addSafetyViolation","violation","id","now","push","length","slice","type","severity","clearSafetyViolations","setCalibrationState","addError","context","addWarning","warning","clearErrors","clearWarnings","removeError","filter","removeWarning","updatePerformanceMetrics","incrementCommandCount","_action$payload","updateTelemetryStats","setLoading","resetRobotState","resetTelemetry","resetPerformanceMetrics","extraReducers","builder","addCase","pending","fulfilled","rejected","finalPosition","connected","actions","selectRobotState","robot","selectIsConnected","selectConnectionStatus","selectTelemetry","selectCurrentPosition","selectTargetPosition","selectExecutionState","selectIsExecuting","selectRobotConfig","selectSafetyState","selectCalibrationState","selectRobotErrors","selectRobotWarnings","selectPerformanceMetrics","selectLoadingState","selectRobotHealth","maxTemp","Math","selectExecutionProgress","progress","startTime","estimatedCompletion","parse","reducer"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/robotSlice.js"],"sourcesContent":["// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { robotService } from '../services/robotService';\nimport { websocketService } from '../services/websocketService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk(\n  'robot/connect',\n  async (_, { rejectWithValue }) => {\n    try {\n      const result = await robotService.connect();\n      if (result.success) {\n        // Start WebSocket connection\n        await websocketService.connect({\n          onTelemetry: (data) => {\n            // This will be handled by the WebSocket service\n          }\n        });\n        return result;\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const disconnectRobot = createAsyncThunk(\n  'robot/disconnect',\n  async (_, { rejectWithValue }) => {\n    try {\n      websocketService.disconnect();\n      const result = await robotService.disconnect();\n      return result;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const executeCode = createAsyncThunk(\n  'robot/executeCode',\n  async ({ code, options }, { rejectWithValue, dispatch }) => {\n    try {\n      dispatch(setExecutionState({ isExecuting: true }));\n      \n      const result = await robotService.executeCode(code, options);\n      \n      dispatch(setExecutionState({ \n        isExecuting: false,\n        lastExecution: {\n          success: result.success,\n          timestamp: new Date().toISOString(),\n          result\n        }\n      }));\n      \n      return result;\n    } catch (error) {\n      dispatch(setExecutionState({ isExecuting: false }));\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const moveJoint = createAsyncThunk(\n  'robot/moveJoint',\n  async ({ jointId, angle, options }, { rejectWithValue }) => {\n    try {\n      const result = await robotService.moveJoint(jointId, angle, options);\n      return result;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const moveToPosition = createAsyncThunk(\n  'robot/moveToPosition',\n  async ({ targetAngles, options }, { rejectWithValue }) => {\n    try {\n      const result = await robotService.moveToPosition(targetAngles, options);\n      return result;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const emergencyStop = createAsyncThunk(\n  'robot/emergencyStop',\n  async (_, { rejectWithValue, dispatch }) => {\n    try {\n      const result = await robotService.emergencyStop();\n      \n      // Update safety state\n      dispatch(setSafetyState({\n        emergencyStopActive: true,\n        lastEmergencyStop: new Date().toISOString()\n      }));\n      \n      // Stop any ongoing execution\n      dispatch(setExecutionState({ isExecuting: false }));\n      \n      return result;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const getRobotStatus = createAsyncThunk(\n  'robot/getStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const status = await robotService.getStatus();\n      return status;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const calibrateRobot = createAsyncThunk(\n  'robot/calibrate',\n  async (options, { rejectWithValue }) => {\n    try {\n      const result = await robotService.calibrate(options);\n      return result;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// Initial state\nconst initialState = {\n  // Connection state\n  isConnected: false,\n  connectionStatus: 'disconnected', // 'disconnected' | 'connecting' | 'connected' | 'error'\n  lastConnectionAttempt: null,\n  connectionError: null,\n  \n  // Real-time telemetry data\n  telemetry: {\n    joint_angles: [0, 0, 0],\n    joint_velocities: [0, 0, 0],\n    joint_currents: [0, 0, 0],\n    joint_temperatures: [25, 25, 25],\n    joint_torques: [0, 0, 0],\n    end_effector_position: { x: 0, y: 0, z: 0 },\n    end_effector_velocity: { x: 0, y: 0, z: 0 },\n    system_status: 'idle', // 'idle' | 'moving' | 'executing' | 'error' | 'emergency_stop'\n    timestamp: null,\n    updateRate: 0 // Hz\n  },\n  \n  // Current robot position (for UI display)\n  currentPosition: [0, 0, 0],\n  targetPosition: null,\n  \n  // Execution state\n  executionState: {\n    isExecuting: false,\n    executionId: null,\n    executionProgress: null,\n    executionStartTime: null,\n    executionEndTime: null,\n    lastExecution: null,\n    executionQueue: []\n  },\n  \n  // Robot configuration\n  robotConfig: {\n    dof: 3,\n    linkLengths: [140, 120, 100], // mm\n    linkWidths: [24, 20, 16], // mm for visualization\n    jointLimits: [\n      { min: -150, max: 150, name: 'Base' },\n      { min: -120, max: 120, name: 'Shoulder' },\n      { min: -90, max: 90, name: 'Elbow' }\n    ],\n    maxVelocity: [120, 120, 120], // deg/s\n    maxAcceleration: [240, 240, 240], // deg/s²\n    maxCurrent: [2.0, 2.0, 2.0], // Amperes\n    maxTemperature: 65, // °C\n    baseHeight: 50,\n    endEffectorLength: 20,\n    workspaceRadius: { min: 0, max: 360 }\n  },\n  \n  // Safety monitoring\n  safety: {\n    emergencyStopActive: false,\n    safetyLimitsEnabled: true,\n    temperatureAlarms: [],\n    currentAlarms: [],\n    positionAlarms: [],\n    lastEmergencyStop: null,\n    safetyViolations: []\n  },\n  \n  // Calibration state\n  calibration: {\n    isCalibrated: false,\n    calibrationDate: null,\n    calibrationData: null,\n    needsCalibration: false,\n    calibrationInProgress: false\n  },\n  \n  // Performance metrics\n  performance: {\n    totalCommands: 0,\n    successfulCommands: 0,\n    averageExecutionTime: 0,\n    totalExecutions: 0,\n    successfulExecutions: 0,\n    averagePositionError: 0,\n    uptime: 0,\n    lastMaintenanceDate: null,\n    telemetryStats: {\n      packetsReceived: 0,\n      packetsLost: 0,\n      averageLatency: 0,\n      lastUpdate: null\n    }\n  },\n  \n  // Error handling\n  errors: [],\n  warnings: [],\n  lastError: null,\n  \n  // Loading states\n  loading: {\n    connecting: false,\n    executing: false,\n    calibrating: false,\n    moving: false\n  }\n};\n\n// Robot slice\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    // Connection management\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.isConnected = action.payload === 'connected';\n      \n      if (action.payload === 'connected') {\n        state.connectionError = null;\n        state.lastConnectionAttempt = new Date().toISOString();\n      }\n    },\n    \n    setConnectionError: (state, action) => {\n      state.connectionError = action.payload;\n      state.connectionStatus = 'error';\n      state.isConnected = false;\n    },\n    \n    // Real-time telemetry updates\n    setRobotData: (state, action) => {\n      const newTelemetry = action.payload;\n      \n      // Update telemetry\n      state.telemetry = {\n        ...state.telemetry,\n        ...newTelemetry,\n        timestamp: newTelemetry.timestamp || new Date().toISOString()\n      };\n      \n      // Update current position for UI\n      if (newTelemetry.joint_angles) {\n        state.currentPosition = newTelemetry.joint_angles;\n      }\n      \n      // Update performance stats\n      if (state.performance.telemetryStats.lastUpdate) {\n        const timeDiff = new Date(state.telemetry.timestamp) - \n                        new Date(state.performance.telemetryStats.lastUpdate);\n        if (timeDiff > 0) {\n          state.telemetry.updateRate = 1000 / timeDiff;\n        }\n      }\n      \n      state.performance.telemetryStats.packetsReceived++;\n      state.performance.telemetryStats.lastUpdate = state.telemetry.timestamp;\n    },\n    \n    // Execution state management\n    setExecutionState: (state, action) => {\n      state.executionState = {\n        ...state.executionState,\n        ...action.payload\n      };\n      \n      // Update loading state\n      state.loading.executing = action.payload.isExecuting || false;\n      \n      // Update performance metrics\n      if (action.payload.lastExecution) {\n        state.performance.totalExecutions++;\n        if (action.payload.lastExecution.success) {\n          state.performance.successfulExecutions++;\n        }\n      }\n    },\n    \n    setExecutionProgress: (state, action) => {\n      state.executionState.executionProgress = action.payload;\n    },\n    \n    // Robot configuration\n    setRobotConfig: (state, action) => {\n      state.robotConfig = {\n        ...state.robotConfig,\n        ...action.payload\n      };\n    },\n    \n    // Position management\n    setTargetPosition: (state, action) => {\n      state.targetPosition = action.payload;\n    },\n    \n    updateCurrentPosition: (state, action) => {\n      state.currentPosition = action.payload;\n    },\n    \n    // Safety management\n    setSafetyState: (state, action) => {\n      state.safety = {\n        ...state.safety,\n        ...action.payload\n      };\n    },\n    \n    addSafetyViolation: (state, action) => {\n      const violation = {\n        ...action.payload,\n        timestamp: new Date().toISOString(),\n        id: Date.now()\n      };\n      \n      state.safety.safetyViolations.push(violation);\n      \n      // Keep only last 100 violations\n      if (state.safety.safetyViolations.length > 100) {\n        state.safety.safetyViolations = state.safety.safetyViolations.slice(-100);\n      }\n      \n      // Add to warnings\n      state.warnings.push({\n        type: 'safety_violation',\n        message: `Safety violation: ${violation.message || 'Unknown violation'}`,\n        timestamp: violation.timestamp,\n        severity: violation.severity || 'warning'\n      });\n    },\n    \n    clearSafetyViolations: (state) => {\n      state.safety.safetyViolations = [];\n    },\n    \n    // Calibration management\n    setCalibrationState: (state, action) => {\n      state.calibration = {\n        ...state.calibration,\n        ...action.payload\n      };\n      \n      state.loading.calibrating = action.payload.calibrationInProgress || false;\n    },\n    \n    // Error management\n    addError: (state, action) => {\n      const error = {\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: action.payload.message || action.payload,\n        type: action.payload.type || 'error',\n        context: action.payload.context || null\n      };\n      \n      state.errors.push(error);\n      state.lastError = error;\n      \n      // Keep only last 50 errors\n      if (state.errors.length > 50) {\n        state.errors = state.errors.slice(-50);\n      }\n    },\n    \n    addWarning: (state, action) => {\n      const warning = {\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        message: action.payload.message || action.payload,\n        type: action.payload.type || 'warning',\n        context: action.payload.context || null\n      };\n      \n      state.warnings.push(warning);\n      \n      // Keep only last 50 warnings\n      if (state.warnings.length > 50) {\n        state.warnings = state.warnings.slice(-50);\n      }\n    },\n    \n    clearErrors: (state) => {\n      state.errors = [];\n      state.lastError = null;\n    },\n    \n    clearWarnings: (state) => {\n      state.warnings = [];\n    },\n    \n    removeError: (state, action) => {\n      state.errors = state.errors.filter(error => error.id !== action.payload);\n    },\n    \n    removeWarning: (state, action) => {\n      state.warnings = state.warnings.filter(warning => warning.id !== action.payload);\n    },\n    \n    // Performance metrics\n    updatePerformanceMetrics: (state, action) => {\n      state.performance = {\n        ...state.performance,\n        ...action.payload\n      };\n    },\n    \n    incrementCommandCount: (state, action) => {\n      state.performance.totalCommands++;\n      if (action.payload?.success) {\n        state.performance.successfulCommands++;\n      }\n    },\n    \n    updateTelemetryStats: (state, action) => {\n      state.performance.telemetryStats = {\n        ...state.performance.telemetryStats,\n        ...action.payload\n      };\n    },\n    \n    // Loading states\n    setLoading: (state, action) => {\n      state.loading = {\n        ...state.loading,\n        ...action.payload\n      };\n    },\n    \n    // Reset functions\n    resetRobotState: (state) => {\n      // Reset to initial state but keep configuration\n      return {\n        ...initialState,\n        robotConfig: state.robotConfig\n      };\n    },\n    \n    resetTelemetry: (state) => {\n      state.telemetry = initialState.telemetry;\n    },\n    \n    resetPerformanceMetrics: (state) => {\n      state.performance = initialState.performance;\n    }\n  },\n  \n  // Extra reducers for async thunks\n  extraReducers: (builder) => {\n    // Connect robot\n    builder\n      .addCase(connectRobot.pending, (state) => {\n        state.loading.connecting = true;\n        state.connectionStatus = 'connecting';\n        state.connectionError = null;\n      })\n      .addCase(connectRobot.fulfilled, (state, action) => {\n        state.loading.connecting = false;\n        state.connectionStatus = 'connected';\n        state.isConnected = true;\n        state.connectionError = null;\n        state.lastConnectionAttempt = new Date().toISOString();\n        \n        // Update robot config if provided\n        if (action.payload.robotConfig) {\n          state.robotConfig = {\n            ...state.robotConfig,\n            ...action.payload.robotConfig\n          };\n        }\n      })\n      .addCase(connectRobot.rejected, (state, action) => {\n        state.loading.connecting = false;\n        state.connectionStatus = 'error';\n        state.isConnected = false;\n        state.connectionError = action.payload;\n        \n        state.errors.push({\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          message: `Connection failed: ${action.payload}`,\n          type: 'connection_error'\n        });\n      });\n    \n    // Disconnect robot\n    builder\n      .addCase(disconnectRobot.fulfilled, (state) => {\n        state.connectionStatus = 'disconnected';\n        state.isConnected = false;\n        state.connectionError = null;\n        \n        // Reset execution state\n        state.executionState.isExecuting = false;\n        state.loading.executing = false;\n        \n        // Reset safety state\n        state.safety.emergencyStopActive = false;\n      });\n    \n    // Execute code\n    builder\n      .addCase(executeCode.pending, (state) => {\n        state.loading.executing = true;\n        state.executionState.isExecuting = true;\n        state.executionState.executionStartTime = new Date().toISOString();\n      })\n      .addCase(executeCode.fulfilled, (state, action) => {\n        state.loading.executing = false;\n        state.executionState.isExecuting = false;\n        state.executionState.executionEndTime = new Date().toISOString();\n        \n        // Update position if provided\n        if (action.payload.finalPosition) {\n          state.currentPosition = action.payload.finalPosition;\n        }\n        \n        // Update performance metrics\n        state.performance.totalExecutions++;\n        if (action.payload.success) {\n          state.performance.successfulExecutions++;\n        }\n      })\n      .addCase(executeCode.rejected, (state, action) => {\n        state.loading.executing = false;\n        state.executionState.isExecuting = false;\n        state.executionState.executionEndTime = new Date().toISOString();\n        \n        state.errors.push({\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          message: `Code execution failed: ${action.payload}`,\n          type: 'execution_error'\n        });\n      });\n    \n    // Move joint\n    builder\n      .addCase(moveJoint.pending, (state) => {\n        state.loading.moving = true;\n      })\n      .addCase(moveJoint.fulfilled, (state, action) => {\n        state.loading.moving = false;\n        state.performance.totalCommands++;\n        state.performance.successfulCommands++;\n      })\n      .addCase(moveJoint.rejected, (state, action) => {\n        state.loading.moving = false;\n        state.performance.totalCommands++;\n        \n        state.errors.push({\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          message: `Joint movement failed: ${action.payload}`,\n          type: 'movement_error'\n        });\n      });\n    \n    // Emergency stop\n    builder\n      .addCase(emergencyStop.fulfilled, (state) => {\n        state.loading.executing = false;\n        state.loading.moving = false;\n        state.executionState.isExecuting = false;\n        state.safety.emergencyStopActive = true;\n        state.safety.lastEmergencyStop = new Date().toISOString();\n      });\n    \n    // Get robot status\n    builder\n      .addCase(getRobotStatus.fulfilled, (state, action) => {\n        const status = action.payload;\n        \n        // Update connection status\n        state.isConnected = status.connected || false;\n        state.connectionStatus = status.connected ? 'connected' : 'disconnected';\n        \n        // Update calibration status\n        if (status.calibration) {\n          state.calibration = {\n            ...state.calibration,\n            ...status.calibration\n          };\n        }\n        \n        // Update safety status\n        if (status.safety) {\n          state.safety = {\n            ...state.safety,\n            ...status.safety\n          };\n        }\n      });\n    \n    // Calibrate robot\n    builder\n      .addCase(calibrateRobot.pending, (state) => {\n        state.loading.calibrating = true;\n        state.calibration.calibrationInProgress = true;\n      })\n      .addCase(calibrateRobot.fulfilled, (state, action) => {\n        state.loading.calibrating = false;\n        state.calibration.calibrationInProgress = false;\n        state.calibration.isCalibrated = true;\n        state.calibration.calibrationDate = new Date().toISOString();\n        state.calibration.calibrationData = action.payload;\n      })\n      .addCase(calibrateRobot.rejected, (state, action) => {\n        state.loading.calibrating = false;\n        state.calibration.calibrationInProgress = false;\n        \n        state.errors.push({\n          id: Date.now(),\n          timestamp: new Date().toISOString(),\n          message: `Calibration failed: ${action.payload}`,\n          type: 'calibration_error'\n        });\n      });\n  }\n});\n\n// Export actions\nexport const {\n  setConnectionStatus,\n  setConnectionError,\n  setRobotData,\n  setExecutionState,\n  setExecutionProgress,\n  setRobotConfig,\n  setTargetPosition,\n  updateCurrentPosition,\n  setSafetyState,\n  addSafetyViolation,\n  clearSafetyViolations,\n  setCalibrationState,\n  addError,\n  addWarning,\n  clearErrors,\n  clearWarnings,\n  removeError,\n  removeWarning,\n  updatePerformanceMetrics,\n  incrementCommandCount,\n  updateTelemetryStats,\n  setLoading,\n  resetRobotState,\n  resetTelemetry,\n  resetPerformanceMetrics\n} = robotSlice.actions;\n\n// Selectors\nexport const selectRobotState = (state) => state.robot;\nexport const selectIsConnected = (state) => state.robot.isConnected;\nexport const selectConnectionStatus = (state) => state.robot.connectionStatus;\nexport const selectTelemetry = (state) => state.robot.telemetry;\nexport const selectCurrentPosition = (state) => state.robot.currentPosition;\nexport const selectTargetPosition = (state) => state.robot.targetPosition;\nexport const selectExecutionState = (state) => state.robot.executionState;\nexport const selectIsExecuting = (state) => state.robot.executionState.isExecuting;\nexport const selectRobotConfig = (state) => state.robot.robotConfig;\nexport const selectSafetyState = (state) => state.robot.safety;\nexport const selectCalibrationState = (state) => state.robot.calibration;\nexport const selectRobotErrors = (state) => state.robot.errors;\nexport const selectRobotWarnings = (state) => state.robot.warnings;\nexport const selectPerformanceMetrics = (state) => state.robot.performance;\nexport const selectLoadingState = (state) => state.robot.loading;\n\n// Computed selectors\nexport const selectRobotHealth = (state) => {\n  const { telemetry, safety, calibration, isConnected } = state.robot;\n  \n  if (!isConnected) return 'disconnected';\n  if (safety.emergencyStopActive) return 'emergency';\n  if (safety.temperatureAlarms.length > 0) return 'warning';\n  if (!calibration.isCalibrated) return 'uncalibrated';\n  \n  const maxTemp = Math.max(...telemetry.joint_temperatures);\n  if (maxTemp > 60) return 'warning';\n  if (maxTemp > 70) return 'critical';\n  \n  return 'healthy';\n};\n\nexport const selectExecutionProgress = (state) => {\n  const { executionState } = state.robot;\n  return {\n    isExecuting: executionState.isExecuting,\n    progress: executionState.executionProgress,\n    startTime: executionState.executionStartTime,\n    estimatedCompletion: executionState.executionStartTime ? \n      new Date(Date.parse(executionState.executionStartTime) + 30000) : null\n  };\n};\n\nexport default robotSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
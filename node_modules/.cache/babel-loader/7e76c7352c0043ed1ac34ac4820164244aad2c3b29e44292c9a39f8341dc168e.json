{"ast":null,"code":"// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport robotService from '../services/robotService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk('robot/connect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('🤖 Robot slice: Connecting to robot...');\n    const response = await robotService.connect();\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('🤖 Robot slice: Connect error:', error);\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message);\n  }\n});\nexport const disconnectRobot = createAsyncThunk('robot/disconnect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('🤖 Robot slice: Disconnecting from robot...');\n    const response = await robotService.disconnect();\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('🤖 Robot slice: Disconnect error:', error);\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message);\n  }\n});\nexport const fetchRobotStatus = createAsyncThunk('robot/fetchStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.getStatus();\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error('🤖 Robot slice: Fetch status error:', error);\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || error.message);\n  }\n});\nexport const moveJoint = createAsyncThunk('robot/moveJoint', async ({\n  jointId,\n  angle,\n  speed\n}, {\n  rejectWithValue\n}) => {\n  try {\n    console.log(`🤖 Robot slice: Moving joint ${jointId} to ${angle}°...`);\n    const response = await robotService.moveJoint(jointId, angle, speed);\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    console.error(`🤖 Robot slice: Move joint ${jointId} error:`, error);\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || error.message);\n  }\n});\nexport const moveToPosition = createAsyncThunk('robot/moveToPosition', async ({\n  angles,\n  speed\n}, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('🤖 Robot slice: Moving to position:', angles);\n    const response = await robotService.moveToPosition(angles, speed);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    console.error('🤖 Robot slice: Move to position error:', error);\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || error.message);\n  }\n});\nexport const emergencyStop = createAsyncThunk('robot/emergencyStop', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('🚨 Robot slice: Emergency stop!');\n    const response = await robotService.emergencyStop();\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    console.error('🚨 Robot slice: Emergency stop error:', error);\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || error.message);\n  }\n});\nexport const homePosition = createAsyncThunk('robot/homePosition', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    console.log('🏠 Robot slice: Moving to home position...');\n    const response = await robotService.homePosition();\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    console.error('🏠 Robot slice: Home position error:', error);\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.detail) || error.message);\n  }\n});\n\n// Default actuator structure\nconst createDefaultActuator = id => ({\n  id: id,\n  enabled: false,\n  position: 0,\n  velocity: 0,\n  current: 0,\n  temperature: 25.0,\n  voltage: 0,\n  torque_enabled: false,\n  moving: false,\n  hardware_error: 0,\n  goal_position: 0,\n  present_position: 0,\n  goal_velocity: 0,\n  present_velocity: 0,\n  goal_current: 0,\n  present_current: 0,\n  present_temperature: 25.0,\n  present_voltage: 0,\n  registered_instruction: 0,\n  status_return_level: 2,\n  hardware_error_status: 0\n});\nconst createDefaultActuators = () => ({\n  1: createDefaultActuator(1),\n  2: createDefaultActuator(2),\n  3: createDefaultActuator(3)\n});\nconst initialState = {\n  // Connection status\n  connected: false,\n  connectionStatus: 'disconnected',\n  // 'disconnected', 'connecting', 'connected', 'error'\n\n  // Robot state\n  jointAngles: [0.0, 0.0, 0.0],\n  jointPositions: [0.0, 0.0, 0.0],\n  jointVelocities: [0.0, 0.0, 0.0],\n  actuators: createDefaultActuators(),\n  // Safety and status\n  safetyStatus: {\n    safe: true,\n    emergencyStop: false,\n    warnings: []\n  },\n  bridgeStatus: {\n    connected: false,\n    version: null,\n    last_heartbeat: null,\n    active_bridges: []\n  },\n  hardwareErrors: [],\n  // UI state\n  loading: false,\n  error: null,\n  lastUpdate: null,\n  // Control state\n  isMoving: false,\n  currentCommand: null,\n  commandQueue: []\n};\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    setConnectionStatus: (state, action) => {\n      const status = action.payload;\n      state.connectionStatus = status;\n      state.connected = status === 'connected';\n      if (status === 'disconnected') {\n        // Reset robot state on disconnect\n        state.jointAngles = [0.0, 0.0, 0.0];\n        state.jointPositions = [0.0, 0.0, 0.0];\n        state.jointVelocities = [0.0, 0.0, 0.0];\n        state.actuators = createDefaultActuators();\n        state.isMoving = false;\n        state.currentCommand = null;\n      }\n      console.log('🤖 Robot slice: Connection status changed to:', status);\n    },\n    updateRobotState: (state, action) => {\n      const data = action.payload;\n\n      // Update joint data if provided\n      if (data.joint_angles && Array.isArray(data.joint_angles)) {\n        state.jointAngles = data.joint_angles.slice(0, 3);\n      }\n      if (data.joint_positions && Array.isArray(data.joint_positions)) {\n        state.jointPositions = data.joint_positions.slice(0, 3);\n      }\n      if (data.joint_velocities && Array.isArray(data.joint_velocities)) {\n        state.jointVelocities = data.joint_velocities.slice(0, 3);\n      }\n\n      // Update actuator data\n      if (data.actuators) {\n        Object.entries(data.actuators).forEach(([id, actuatorData]) => {\n          if (state.actuators[id]) {\n            state.actuators[id] = {\n              ...state.actuators[id],\n              ...actuatorData\n            };\n          }\n        });\n      }\n\n      // Update safety status\n      if (data.safety_status) {\n        state.safetyStatus = {\n          ...state.safetyStatus,\n          ...data.safety_status\n        };\n      }\n\n      // Update bridge status\n      if (data.bridge_status) {\n        state.bridgeStatus = {\n          ...state.bridgeStatus,\n          ...data.bridge_status\n        };\n      }\n\n      // Update movement status\n      if (data.is_moving !== undefined) {\n        state.isMoving = data.is_moving;\n      }\n\n      // Update hardware errors\n      if (data.hardware_errors && Array.isArray(data.hardware_errors)) {\n        state.hardwareErrors = data.hardware_errors;\n      }\n      state.lastUpdate = new Date().toISOString();\n    },\n    setRobotError: (state, action) => {\n      state.error = action.payload;\n      console.error('🤖 Robot slice: Error set:', action.payload);\n    },\n    clearRobotError: state => {\n      state.error = null;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    resetRobotState: state => {\n      console.log('🔄 Robot slice: Resetting robot state');\n      return {\n        ...initialState,\n        connectionStatus: state.connectionStatus,\n        connected: state.connected\n      };\n    },\n    updateJointAngle: (state, action) => {\n      const {\n        jointIndex,\n        angle\n      } = action.payload;\n      if (jointIndex >= 0 && jointIndex < state.jointAngles.length) {\n        state.jointAngles[jointIndex] = angle;\n        state.lastUpdate = new Date().toISOString();\n      }\n    },\n    setCurrentCommand: (state, action) => {\n      state.currentCommand = action.payload;\n    },\n    addToCommandQueue: (state, action) => {\n      state.commandQueue.push(action.payload);\n    },\n    removeFromCommandQueue: (state, action) => {\n      const commandId = action.payload;\n      state.commandQueue = state.commandQueue.filter(cmd => cmd.id !== commandId);\n    },\n    clearCommandQueue: state => {\n      state.commandQueue = [];\n      state.currentCommand = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Connect robot cases\n    .addCase(connectRobot.pending, state => {\n      state.loading = true;\n      state.connectionStatus = 'connecting';\n      state.error = null;\n    }).addCase(connectRobot.fulfilled, (state, action) => {\n      state.loading = false;\n      state.connected = true;\n      state.connectionStatus = 'connected';\n      state.error = null;\n      if (action.payload.robot_status) {\n        robotSlice.caseReducers.updateRobotState(state, {\n          payload: action.payload.robot_status\n        });\n      }\n      console.log('✅ Robot slice: Connected successfully');\n    }).addCase(connectRobot.rejected, (state, action) => {\n      state.loading = false;\n      state.connected = false;\n      state.connectionStatus = 'error';\n      state.error = action.payload || 'Connection failed';\n    })\n\n    // Disconnect robot cases\n    .addCase(disconnectRobot.pending, state => {\n      state.loading = true;\n    }).addCase(disconnectRobot.fulfilled, state => {\n      state.loading = false;\n      state.connected = false;\n      state.connectionStatus = 'disconnected';\n      state.error = null;\n\n      // Reset robot state\n      state.jointAngles = [0.0, 0.0, 0.0];\n      state.jointPositions = [0.0, 0.0, 0.0];\n      state.jointVelocities = [0.0, 0.0, 0.0];\n      state.actuators = createDefaultActuators();\n      state.isMoving = false;\n      state.currentCommand = null;\n      state.commandQueue = [];\n      console.log('✅ Robot slice: Disconnected successfully');\n    }).addCase(disconnectRobot.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || 'Disconnection failed';\n    })\n\n    // Fetch status cases\n    .addCase(fetchRobotStatus.fulfilled, (state, action) => {\n      robotSlice.caseReducers.updateRobotState(state, {\n        payload: action.payload\n      });\n    }).addCase(fetchRobotStatus.rejected, (state, action) => {\n      state.error = action.payload || 'Status fetch failed';\n    })\n\n    // Move joint cases\n    .addCase(moveJoint.pending, (state, action) => {\n      state.loading = true;\n      state.isMoving = true;\n      state.error = null;\n      state.currentCommand = {\n        type: 'move_joint',\n        jointId: action.meta.arg.jointId,\n        angle: action.meta.arg.angle,\n        startTime: new Date().toISOString()\n      };\n    }).addCase(moveJoint.fulfilled, (state, action) => {\n      state.loading = false;\n      if (action.payload.robot_status) {\n        robotSlice.caseReducers.updateRobotState(state, {\n          payload: action.payload.robot_status\n        });\n      }\n\n      // Update specific joint angle if provided\n      if (action.payload.joint_angles) {\n        state.jointAngles = action.payload.joint_angles;\n      }\n    }).addCase(moveJoint.rejected, (state, action) => {\n      state.loading = false;\n      state.isMoving = false;\n      state.currentCommand = null;\n      state.error = action.payload || 'Joint movement failed';\n    })\n\n    // Move to position cases\n    .addCase(moveToPosition.pending, (state, action) => {\n      state.loading = true;\n      state.isMoving = true;\n      state.error = null;\n      state.currentCommand = {\n        type: 'move_to_position',\n        angles: action.meta.arg.angles,\n        startTime: new Date().toISOString()\n      };\n    }).addCase(moveToPosition.fulfilled, (state, action) => {\n      state.loading = false;\n      if (action.payload.robot_status) {\n        robotSlice.caseReducers.updateRobotState(state, {\n          payload: action.payload.robot_status\n        });\n      }\n      if (action.payload.joint_angles) {\n        state.jointAngles = action.payload.joint_angles;\n      }\n    }).addCase(moveToPosition.rejected, (state, action) => {\n      state.loading = false;\n      state.isMoving = false;\n      state.currentCommand = null;\n      state.error = action.payload || 'Position movement failed';\n    })\n\n    // Emergency stop cases\n    .addCase(emergencyStop.fulfilled, state => {\n      state.isMoving = false;\n      state.currentCommand = null;\n      state.commandQueue = [];\n      state.safetyStatus.emergencyStop = true;\n      console.log('🚨 Robot slice: Emergency stop activated');\n    }).addCase(emergencyStop.rejected, (state, action) => {\n      state.error = action.payload || 'Emergency stop failed';\n    })\n\n    // Home position cases\n    .addCase(homePosition.pending, state => {\n      state.loading = true;\n      state.isMoving = true;\n      state.error = null;\n      state.currentCommand = {\n        type: 'home_position',\n        startTime: new Date().toISOString()\n      };\n    }).addCase(homePosition.fulfilled, (state, action) => {\n      state.loading = false;\n      if (action.payload.robot_status) {\n        robotSlice.caseReducers.updateRobotState(state, {\n          payload: action.payload.robot_status\n        });\n      }\n\n      // Reset to home position\n      state.jointAngles = [0.0, 0.0, 0.0];\n      state.jointPositions = [0.0, 0.0, 0.0];\n      state.jointVelocities = [0.0, 0.0, 0.0];\n    }).addCase(homePosition.rejected, (state, action) => {\n      state.loading = false;\n      state.isMoving = false;\n      state.currentCommand = null;\n      state.error = action.payload || 'Home position failed';\n    });\n  }\n});\nexport const {\n  setConnectionStatus,\n  updateRobotState,\n  setRobotError,\n  clearRobotError,\n  setLoading,\n  resetRobotState,\n  updateJointAngle,\n  setCurrentCommand,\n  addToCommandQueue,\n  removeFromCommandQueue,\n  clearCommandQueue\n} = robotSlice.actions;\n\n// Selectors\nexport const selectRobotConnected = state => state.robot.connected;\nexport const selectRobotConnectionStatus = state => state.robot.connectionStatus;\nexport const selectRobotError = state => state.robot.error;\nexport const selectRobotJointAngles = state => state.robot.jointAngles;\nexport const selectRobotJointPositions = state => state.robot.jointPositions;\nexport const selectRobotJointVelocities = state => state.robot.jointVelocities;\nexport const selectRobotActuators = state => state.robot.actuators;\nexport const selectRobotActuatorList = state => Object.values(state.robot.actuators);\nexport const selectRobotSafetyStatus = state => state.robot.safetyStatus;\nexport const selectBridgeStatus = state => state.robot.bridgeStatus;\nexport const selectRobotLoading = state => state.robot.loading;\nexport const selectHardwareErrors = state => state.robot.hardwareErrors;\nexport const selectIsMoving = state => state.robot.isMoving;\nexport const selectCurrentCommand = state => state.robot.currentCommand;\nexport default robotSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","robotService","connectRobot","_","rejectWithValue","console","log","response","connect","data","error","_error$response","_error$response$data","detail","message","disconnectRobot","disconnect","_error$response2","_error$response2$data","fetchRobotStatus","getStatus","_error$response3","_error$response3$data","moveJoint","jointId","angle","speed","_error$response4","_error$response4$data","moveToPosition","angles","_error$response5","_error$response5$data","emergencyStop","_error$response6","_error$response6$data","homePosition","_error$response7","_error$response7$data","createDefaultActuator","id","enabled","position","velocity","current","temperature","voltage","torque_enabled","moving","hardware_error","goal_position","present_position","goal_velocity","present_velocity","goal_current","present_current","present_temperature","present_voltage","registered_instruction","status_return_level","hardware_error_status","createDefaultActuators","initialState","connected","connectionStatus","jointAngles","jointPositions","jointVelocities","actuators","safetyStatus","safe","warnings","bridgeStatus","version","last_heartbeat","active_bridges","hardwareErrors","loading","lastUpdate","isMoving","currentCommand","commandQueue","robotSlice","name","reducers","setConnectionStatus","state","action","status","payload","updateRobotState","joint_angles","Array","isArray","slice","joint_positions","joint_velocities","Object","entries","forEach","actuatorData","safety_status","bridge_status","is_moving","undefined","hardware_errors","Date","toISOString","setRobotError","clearRobotError","setLoading","resetRobotState","updateJointAngle","jointIndex","length","setCurrentCommand","addToCommandQueue","push","removeFromCommandQueue","commandId","filter","cmd","clearCommandQueue","extraReducers","builder","addCase","pending","fulfilled","robot_status","caseReducers","rejected","type","meta","arg","startTime","actions","selectRobotConnected","robot","selectRobotConnectionStatus","selectRobotError","selectRobotJointAngles","selectRobotJointPositions","selectRobotJointVelocities","selectRobotActuators","selectRobotActuatorList","values","selectRobotSafetyStatus","selectBridgeStatus","selectRobotLoading","selectHardwareErrors","selectIsMoving","selectCurrentCommand","reducer"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/robotSlice.js"],"sourcesContent":["// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport robotService from '../services/robotService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk(\n  'robot/connect',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('🤖 Robot slice: Connecting to robot...');\n      const response = await robotService.connect();\n      return response.data;\n    } catch (error) {\n      console.error('🤖 Robot slice: Connect error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const disconnectRobot = createAsyncThunk(\n  'robot/disconnect',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('🤖 Robot slice: Disconnecting from robot...');\n      const response = await robotService.disconnect();\n      return response.data;\n    } catch (error) {\n      console.error('🤖 Robot slice: Disconnect error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const fetchRobotStatus = createAsyncThunk(\n  'robot/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.getStatus();\n      return response.data;\n    } catch (error) {\n      console.error('🤖 Robot slice: Fetch status error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const moveJoint = createAsyncThunk(\n  'robot/moveJoint',\n  async ({ jointId, angle, speed }, { rejectWithValue }) => {\n    try {\n      console.log(`🤖 Robot slice: Moving joint ${jointId} to ${angle}°...`);\n      const response = await robotService.moveJoint(jointId, angle, speed);\n      return response.data;\n    } catch (error) {\n      console.error(`🤖 Robot slice: Move joint ${jointId} error:`, error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const moveToPosition = createAsyncThunk(\n  'robot/moveToPosition',\n  async ({ angles, speed }, { rejectWithValue }) => {\n    try {\n      console.log('🤖 Robot slice: Moving to position:', angles);\n      const response = await robotService.moveToPosition(angles, speed);\n      return response.data;\n    } catch (error) {\n      console.error('🤖 Robot slice: Move to position error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const emergencyStop = createAsyncThunk(\n  'robot/emergencyStop',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('🚨 Robot slice: Emergency stop!');\n      const response = await robotService.emergencyStop();\n      return response.data;\n    } catch (error) {\n      console.error('🚨 Robot slice: Emergency stop error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const homePosition = createAsyncThunk(\n  'robot/homePosition',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('🏠 Robot slice: Moving to home position...');\n      const response = await robotService.homePosition();\n      return response.data;\n    } catch (error) {\n      console.error('🏠 Robot slice: Home position error:', error);\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\n// Default actuator structure\nconst createDefaultActuator = (id) => ({\n  id: id,\n  enabled: false,\n  position: 0,\n  velocity: 0,\n  current: 0,\n  temperature: 25.0,\n  voltage: 0,\n  torque_enabled: false,\n  moving: false,\n  hardware_error: 0,\n  goal_position: 0,\n  present_position: 0,\n  goal_velocity: 0,\n  present_velocity: 0,\n  goal_current: 0,\n  present_current: 0,\n  present_temperature: 25.0,\n  present_voltage: 0,\n  registered_instruction: 0,\n  status_return_level: 2,\n  hardware_error_status: 0\n});\n\nconst createDefaultActuators = () => ({\n  1: createDefaultActuator(1),\n  2: createDefaultActuator(2),\n  3: createDefaultActuator(3)\n});\n\nconst initialState = {\n  // Connection status\n  connected: false,\n  connectionStatus: 'disconnected', // 'disconnected', 'connecting', 'connected', 'error'\n  \n  // Robot state\n  jointAngles: [0.0, 0.0, 0.0],\n  jointPositions: [0.0, 0.0, 0.0],\n  jointVelocities: [0.0, 0.0, 0.0],\n  actuators: createDefaultActuators(),\n  \n  // Safety and status\n  safetyStatus: {\n    safe: true,\n    emergencyStop: false,\n    warnings: []\n  },\n  bridgeStatus: {\n    connected: false,\n    version: null,\n    last_heartbeat: null,\n    active_bridges: []\n  },\n  hardwareErrors: [],\n  \n  // UI state\n  loading: false,\n  error: null,\n  lastUpdate: null,\n  \n  // Control state\n  isMoving: false,\n  currentCommand: null,\n  commandQueue: [],\n};\n\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    setConnectionStatus: (state, action) => {\n      const status = action.payload;\n      state.connectionStatus = status;\n      state.connected = status === 'connected';\n      \n      if (status === 'disconnected') {\n        // Reset robot state on disconnect\n        state.jointAngles = [0.0, 0.0, 0.0];\n        state.jointPositions = [0.0, 0.0, 0.0];\n        state.jointVelocities = [0.0, 0.0, 0.0];\n        state.actuators = createDefaultActuators();\n        state.isMoving = false;\n        state.currentCommand = null;\n      }\n      \n      console.log('🤖 Robot slice: Connection status changed to:', status);\n    },\n\n    updateRobotState: (state, action) => {\n      const data = action.payload;\n      \n      // Update joint data if provided\n      if (data.joint_angles && Array.isArray(data.joint_angles)) {\n        state.jointAngles = data.joint_angles.slice(0, 3);\n      }\n      \n      if (data.joint_positions && Array.isArray(data.joint_positions)) {\n        state.jointPositions = data.joint_positions.slice(0, 3);\n      }\n      \n      if (data.joint_velocities && Array.isArray(data.joint_velocities)) {\n        state.jointVelocities = data.joint_velocities.slice(0, 3);\n      }\n      \n      // Update actuator data\n      if (data.actuators) {\n        Object.entries(data.actuators).forEach(([id, actuatorData]) => {\n          if (state.actuators[id]) {\n            state.actuators[id] = {\n              ...state.actuators[id],\n              ...actuatorData\n            };\n          }\n        });\n      }\n      \n      // Update safety status\n      if (data.safety_status) {\n        state.safetyStatus = {\n          ...state.safetyStatus,\n          ...data.safety_status\n        };\n      }\n      \n      // Update bridge status\n      if (data.bridge_status) {\n        state.bridgeStatus = {\n          ...state.bridgeStatus,\n          ...data.bridge_status\n        };\n      }\n      \n      // Update movement status\n      if (data.is_moving !== undefined) {\n        state.isMoving = data.is_moving;\n      }\n      \n      // Update hardware errors\n      if (data.hardware_errors && Array.isArray(data.hardware_errors)) {\n        state.hardwareErrors = data.hardware_errors;\n      }\n      \n      state.lastUpdate = new Date().toISOString();\n    },\n\n    setRobotError: (state, action) => {\n      state.error = action.payload;\n      console.error('🤖 Robot slice: Error set:', action.payload);\n    },\n\n    clearRobotError: (state) => {\n      state.error = null;\n    },\n\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n\n    resetRobotState: (state) => {\n      console.log('🔄 Robot slice: Resetting robot state');\n      return {\n        ...initialState,\n        connectionStatus: state.connectionStatus,\n        connected: state.connected\n      };\n    },\n\n    updateJointAngle: (state, action) => {\n      const { jointIndex, angle } = action.payload;\n      if (jointIndex >= 0 && jointIndex < state.jointAngles.length) {\n        state.jointAngles[jointIndex] = angle;\n        state.lastUpdate = new Date().toISOString();\n      }\n    },\n\n    setCurrentCommand: (state, action) => {\n      state.currentCommand = action.payload;\n    },\n\n    addToCommandQueue: (state, action) => {\n      state.commandQueue.push(action.payload);\n    },\n\n    removeFromCommandQueue: (state, action) => {\n      const commandId = action.payload;\n      state.commandQueue = state.commandQueue.filter(cmd => cmd.id !== commandId);\n    },\n\n    clearCommandQueue: (state) => {\n      state.commandQueue = [];\n      state.currentCommand = null;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      // Connect robot cases\n      .addCase(connectRobot.pending, (state) => {\n        state.loading = true;\n        state.connectionStatus = 'connecting';\n        state.error = null;\n      })\n      .addCase(connectRobot.fulfilled, (state, action) => {\n        state.loading = false;\n        state.connected = true;\n        state.connectionStatus = 'connected';\n        state.error = null;\n        \n        if (action.payload.robot_status) {\n          robotSlice.caseReducers.updateRobotState(state, { payload: action.payload.robot_status });\n        }\n        \n        console.log('✅ Robot slice: Connected successfully');\n      })\n      .addCase(connectRobot.rejected, (state, action) => {\n        state.loading = false;\n        state.connected = false;\n        state.connectionStatus = 'error';\n        state.error = action.payload || 'Connection failed';\n      })\n\n      // Disconnect robot cases\n      .addCase(disconnectRobot.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(disconnectRobot.fulfilled, (state) => {\n        state.loading = false;\n        state.connected = false;\n        state.connectionStatus = 'disconnected';\n        state.error = null;\n        \n        // Reset robot state\n        state.jointAngles = [0.0, 0.0, 0.0];\n        state.jointPositions = [0.0, 0.0, 0.0];\n        state.jointVelocities = [0.0, 0.0, 0.0];\n        state.actuators = createDefaultActuators();\n        state.isMoving = false;\n        state.currentCommand = null;\n        state.commandQueue = [];\n        \n        console.log('✅ Robot slice: Disconnected successfully');\n      })\n      .addCase(disconnectRobot.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload || 'Disconnection failed';\n      })\n\n      // Fetch status cases\n      .addCase(fetchRobotStatus.fulfilled, (state, action) => {\n        robotSlice.caseReducers.updateRobotState(state, { payload: action.payload });\n      })\n      .addCase(fetchRobotStatus.rejected, (state, action) => {\n        state.error = action.payload || 'Status fetch failed';\n      })\n\n      // Move joint cases\n      .addCase(moveJoint.pending, (state, action) => {\n        state.loading = true;\n        state.isMoving = true;\n        state.error = null;\n        state.currentCommand = {\n          type: 'move_joint',\n          jointId: action.meta.arg.jointId,\n          angle: action.meta.arg.angle,\n          startTime: new Date().toISOString()\n        };\n      })\n      .addCase(moveJoint.fulfilled, (state, action) => {\n        state.loading = false;\n        \n        if (action.payload.robot_status) {\n          robotSlice.caseReducers.updateRobotState(state, { payload: action.payload.robot_status });\n        }\n        \n        // Update specific joint angle if provided\n        if (action.payload.joint_angles) {\n          state.jointAngles = action.payload.joint_angles;\n        }\n      })\n      .addCase(moveJoint.rejected, (state, action) => {\n        state.loading = false;\n        state.isMoving = false;\n        state.currentCommand = null;\n        state.error = action.payload || 'Joint movement failed';\n      })\n\n      // Move to position cases\n      .addCase(moveToPosition.pending, (state, action) => {\n        state.loading = true;\n        state.isMoving = true;\n        state.error = null;\n        state.currentCommand = {\n          type: 'move_to_position',\n          angles: action.meta.arg.angles,\n          startTime: new Date().toISOString()\n        };\n      })\n      .addCase(moveToPosition.fulfilled, (state, action) => {\n        state.loading = false;\n        \n        if (action.payload.robot_status) {\n          robotSlice.caseReducers.updateRobotState(state, { payload: action.payload.robot_status });\n        }\n        \n        if (action.payload.joint_angles) {\n          state.jointAngles = action.payload.joint_angles;\n        }\n      })\n      .addCase(moveToPosition.rejected, (state, action) => {\n        state.loading = false;\n        state.isMoving = false;\n        state.currentCommand = null;\n        state.error = action.payload || 'Position movement failed';\n      })\n\n      // Emergency stop cases\n      .addCase(emergencyStop.fulfilled, (state) => {\n        state.isMoving = false;\n        state.currentCommand = null;\n        state.commandQueue = [];\n        state.safetyStatus.emergencyStop = true;\n        \n        console.log('🚨 Robot slice: Emergency stop activated');\n      })\n      .addCase(emergencyStop.rejected, (state, action) => {\n        state.error = action.payload || 'Emergency stop failed';\n      })\n\n      // Home position cases\n      .addCase(homePosition.pending, (state) => {\n        state.loading = true;\n        state.isMoving = true;\n        state.error = null;\n        state.currentCommand = {\n          type: 'home_position',\n          startTime: new Date().toISOString()\n        };\n      })\n      .addCase(homePosition.fulfilled, (state, action) => {\n        state.loading = false;\n        \n        if (action.payload.robot_status) {\n          robotSlice.caseReducers.updateRobotState(state, { payload: action.payload.robot_status });\n        }\n        \n        // Reset to home position\n        state.jointAngles = [0.0, 0.0, 0.0];\n        state.jointPositions = [0.0, 0.0, 0.0];\n        state.jointVelocities = [0.0, 0.0, 0.0];\n      })\n      .addCase(homePosition.rejected, (state, action) => {\n        state.loading = false;\n        state.isMoving = false;\n        state.currentCommand = null;\n        state.error = action.payload || 'Home position failed';\n      });\n  },\n});\n\nexport const {\n  setConnectionStatus,\n  updateRobotState,\n  setRobotError,\n  clearRobotError,\n  setLoading,\n  resetRobotState,\n  updateJointAngle,\n  setCurrentCommand,\n  addToCommandQueue,\n  removeFromCommandQueue,\n  clearCommandQueue\n} = robotSlice.actions;\n\n// Selectors\nexport const selectRobotConnected = (state) => state.robot.connected;\nexport const selectRobotConnectionStatus = (state) => state.robot.connectionStatus;\nexport const selectRobotError = (state) => state.robot.error;\nexport const selectRobotJointAngles = (state) => state.robot.jointAngles;\nexport const selectRobotJointPositions = (state) => state.robot.jointPositions;\nexport const selectRobotJointVelocities = (state) => state.robot.jointVelocities;\nexport const selectRobotActuators = (state) => state.robot.actuators;\nexport const selectRobotActuatorList = (state) => Object.values(state.robot.actuators);\nexport const selectRobotSafetyStatus = (state) => state.robot.safetyStatus;\nexport const selectBridgeStatus = (state) => state.robot.bridgeStatus;\nexport const selectRobotLoading = (state) => state.robot.loading;\nexport const selectHardwareErrors = (state) => state.robot.hardwareErrors;\nexport const selectIsMoving = (state) => state.robot.isMoving;\nexport const selectCurrentCommand = (state) => state.robot.currentCommand;\n\nexport default robotSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
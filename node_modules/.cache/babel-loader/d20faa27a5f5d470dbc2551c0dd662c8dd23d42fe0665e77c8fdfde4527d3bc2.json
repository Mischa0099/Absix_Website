{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\contexts\\\\ErrorContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/ErrorContext.jsx\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ErrorContext = /*#__PURE__*/createContext();\nexport const useError = () => {\n  _s();\n  const context = useContext(ErrorContext);\n  if (!context) {\n    throw new Error('useError must be used within an ErrorProvider');\n  }\n  return context;\n};\n_s(useError, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ErrorProvider = ({\n  children\n}) => {\n  _s2();\n  const [errors, setErrors] = useState([]);\n  const addError = useCallback(error => {\n    const errorObj = {\n      id: Date.now() + Math.random(),\n      timestamp: new Date().toISOString(),\n      message: typeof error === 'string' ? error : error.message,\n      stack: error.stack,\n      type: error.type || 'error',\n      ...error\n    };\n    setErrors(prev => [...prev, errorObj]);\n\n    // Auto-remove error after 10 seconds\n    setTimeout(() => {\n      removeError(errorObj.id);\n    }, 10000);\n  }, []);\n  const removeError = useCallback(id => {\n    setErrors(prev => prev.filter(error => error.id !== id));\n  }, []);\n  const clearErrors = useCallback(() => {\n    setErrors([]);\n  }, []);\n  const value = {\n    errors,\n    addError,\n    removeError,\n    clearErrors,\n    hasErrors: errors.length > 0\n  };\n  return /*#__PURE__*/_jsxDEV(ErrorContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s2(ErrorProvider, \"zi9AFcfNGlLHNbiMbuyU0smKNjY=\");\n_c = ErrorProvider;\nexport default ErrorContext;\nvar _c;\n$RefreshReg$(_c, \"ErrorProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","ErrorContext","useError","_s","context","Error","ErrorProvider","children","_s2","errors","setErrors","addError","error","errorObj","id","Date","now","Math","random","timestamp","toISOString","message","stack","type","prev","setTimeout","removeError","filter","clearErrors","value","hasErrors","length","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/contexts/ErrorContext.jsx"],"sourcesContent":["// src/contexts/ErrorContext.jsx\r\nimport React, { createContext, useContext, useState, useCallback } from 'react';\r\n\r\nconst ErrorContext = createContext();\r\n\r\nexport const useError = () => {\r\n  const context = useContext(ErrorContext);\r\n  if (!context) {\r\n    throw new Error('useError must be used within an ErrorProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ErrorProvider = ({ children }) => {\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  const addError = useCallback((error) => {\r\n    const errorObj = {\r\n      id: Date.now() + Math.random(),\r\n      timestamp: new Date().toISOString(),\r\n      message: typeof error === 'string' ? error : error.message,\r\n      stack: error.stack,\r\n      type: error.type || 'error',\r\n      ...error\r\n    };\r\n    \r\n    setErrors(prev => [...prev, errorObj]);\r\n    \r\n    // Auto-remove error after 10 seconds\r\n    setTimeout(() => {\r\n      removeError(errorObj.id);\r\n    }, 10000);\r\n  }, []);\r\n\r\n  const removeError = useCallback((id) => {\r\n    setErrors(prev => prev.filter(error => error.id !== id));\r\n  }, []);\r\n\r\n  const clearErrors = useCallback(() => {\r\n    setErrors([]);\r\n  }, []);\r\n\r\n  const value = {\r\n    errors,\r\n    addError,\r\n    removeError,\r\n    clearErrors,\r\n    hasErrors: errors.length > 0\r\n  };\r\n\r\n  return (\r\n    <ErrorContext.Provider value={value}>\r\n      {children}\r\n    </ErrorContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ErrorContext;"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhF,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMc,QAAQ,GAAGb,WAAW,CAAEc,KAAK,IAAK;IACtC,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;MAC9BC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC;MACnCC,OAAO,EAAE,OAAOT,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACS,OAAO;MAC1DC,KAAK,EAAEV,KAAK,CAACU,KAAK;MAClBC,IAAI,EAAEX,KAAK,CAACW,IAAI,IAAI,OAAO;MAC3B,GAAGX;IACL,CAAC;IAEDF,SAAS,CAACc,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEX,QAAQ,CAAC,CAAC;;IAEtC;IACAY,UAAU,CAAC,MAAM;MACfC,WAAW,CAACb,QAAQ,CAACC,EAAE,CAAC;IAC1B,CAAC,EAAE,KAAK,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,WAAW,GAAG5B,WAAW,CAAEgB,EAAE,IAAK;IACtCJ,SAAS,CAACc,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACf,KAAK,IAAIA,KAAK,CAACE,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC1D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,WAAW,GAAG9B,WAAW,CAAC,MAAM;IACpCY,SAAS,CAAC,EAAE,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,KAAK,GAAG;IACZpB,MAAM;IACNE,QAAQ;IACRe,WAAW;IACXE,WAAW;IACXE,SAAS,EAAErB,MAAM,CAACsB,MAAM,GAAG;EAC7B,CAAC;EAED,oBACE/B,OAAA,CAACC,YAAY,CAAC+B,QAAQ;IAACH,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EACjCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,GAAA,CA1CWF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA4C1B,eAAeL,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\index.js\";\n// // src/index.js\n// import React from 'react';\n// import { createRoot } from 'react-dom/client';\n// import App from './App';\n\n// // Performance monitoring\n// import { performanceMonitor } from './utils/performanceMonitor';\n// import reportWebVitals from './reportWebVitals';\n\n// // Global styles\n// import './styles/globals.css';\n// import './styles/animations.css';\n// import './styles/components.css';\n// import './styles/dashboard.css';\n// import './styles/variables';\n// import './styles/robotStatus';\n\n// // Initialize performance monitoring\n// performanceMonitor.recordMetric('app_initialization', {\n//   timestamp: Date.now(),\n//   userAgent: navigator.userAgent,\n//   viewport: {\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   },\n//   connection: navigator.connection ? {\n//     effectiveType: navigator.connection.effectiveType,\n//     downlink: navigator.connection.downlink,\n//     rtt: navigator.connection.rtt\n//   } : null\n// });\n\n// // Get the root element\n// const container = document.getElementById('root');\n// // Check if root element exists\n// if (!container) {\n//   throw new Error('Root element not found. Make sure you have a div with id=\"root\" in your HTML.');\n// }\n\n// // Create root and render app\n// const root = createRoot(container);\n\n// // Development mode checks\n// if (process.env.NODE_ENV === 'development') {\n//   // Enable React DevTools profiler\n//   if (typeof window !== 'undefined') {\n//     window.__REACT_DEVTOOLS_GLOBAL_HOOK__?.onCommitFiberRoot;\n//   }\n\n//   // Log environment variables for debugging\n//   console.log('🚀 Development Mode Enabled');\n//   console.log('Environment Variables:', {\n//     API_URL: process.env.REACT_APP_API_URL,\n//     HARDWARE_BRIDGE_URL: process.env.REACT_APP_HARDWARE_BRIDGE_URL,\n//     ENABLE_HARDWARE: process.env.REACT_APP_ENABLE_HARDWARE,\n//     VERSION: process.env.REACT_APP_VERSION\n//   });\n// }\n\n// // Render the application\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // Performance monitoring and web vitals\n// const sendToAnalytics = (metric) => {\n//   // Log to console in development\n//   if (process.env.NODE_ENV === 'development') {\n//     console.log('📊 Web Vital:', metric);\n//   }\n\n//   // Send to performance monitoring service\n//   performanceMonitor.recordMetric('web_vital', {\n//     name: metric.name,\n//     value: metric.value,\n//     rating: metric.rating,\n//     delta: metric.delta,\n//     timestamp: Date.now()\n//   });\n\n//   // Send to analytics service in production\n//   if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ANALYTICS_ID) {\n//     try {\n//       // Example: Send to Google Analytics 4\n//       if (window.gtag) {\n//         window.gtag('event', metric.name, {\n//           event_category: 'Web Vitals',\n//           event_label: metric.id,\n//           value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n//           non_interaction: true\n//         });\n//       }\n\n//       // Example: Send to custom analytics endpoint\n//       fetch('/api/v1/analytics/web-vitals', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({\n//           metric,\n//           timestamp: Date.now(),\n//           userAgent: navigator.userAgent,\n//           url: window.location.href\n//         })\n//       }).catch(error => {\n//         console.warn('Failed to send web vitals to analytics:', error);\n//       });\n//     } catch (error) {\n//       console.warn('Analytics error:', error);\n//     }\n//   }\n// };\n\n// // Start web vitals monitoring\n// reportWebVitals(sendToAnalytics);\n\n// // Global error handlers for unhandled promises and errors\n// window.addEventListener('unhandledrejection', (event) => {\n//   console.error('Unhandled promise rejection:', event.reason);\n\n//   performanceMonitor.recordMetric('unhandled_rejection', {\n//     reason: event.reason?.toString() || 'Unknown',\n//     stack: event.reason?.stack || 'No stack trace',\n//     timestamp: Date.now()\n//   });\n\n//   // Don't prevent default to allow normal error handling\n// });\n\n// window.addEventListener('error', (event) => {\n//   console.error('Global error:', event.error);\n\n//   performanceMonitor.recordMetric('global_error', {\n//     message: event.message,\n//     filename: event.filename,\n//     lineno: event.lineno,\n//     colno: event.colno,\n//     stack: event.error?.stack || 'No stack trace',\n//     timestamp: Date.now()\n//   });\n// });\n\n// // Monitor page visibility for analytics\n// document.addEventListener('visibilitychange', () => {\n//   performanceMonitor.recordMetric('visibility_change', {\n//     hidden: document.hidden,\n//     timestamp: Date.now()\n//   });\n// });\n\n// // Monitor online/offline status\n// window.addEventListener('online', () => {\n//   performanceMonitor.recordMetric('connection_change', {\n//     online: true,\n//     timestamp: Date.now()\n//   });\n\n//   console.log('🌐 Connection restored');\n// });\n\n// window.addEventListener('offline', () => {\n//   performanceMonitor.recordMetric('connection_change', {\n//     online: false,\n//     timestamp: Date.now()\n//   });\n\n//   console.log('🌐 Connection lost');\n// });\n\n// // Development hot module replacement\n// if (process.env.NODE_ENV === 'development' && module.hot) {\n//   module.hot.accept('./App', () => {\n//     const NextApp = require('./App').default;\n//     root.render(\n//       <React.StrictMode>\n//         <NextApp />\n//       </React.StrictMode>\n//     );\n//   });\n// }\n\n// // Log successful application start\n// console.log(`🤖 Robotics Challenge App started successfully`);\n// console.log(`📊 Performance monitoring enabled`);\n// console.log(`🔧 Environment: ${process.env.NODE_ENV}`);\n\n// if (process.env.REACT_APP_VERSION) {\n//   console.log(`📦 Version: ${process.env.REACT_APP_VERSION}`);\n// }\n\n// // Initialize app-specific performance tracking\n// performanceMonitor.recordMetric('app_ready', {\n//   timestamp: Date.now(),\n//   loadTime: performance.now(),\n//   memoryUsage: performance.memory ? {\n//     used: performance.memory.usedJSHeapSize,\n//     total: performance.memory.totalJSHeapSize,\n//     limit: performance.memory.jsHeapSizeLimit\n//   } : null\n// });\n// src/index.js\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Get the root element\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n// Render the app\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 215,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","createRoot","App","reportWebVitals","jsxDEV","_jsxDEV","container","document","getElementById","root","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/index.js"],"sourcesContent":["// // src/index.js\n// import React from 'react';\n// import { createRoot } from 'react-dom/client';\n// import App from './App';\n\n// // Performance monitoring\n// import { performanceMonitor } from './utils/performanceMonitor';\n// import reportWebVitals from './reportWebVitals';\n\n// // Global styles\n// import './styles/globals.css';\n// import './styles/animations.css';\n// import './styles/components.css';\n// import './styles/dashboard.css';\n// import './styles/variables';\n// import './styles/robotStatus';\n\n// // Initialize performance monitoring\n// performanceMonitor.recordMetric('app_initialization', {\n//   timestamp: Date.now(),\n//   userAgent: navigator.userAgent,\n//   viewport: {\n//     width: window.innerWidth,\n//     height: window.innerHeight\n//   },\n//   connection: navigator.connection ? {\n//     effectiveType: navigator.connection.effectiveType,\n//     downlink: navigator.connection.downlink,\n//     rtt: navigator.connection.rtt\n//   } : null\n// });\n\n// // Get the root element\n// const container = document.getElementById('root');\n// // Check if root element exists\n// if (!container) {\n//   throw new Error('Root element not found. Make sure you have a div with id=\"root\" in your HTML.');\n// }\n\n// // Create root and render app\n// const root = createRoot(container);\n\n// // Development mode checks\n// if (process.env.NODE_ENV === 'development') {\n//   // Enable React DevTools profiler\n//   if (typeof window !== 'undefined') {\n//     window.__REACT_DEVTOOLS_GLOBAL_HOOK__?.onCommitFiberRoot;\n//   }\n  \n//   // Log environment variables for debugging\n//   console.log('🚀 Development Mode Enabled');\n//   console.log('Environment Variables:', {\n//     API_URL: process.env.REACT_APP_API_URL,\n//     HARDWARE_BRIDGE_URL: process.env.REACT_APP_HARDWARE_BRIDGE_URL,\n//     ENABLE_HARDWARE: process.env.REACT_APP_ENABLE_HARDWARE,\n//     VERSION: process.env.REACT_APP_VERSION\n//   });\n// }\n\n// // Render the application\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n\n// // Performance monitoring and web vitals\n// const sendToAnalytics = (metric) => {\n//   // Log to console in development\n//   if (process.env.NODE_ENV === 'development') {\n//     console.log('📊 Web Vital:', metric);\n//   }\n  \n//   // Send to performance monitoring service\n//   performanceMonitor.recordMetric('web_vital', {\n//     name: metric.name,\n//     value: metric.value,\n//     rating: metric.rating,\n//     delta: metric.delta,\n//     timestamp: Date.now()\n//   });\n  \n//   // Send to analytics service in production\n//   if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ANALYTICS_ID) {\n//     try {\n//       // Example: Send to Google Analytics 4\n//       if (window.gtag) {\n//         window.gtag('event', metric.name, {\n//           event_category: 'Web Vitals',\n//           event_label: metric.id,\n//           value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n//           non_interaction: true\n//         });\n//       }\n      \n//       // Example: Send to custom analytics endpoint\n//       fetch('/api/v1/analytics/web-vitals', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({\n//           metric,\n//           timestamp: Date.now(),\n//           userAgent: navigator.userAgent,\n//           url: window.location.href\n//         })\n//       }).catch(error => {\n//         console.warn('Failed to send web vitals to analytics:', error);\n//       });\n//     } catch (error) {\n//       console.warn('Analytics error:', error);\n//     }\n//   }\n// };\n\n// // Start web vitals monitoring\n// reportWebVitals(sendToAnalytics);\n\n// // Global error handlers for unhandled promises and errors\n// window.addEventListener('unhandledrejection', (event) => {\n//   console.error('Unhandled promise rejection:', event.reason);\n  \n//   performanceMonitor.recordMetric('unhandled_rejection', {\n//     reason: event.reason?.toString() || 'Unknown',\n//     stack: event.reason?.stack || 'No stack trace',\n//     timestamp: Date.now()\n//   });\n  \n//   // Don't prevent default to allow normal error handling\n// });\n\n// window.addEventListener('error', (event) => {\n//   console.error('Global error:', event.error);\n  \n//   performanceMonitor.recordMetric('global_error', {\n//     message: event.message,\n//     filename: event.filename,\n//     lineno: event.lineno,\n//     colno: event.colno,\n//     stack: event.error?.stack || 'No stack trace',\n//     timestamp: Date.now()\n//   });\n// });\n\n// // Monitor page visibility for analytics\n// document.addEventListener('visibilitychange', () => {\n//   performanceMonitor.recordMetric('visibility_change', {\n//     hidden: document.hidden,\n//     timestamp: Date.now()\n//   });\n// });\n\n// // Monitor online/offline status\n// window.addEventListener('online', () => {\n//   performanceMonitor.recordMetric('connection_change', {\n//     online: true,\n//     timestamp: Date.now()\n//   });\n  \n//   console.log('🌐 Connection restored');\n// });\n\n// window.addEventListener('offline', () => {\n//   performanceMonitor.recordMetric('connection_change', {\n//     online: false,\n//     timestamp: Date.now()\n//   });\n  \n//   console.log('🌐 Connection lost');\n// });\n\n// // Development hot module replacement\n// if (process.env.NODE_ENV === 'development' && module.hot) {\n//   module.hot.accept('./App', () => {\n//     const NextApp = require('./App').default;\n//     root.render(\n//       <React.StrictMode>\n//         <NextApp />\n//       </React.StrictMode>\n//     );\n//   });\n// }\n\n// // Log successful application start\n// console.log(`🤖 Robotics Challenge App started successfully`);\n// console.log(`📊 Performance monitoring enabled`);\n// console.log(`🔧 Environment: ${process.env.NODE_ENV}`);\n\n// if (process.env.REACT_APP_VERSION) {\n//   console.log(`📦 Version: ${process.env.REACT_APP_VERSION}`);\n// }\n\n// // Initialize app-specific performance tracking\n// performanceMonitor.recordMetric('app_ready', {\n//   timestamp: Date.now(),\n//   loadTime: performance.now(),\n//   memoryUsage: performance.memory ? {\n//     used: performance.memory.usedJSHeapSize,\n//     total: performance.memory.totalJSHeapSize,\n//     limit: performance.memory.jsHeapSizeLimit\n//   } : null\n// });\n// src/index.js\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Get the root element\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n// Render the app\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,MAAMC,IAAI,GAAGR,UAAU,CAACK,SAAS,CAAC;;AAElC;AACAG,IAAI,CAACC,MAAM,cACTL,OAAA,CAACL,KAAK,CAACW,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACH,GAAG;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACAb,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\dashboard\\\\DashboardProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// =================== DashboardProvider.jsx ===================\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchChallenges } from '../../store/challengeSlice';\nimport { useWebSocket } from '../../hooks/useWebSocket';\n\n// Dashboard Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardContext = /*#__PURE__*/createContext();\n\n// Dashboard state reducer\nconst dashboardReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_REFRESH_TIMESTAMP':\n      return {\n        ...state,\n        lastRefresh: action.payload\n      };\n    case 'SET_AUTO_REFRESH':\n      return {\n        ...state,\n        autoRefresh: action.payload\n      };\n    case 'SET_NOTIFICATION':\n      return {\n        ...state,\n        notification: action.payload\n      };\n    case 'CLEAR_NOTIFICATION':\n      return {\n        ...state,\n        notification: null\n      };\n    case 'UPDATE_LIVE_DATA':\n      return {\n        ...state,\n        liveData: {\n          ...state.liveData,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial dashboard state\nconst initialState = {\n  loading: false,\n  error: null,\n  lastRefresh: new Date(),\n  autoRefresh: true,\n  notification: null,\n  liveData: {\n    robotHeartbeat: null,\n    activeUsers: 0,\n    systemStatus: 'unknown'\n  }\n};\n\n// Dashboard Provider Component\nexport const DashboardProvider = ({\n  children\n}) => {\n  _s();\n  const [dashboardState, dashboardDispatch] = useReducer(dashboardReducer, initialState);\n  const reduxDispatch = useDispatch();\n  const {\n    challenges,\n    loading: challengesLoading\n  } = useSelector(state => state.challenges);\n  const {\n    connected: robotConnected\n  } = useSelector(state => state.robot);\n  const {\n    subscribeToUpdates,\n    isConnected\n  } = useWebSocket();\n\n  // Auto-refresh logic\n  useEffect(() => {\n    if (dashboardState.autoRefresh) {\n      const interval = setInterval(() => {\n        refreshDashboard();\n      }, 30000); // Refresh every 30 seconds\n\n      return () => clearInterval(interval);\n    }\n  }, [dashboardState.autoRefresh]);\n\n  // WebSocket subscription for live updates\n  useEffect(() => {\n    if (isConnected) {\n      const unsubscribe = subscribeToUpdates(data => {\n        dashboardDispatch({\n          type: 'UPDATE_LIVE_DATA',\n          payload: {\n            robotHeartbeat: data.robotHeartbeat,\n            activeUsers: data.activeUsers,\n            systemStatus: data.systemStatus\n          }\n        });\n      });\n      return unsubscribe;\n    }\n  }, [isConnected, subscribeToUpdates]);\n\n  // Dashboard actions\n  const refreshDashboard = async () => {\n    try {\n      dashboardDispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      await reduxDispatch(fetchChallenges()).unwrap();\n      dashboardDispatch({\n        type: 'SET_REFRESH_TIMESTAMP',\n        payload: new Date()\n      });\n      dashboardDispatch({\n        type: 'SET_ERROR',\n        payload: null\n      });\n    } catch (error) {\n      dashboardDispatch({\n        type: 'SET_ERROR',\n        payload: error.message\n      });\n    } finally {\n      dashboardDispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    }\n  };\n  const showNotification = (message, type = 'info') => {\n    dashboardDispatch({\n      type: 'SET_NOTIFICATION',\n      payload: {\n        message,\n        type,\n        timestamp: new Date()\n      }\n    });\n\n    // Auto-clear notification after 5 seconds\n    setTimeout(() => {\n      dashboardDispatch({\n        type: 'CLEAR_NOTIFICATION'\n      });\n    }, 5000);\n  };\n  const toggleAutoRefresh = () => {\n    dashboardDispatch({\n      type: 'SET_AUTO_REFRESH',\n      payload: !dashboardState.autoRefresh\n    });\n  };\n  const clearError = () => {\n    dashboardDispatch({\n      type: 'SET_ERROR',\n      payload: null\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    // State\n    ...dashboardState,\n    challengesLoading,\n    robotConnected,\n    challenges,\n    // Actions\n    refreshDashboard,\n    showNotification,\n    toggleAutoRefresh,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use dashboard context\n_s(DashboardProvider, \"EHutl8JoY+kAHnrleFU9S5xxDzk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useWebSocket];\n});\n_c = DashboardProvider;\nexport const useDashboard = () => {\n  _s2();\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error('useDashboard must be used within a DashboardProvider');\n  }\n  return context;\n};\n_s2(useDashboard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DashboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useSelector","useDispatch","fetchChallenges","useWebSocket","jsxDEV","_jsxDEV","DashboardContext","dashboardReducer","state","action","type","loading","payload","error","lastRefresh","autoRefresh","notification","liveData","initialState","Date","robotHeartbeat","activeUsers","systemStatus","DashboardProvider","children","_s","dashboardState","dashboardDispatch","reduxDispatch","challenges","challengesLoading","connected","robotConnected","robot","subscribeToUpdates","isConnected","interval","setInterval","refreshDashboard","clearInterval","unsubscribe","data","unwrap","message","showNotification","timestamp","setTimeout","toggleAutoRefresh","clearError","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useDashboard","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/dashboard/DashboardProvider.jsx"],"sourcesContent":["// =================== DashboardProvider.jsx ===================\r\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchChallenges } from '../../store/challengeSlice';\r\nimport { useWebSocket } from '../../hooks/useWebSocket';\r\n\r\n// Dashboard Context\r\nconst DashboardContext = createContext();\r\n\r\n// Dashboard state reducer\r\nconst dashboardReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_REFRESH_TIMESTAMP':\r\n      return { ...state, lastRefresh: action.payload };\r\n    case 'SET_AUTO_REFRESH':\r\n      return { ...state, autoRefresh: action.payload };\r\n    case 'SET_NOTIFICATION':\r\n      return { ...state, notification: action.payload };\r\n    case 'CLEAR_NOTIFICATION':\r\n      return { ...state, notification: null };\r\n    case 'UPDATE_LIVE_DATA':\r\n      return { ...state, liveData: { ...state.liveData, ...action.payload } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Initial dashboard state\r\nconst initialState = {\r\n  loading: false,\r\n  error: null,\r\n  lastRefresh: new Date(),\r\n  autoRefresh: true,\r\n  notification: null,\r\n  liveData: {\r\n    robotHeartbeat: null,\r\n    activeUsers: 0,\r\n    systemStatus: 'unknown'\r\n  }\r\n};\r\n\r\n// Dashboard Provider Component\r\nexport const DashboardProvider = ({ children }) => {\r\n  const [dashboardState, dashboardDispatch] = useReducer(dashboardReducer, initialState);\r\n  const reduxDispatch = useDispatch();\r\n  const { challenges, loading: challengesLoading } = useSelector(state => state.challenges);\r\n  const { connected: robotConnected } = useSelector(state => state.robot);\r\n  const { subscribeToUpdates, isConnected } = useWebSocket();\r\n\r\n  // Auto-refresh logic\r\n  useEffect(() => {\r\n    if (dashboardState.autoRefresh) {\r\n      const interval = setInterval(() => {\r\n        refreshDashboard();\r\n      }, 30000); // Refresh every 30 seconds\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [dashboardState.autoRefresh]);\r\n\r\n  // WebSocket subscription for live updates\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      const unsubscribe = subscribeToUpdates((data) => {\r\n        dashboardDispatch({\r\n          type: 'UPDATE_LIVE_DATA',\r\n          payload: {\r\n            robotHeartbeat: data.robotHeartbeat,\r\n            activeUsers: data.activeUsers,\r\n            systemStatus: data.systemStatus\r\n          }\r\n        });\r\n      });\r\n\r\n      return unsubscribe;\r\n    }\r\n  }, [isConnected, subscribeToUpdates]);\r\n\r\n  // Dashboard actions\r\n  const refreshDashboard = async () => {\r\n    try {\r\n      dashboardDispatch({ type: 'SET_LOADING', payload: true });\r\n      await reduxDispatch(fetchChallenges()).unwrap();\r\n      dashboardDispatch({ type: 'SET_REFRESH_TIMESTAMP', payload: new Date() });\r\n      dashboardDispatch({ type: 'SET_ERROR', payload: null });\r\n    } catch (error) {\r\n      dashboardDispatch({ type: 'SET_ERROR', payload: error.message });\r\n    } finally {\r\n      dashboardDispatch({ type: 'SET_LOADING', payload: false });\r\n    }\r\n  };\r\n\r\n  const showNotification = (message, type = 'info') => {\r\n    dashboardDispatch({\r\n      type: 'SET_NOTIFICATION',\r\n      payload: { message, type, timestamp: new Date() }\r\n    });\r\n\r\n    // Auto-clear notification after 5 seconds\r\n    setTimeout(() => {\r\n      dashboardDispatch({ type: 'CLEAR_NOTIFICATION' });\r\n    }, 5000);\r\n  };\r\n\r\n  const toggleAutoRefresh = () => {\r\n    dashboardDispatch({\r\n      type: 'SET_AUTO_REFRESH',\r\n      payload: !dashboardState.autoRefresh\r\n    });\r\n  };\r\n\r\n  const clearError = () => {\r\n    dashboardDispatch({ type: 'SET_ERROR', payload: null });\r\n  };\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // State\r\n    ...dashboardState,\r\n    challengesLoading,\r\n    robotConnected,\r\n    challenges,\r\n    \r\n    // Actions\r\n    refreshDashboard,\r\n    showNotification,\r\n    toggleAutoRefresh,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <DashboardContext.Provider value={contextValue}>\r\n      {children}\r\n    </DashboardContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook to use dashboard context\r\nexport const useDashboard = () => {\r\n  const context = useContext(DashboardContext);\r\n  if (!context) {\r\n    throw new Error('useDashboard must be used within a DashboardProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
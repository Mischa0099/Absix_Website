{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk('robot/connect', async () => {\n  // Simulate connection\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  return {\n    connected: true,\n    message: 'Robot connected successfully'\n  };\n});\nexport const disconnectRobot = createAsyncThunk('robot/disconnect', async () => {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return {\n    connected: false,\n    message: 'Robot disconnected'\n  };\n});\nexport const fetchRobotStatus = createAsyncThunk('robot/fetchStatus', async () => {\n  await new Promise(resolve => setTimeout(resolve, 500));\n  return {\n    connected: Math.random() > 0.5,\n    jointAngles: [0, 0, 0],\n    safetyStatus: {\n      safe: true,\n      status: 'nominal'\n    }\n  };\n});\nconst initialState = {\n  connected: false,\n  connectionStatus: 'disconnected',\n  jointAngles: [0, 0, 0],\n  safetyStatus: {\n    safe: true,\n    status: 'unknown'\n  },\n  loading: false,\n  error: null\n};\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.connected = action.payload === 'connected';\n    },\n    updateRobotState: (state, action) => {\n      const data = action.payload;\n      if (data.connected !== undefined) {\n        state.connected = data.connected;\n        state.connectionStatus = data.connected ? 'connected' : 'disconnected';\n      }\n      if (data.jointAngles) {\n        state.jointAngles = data.jointAngles;\n      }\n      if (data.safetyStatus) {\n        state.safetyStatus = data.safetyStatus;\n      }\n    },\n    setRobotError: (state, action) => {\n      state.error = action.payload;\n    },\n    clearRobotError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(connectRobot.pending, state => {\n      state.loading = true;\n      state.connectionStatus = 'connecting';\n    }).addCase(connectRobot.fulfilled, state => {\n      state.loading = false;\n      state.connected = true;\n      state.connectionStatus = 'connected';\n    }).addCase(connectRobot.rejected, (state, action) => {\n      state.loading = false;\n      state.connected = false;\n      state.connectionStatus = 'disconnected';\n      state.error = action.error.message;\n    }).addCase(disconnectRobot.fulfilled, state => {\n      state.connected = false;\n      state.connectionStatus = 'disconnected';\n    }).addCase(fetchRobotStatus.fulfilled, (state, action) => {\n      state.connected = action.payload.connected;\n      state.jointAngles = action.payload.jointAngles;\n      state.safetyStatus = action.payload.safetyStatus;\n    });\n  }\n});\nexport const {\n  setConnectionStatus,\n  updateRobotState,\n  setRobotError,\n  clearRobotError\n} = robotSlice.actions;\nexport default robotSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","connectRobot","Promise","resolve","setTimeout","connected","message","disconnectRobot","fetchRobotStatus","Math","random","jointAngles","safetyStatus","safe","status","initialState","connectionStatus","loading","error","robotSlice","name","reducers","setConnectionStatus","state","action","payload","updateRobotState","data","undefined","setRobotError","clearRobotError","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/robotSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk(\n  'robot/connect',\n  async () => {\n    // Simulate connection\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    return { connected: true, message: 'Robot connected successfully' };\n  }\n);\n\nexport const disconnectRobot = createAsyncThunk(\n  'robot/disconnect',\n  async () => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return { connected: false, message: 'Robot disconnected' };\n  }\n);\n\nexport const fetchRobotStatus = createAsyncThunk(\n  'robot/fetchStatus',\n  async () => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      connected: Math.random() > 0.5,\n      jointAngles: [0, 0, 0],\n      safetyStatus: { safe: true, status: 'nominal' }\n    };\n  }\n);\n\nconst initialState = {\n  connected: false,\n  connectionStatus: 'disconnected',\n  jointAngles: [0, 0, 0],\n  safetyStatus: { safe: true, status: 'unknown' },\n  loading: false,\n  error: null,\n};\n\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.connected = action.payload === 'connected';\n    },\n    updateRobotState: (state, action) => {\n      const data = action.payload;\n      if (data.connected !== undefined) {\n        state.connected = data.connected;\n        state.connectionStatus = data.connected ? 'connected' : 'disconnected';\n      }\n      if (data.jointAngles) {\n        state.jointAngles = data.jointAngles;\n      }\n      if (data.safetyStatus) {\n        state.safetyStatus = data.safetyStatus;\n      }\n    },\n    setRobotError: (state, action) => {\n      state.error = action.payload;\n    },\n    clearRobotError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(connectRobot.pending, (state) => {\n        state.loading = true;\n        state.connectionStatus = 'connecting';\n      })\n      .addCase(connectRobot.fulfilled, (state) => {\n        state.loading = false;\n        state.connected = true;\n        state.connectionStatus = 'connected';\n      })\n      .addCase(connectRobot.rejected, (state, action) => {\n        state.loading = false;\n        state.connected = false;\n        state.connectionStatus = 'disconnected';\n        state.error = action.error.message;\n      })\n      .addCase(disconnectRobot.fulfilled, (state) => {\n        state.connected = false;\n        state.connectionStatus = 'disconnected';\n      })\n      .addCase(fetchRobotStatus.fulfilled, (state, action) => {\n        state.connected = action.payload.connected;\n        state.jointAngles = action.payload.jointAngles;\n        state.safetyStatus = action.payload.safetyStatus;\n      });\n  },\n});\n\nexport const { \n  setConnectionStatus, \n  updateRobotState, \n  setRobotError, \n  clearRobotError \n} = robotSlice.actions;\n\nexport default robotSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
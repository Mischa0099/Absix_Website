{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\robot\\\\RobotVisualizer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RobotVisualizer = ({\n  currentAngles = [0, 0, 0],\n  targetAngles = null,\n  showTarget = false,\n  className = \"\",\n  width = 400,\n  height = 300\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Robot arm properties\n    const linkLengths = [80, 56, 40];\n    const baseX = canvas.width / 2;\n    const baseY = canvas.height - 50;\n\n    // Draw base\n    ctx.fillStyle = '#444444';\n    ctx.fillRect(baseX - 20, baseY, 40, 20);\n\n    // Draw target arm if enabled\n    if (showTarget && targetAngles) {\n      drawArm(ctx, baseX, baseY, targetAngles, linkLengths, true);\n    }\n\n    // Draw current arm\n    drawArm(ctx, baseX, baseY, currentAngles, linkLengths, false);\n  }, [currentAngles, targetAngles, showTarget, width, height]);\n  const drawArm = (ctx, baseX, baseY, angles, linkLengths, isTarget) => {\n    const colors = isTarget ? ['rgba(255, 183, 77, 0.6)', 'rgba(255, 167, 38, 0.6)', 'rgba(255, 152, 0, 0.6)'] : ['#64B5F6', '#42A5F5', '#2196F3'];\n    const jointColors = isTarget ? ['rgba(251, 140, 0, 0.6)', 'rgba(245, 124, 0, 0.6)', 'rgba(239, 108, 0, 0.6)'] : ['#1E88E5', '#1976D2', '#1565C0'];\n    const lineWidth = isTarget ? 2 : 3;\n    const jointRadius = isTarget ? 6 : 8;\n\n    // Convert angles to radians and calculate joint positions\n    const angleRad = angles.map(angle => angle * Math.PI / 180);\n    const positions = [[baseX, baseY]];\n\n    // Calculate cumulative positions\n    let currentAngle = 0;\n    for (let i = 0; i < 3; i++) {\n      currentAngle += angleRad[i];\n      const x = positions[i][0] + linkLengths[i] * Math.cos(currentAngle);\n      const y = positions[i][1] - linkLengths[i] * Math.sin(currentAngle);\n      positions.push([x, y]);\n    }\n\n    // Draw links\n    for (let i = 0; i < 3; i++) {\n      ctx.strokeStyle = colors[i];\n      ctx.lineWidth = lineWidth;\n      ctx.beginPath();\n      ctx.moveTo(positions[i][0], positions[i][1]);\n      ctx.lineTo(positions[i + 1][0], positions[i + 1][1]);\n      ctx.stroke();\n\n      // Draw joint\n      ctx.fillStyle = jointColors[i];\n      ctx.strokeStyle = '#000000';\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.arc(positions[i][0], positions[i][1], jointRadius, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.stroke();\n    }\n\n    // Draw end effector\n    ctx.fillStyle = jointColors[2];\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n    ctx.arc(positions[3][0], positions[3][1], jointRadius, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        border: '1px solid #ccc',\n        borderRadius: '8px',\n        backgroundColor: '#f5f5f5',\n        width: '100%',\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(RobotVisualizer, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = RobotVisualizer;\nexport default RobotVisualizer;\nvar _c;\n$RefreshReg$(_c, \"RobotVisualizer\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","RobotVisualizer","currentAngles","targetAngles","showTarget","className","width","height","_s","canvasRef","canvas","current","ctx","getContext","clearRect","linkLengths","baseX","baseY","fillStyle","fillRect","drawArm","angles","isTarget","colors","jointColors","lineWidth","jointRadius","angleRad","map","angle","Math","PI","positions","currentAngle","i","x","cos","y","sin","push","strokeStyle","beginPath","moveTo","lineTo","stroke","arc","fill","children","ref","style","border","borderRadius","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/robot/RobotVisualizer.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nconst RobotVisualizer = ({ \r\n  currentAngles = [0, 0, 0], \r\n  targetAngles = null, \r\n  showTarget = false,\r\n  className = \"\",\r\n  width = 400,\r\n  height = 300\r\n}) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // Set canvas size\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Robot arm properties\r\n    const linkLengths = [80, 56, 40];\r\n    const baseX = canvas.width / 2;\r\n    const baseY = canvas.height - 50;\r\n\r\n    // Draw base\r\n    ctx.fillStyle = '#444444';\r\n    ctx.fillRect(baseX - 20, baseY, 40, 20);\r\n\r\n    // Draw target arm if enabled\r\n    if (showTarget && targetAngles) {\r\n      drawArm(ctx, baseX, baseY, targetAngles, linkLengths, true);\r\n    }\r\n\r\n    // Draw current arm\r\n    drawArm(ctx, baseX, baseY, currentAngles, linkLengths, false);\r\n\r\n  }, [currentAngles, targetAngles, showTarget, width, height]);\r\n\r\n  const drawArm = (ctx, baseX, baseY, angles, linkLengths, isTarget) => {\r\n    const colors = isTarget \r\n      ? ['rgba(255, 183, 77, 0.6)', 'rgba(255, 167, 38, 0.6)', 'rgba(255, 152, 0, 0.6)']\r\n      : ['#64B5F6', '#42A5F5', '#2196F3'];\r\n    \r\n    const jointColors = isTarget\r\n      ? ['rgba(251, 140, 0, 0.6)', 'rgba(245, 124, 0, 0.6)', 'rgba(239, 108, 0, 0.6)']\r\n      : ['#1E88E5', '#1976D2', '#1565C0'];\r\n\r\n    const lineWidth = isTarget ? 2 : 3;\r\n    const jointRadius = isTarget ? 6 : 8;\r\n\r\n    // Convert angles to radians and calculate joint positions\r\n    const angleRad = angles.map(angle => angle * Math.PI / 180);\r\n    const positions = [[baseX, baseY]];\r\n\r\n    // Calculate cumulative positions\r\n    let currentAngle = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      currentAngle += angleRad[i];\r\n      const x = positions[i][0] + linkLengths[i] * Math.cos(currentAngle);\r\n      const y = positions[i][1] - linkLengths[i] * Math.sin(currentAngle);\r\n      positions.push([x, y]);\r\n    }\r\n\r\n    // Draw links\r\n    for (let i = 0; i < 3; i++) {\r\n      ctx.strokeStyle = colors[i];\r\n      ctx.lineWidth = lineWidth;\r\n      ctx.beginPath();\r\n      ctx.moveTo(positions[i][0], positions[i][1]);\r\n      ctx.lineTo(positions[i + 1][0], positions[i + 1][1]);\r\n      ctx.stroke();\r\n\r\n      // Draw joint\r\n      ctx.fillStyle = jointColors[i];\r\n      ctx.strokeStyle = '#000000';\r\n      ctx.lineWidth = 1;\r\n      ctx.beginPath();\r\n      ctx.arc(positions[i][0], positions[i][1], jointRadius, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Draw end effector\r\n    ctx.fillStyle = jointColors[2];\r\n    ctx.strokeStyle = '#000000';\r\n    ctx.lineWidth = 1;\r\n    ctx.beginPath();\r\n    ctx.arc(positions[3][0], positions[3][1], jointRadius, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.stroke();\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <canvas\r\n        ref={canvasRef}\r\n        style={{\r\n          border: '1px solid #ccc',\r\n          borderRadius: '8px',\r\n          backgroundColor: '#f5f5f5',\r\n          width: '100%',\r\n          height: 'auto'\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RobotVisualizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
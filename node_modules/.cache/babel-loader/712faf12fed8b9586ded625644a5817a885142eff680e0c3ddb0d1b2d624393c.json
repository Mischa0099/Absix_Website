{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\challenges\\\\ManualMovementChallenge.jsx\",\n  _s = $RefreshSig$();\n// src/components/challenges/ManualMovementChallenge.jsx\nimport React, { useState, useEffect } from 'react';\nimport { Box, Paper, Typography, Button, Grid, Alert } from '@mui/material';\nimport { ArrowUpward, ArrowDownward, ArrowBack, ArrowForward, RotateLeft, RotateRight } from '@mui/icons-material';\nimport { useSelector } from 'react-redux';\nimport RobotVisualizer from './RobotVisualizer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManualMovementChallenge = ({\n  onComplete\n}) => {\n  _s();\n  const {\n    isConnected,\n    position,\n    status\n  } = useSelector(state => state.robot);\n  const [moveCount, setMoveCount] = useState(0);\n  const [targetReached, setTargetReached] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const targetPosition = {\n    x: 5,\n    y: 5,\n    rotation: 0\n  };\n  useEffect(() => {\n    if (!startTime && moveCount > 0) {\n      setStartTime(Date.now());\n    }\n  }, [moveCount, startTime]);\n  useEffect(() => {\n    // Check if target position is reached\n    const isAtTarget = Math.abs(position.x - targetPosition.x) < 0.5 && Math.abs(position.y - targetPosition.y) < 0.5;\n    if (isAtTarget && !targetReached && moveCount > 0) {\n      setTargetReached(true);\n      const completionTime = Date.now() - startTime;\n      const efficiency = Math.max(100 - moveCount * 2, 10);\n      onComplete({\n        success: true,\n        moveCount,\n        timeElapsed: Math.floor(completionTime / 1000),\n        efficiency,\n        score: Math.floor(efficiency * (3000 / completionTime))\n      });\n    }\n  }, [position, targetReached, moveCount, startTime, onComplete]);\n  const moveRobot = async direction => {\n    if (!isConnected) return;\n    setMoveCount(prev => prev + 1);\n\n    // Here you would send actual commands to the robot\n    console.log(`Moving robot: ${direction}`);\n\n    // Simulate robot movement for demo\n    // In real implementation, this would interface with robot hardware\n  };\n  const movementButtons = [{\n    label: 'Forward',\n    icon: ArrowUpward,\n    action: () => moveRobot('forward')\n  }, {\n    label: 'Backward',\n    icon: ArrowDownward,\n    action: () => moveRobot('backward')\n  }, {\n    label: 'Left',\n    icon: ArrowBack,\n    action: () => moveRobot('left')\n  }, {\n    label: 'Right',\n    icon: ArrowForward,\n    action: () => moveRobot('right')\n  }, {\n    label: 'Rotate Left',\n    icon: RotateLeft,\n    action: () => moveRobot('rotate_left')\n  }, {\n    label: 'Rotate Right',\n    icon: RotateRight,\n    action: () => moveRobot('rotate_right')\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        p: 3,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Manual Movement Challenge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        paragraph: true,\n        children: \"Use the movement controls to guide your robot to the target position (5, 5). Try to reach the target with the fewest moves possible!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), !isConnected && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"warning\",\n        sx: {\n          mb: 2\n        },\n        children: \"Robot is not connected. Please check your connection.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        gap: 4,\n        mb: 3,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"Moves: \", moveCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"Current: (\", position.x.toFixed(1), \", \", position.y.toFixed(1), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: [\"Target: (\", targetPosition.x, \", \", targetPosition.y, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), targetReached && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"success\",\n        sx: {\n          mb: 2\n        },\n        children: \"Congratulations! You've reached the target position!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 2,\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Robot Controls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 2,\n            children: movementButtons.map((button, index) => {\n              const Icon = button.icon;\n              return /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 6,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  fullWidth: true,\n                  startIcon: /*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 34\n                  }, this),\n                  onClick: button.action,\n                  disabled: !isConnected || targetReached,\n                  sx: {\n                    py: 2\n                  },\n                  children: button.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 21\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(RobotVisualizer, {\n          challengeType: \"manual\",\n          targetPosition: targetPosition,\n          showTarget: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(ManualMovementChallenge, \"60Zmfc0AY491pLYooBhBCwRGzMg=\", false, function () {\n  return [useSelector];\n});\n_c = ManualMovementChallenge;\nexport default ManualMovementChallenge;\nvar _c;\n$RefreshReg$(_c, \"ManualMovementChallenge\");","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Typography","Button","Grid","Alert","ArrowUpward","ArrowDownward","ArrowBack","ArrowForward","RotateLeft","RotateRight","useSelector","RobotVisualizer","jsxDEV","_jsxDEV","ManualMovementChallenge","onComplete","_s","isConnected","position","status","state","robot","moveCount","setMoveCount","targetReached","setTargetReached","startTime","setStartTime","targetPosition","x","y","rotation","Date","now","isAtTarget","Math","abs","completionTime","efficiency","max","success","timeElapsed","floor","score","moveRobot","direction","prev","console","log","movementButtons","label","icon","action","sx","p","children","elevation","mb","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","paragraph","severity","display","gap","toFixed","container","spacing","item","xs","md","map","button","index","Icon","color","fullWidth","startIcon","onClick","disabled","py","challengeType","showTarget","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/challenges/ManualMovementChallenge.jsx"],"sourcesContent":["// src/components/challenges/ManualMovementChallenge.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Box, Paper, Typography, Button, Grid, Alert } from '@mui/material';\r\nimport { ArrowUpward, ArrowDownward, ArrowBack, ArrowForward, RotateLeft, RotateRight } from '@mui/icons-material';\r\nimport { useSelector } from 'react-redux';\r\nimport RobotVisualizer from './RobotVisualizer';\r\n\r\nconst ManualMovementChallenge = ({ onComplete }) => {\r\n  const { isConnected, position, status } = useSelector(state => state.robot);\r\n  const [moveCount, setMoveCount] = useState(0);\r\n  const [targetReached, setTargetReached] = useState(false);\r\n  const [startTime, setStartTime] = useState(null);\r\n\r\n  const targetPosition = { x: 5, y: 5, rotation: 0 };\r\n\r\n  useEffect(() => {\r\n    if (!startTime && moveCount > 0) {\r\n      setStartTime(Date.now());\r\n    }\r\n  }, [moveCount, startTime]);\r\n\r\n  useEffect(() => {\r\n    // Check if target position is reached\r\n    const isAtTarget = Math.abs(position.x - targetPosition.x) < 0.5 &&\r\n                      Math.abs(position.y - targetPosition.y) < 0.5;\r\n    \r\n    if (isAtTarget && !targetReached && moveCount > 0) {\r\n      setTargetReached(true);\r\n      const completionTime = Date.now() - startTime;\r\n      const efficiency = Math.max(100 - moveCount * 2, 10);\r\n      \r\n      onComplete({\r\n        success: true,\r\n        moveCount,\r\n        timeElapsed: Math.floor(completionTime / 1000),\r\n        efficiency,\r\n        score: Math.floor(efficiency * (3000 / completionTime))\r\n      });\r\n    }\r\n  }, [position, targetReached, moveCount, startTime, onComplete]);\r\n\r\n  const moveRobot = async (direction) => {\r\n    if (!isConnected) return;\r\n    \r\n    setMoveCount(prev => prev + 1);\r\n    \r\n    // Here you would send actual commands to the robot\r\n    console.log(`Moving robot: ${direction}`);\r\n    \r\n    // Simulate robot movement for demo\r\n    // In real implementation, this would interface with robot hardware\r\n  };\r\n\r\n  const movementButtons = [\r\n    { label: 'Forward', icon: ArrowUpward, action: () => moveRobot('forward') },\r\n    { label: 'Backward', icon: ArrowDownward, action: () => moveRobot('backward') },\r\n    { label: 'Left', icon: ArrowBack, action: () => moveRobot('left') },\r\n    { label: 'Right', icon: ArrowForward, action: () => moveRobot('right') },\r\n    { label: 'Rotate Left', icon: RotateLeft, action: () => moveRobot('rotate_left') },\r\n    { label: 'Rotate Right', icon: RotateRight, action: () => moveRobot('rotate_right') }\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Paper elevation={3} sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Manual Movement Challenge\r\n        </Typography>\r\n        \r\n        <Typography variant=\"body1\" paragraph>\r\n          Use the movement controls to guide your robot to the target position (5, 5). \r\n          Try to reach the target with the fewest moves possible!\r\n        </Typography>\r\n\r\n        {!isConnected && (\r\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\r\n            Robot is not connected. Please check your connection.\r\n          </Alert>\r\n        )}\r\n\r\n        <Box display=\"flex\" gap={4} mb={3}>\r\n          <Typography variant=\"h6\">\r\n            Moves: {moveCount}\r\n          </Typography>\r\n          <Typography variant=\"h6\">\r\n            Current: ({position.x.toFixed(1)}, {position.y.toFixed(1)})\r\n          </Typography>\r\n          <Typography variant=\"h6\">\r\n            Target: ({targetPosition.x}, {targetPosition.y})\r\n          </Typography>\r\n        </Box>\r\n\r\n        {targetReached && (\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            Congratulations! You've reached the target position!\r\n          </Alert>\r\n        )}\r\n      </Paper>\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <Paper elevation={2} sx={{ p: 2 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Robot Controls\r\n            </Typography>\r\n            \r\n            <Grid container spacing={2}>\r\n              {movementButtons.map((button, index) => {\r\n                const Icon = button.icon;\r\n                return (\r\n                  <Grid item xs={6} key={index}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      fullWidth\r\n                      startIcon={<Icon />}\r\n                      onClick={button.action}\r\n                      disabled={!isConnected || targetReached}\r\n                      sx={{ py: 2 }}\r\n                    >\r\n                      {button.label}\r\n                    </Button>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={6}>\r\n          <RobotVisualizer \r\n            challengeType=\"manual\"\r\n            targetPosition={targetPosition}\r\n            showTarget={true}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ManualMovementChallenge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
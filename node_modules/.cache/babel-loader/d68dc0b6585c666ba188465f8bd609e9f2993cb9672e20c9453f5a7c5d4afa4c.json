{"ast":null,"code":"// src/challenges/challengeRegistry.js\n\n// Import all challenge components\nimport Challenge1 from './Challenge1';\n// import Challenge2 from './Challenge2';\n// import Challenge3 from './Challenge3';\n// Add new challenges here as you create them\n\n/**\r\n * Challenge Registry - Add new challenges here\r\n * \r\n * To add a new challenge:\r\n * 1. Create your challenge component in this folder (e.g., Challenge4.jsx)\r\n * 2. Import it above\r\n * 3. Add an entry to the CHALLENGE_COMPONENTS object below\r\n * 4. That's it! The system will automatically handle routing and display\r\n */\n\nexport const CHALLENGE_COMPONENTS = {\n  'C1': {\n    component: Challenge1,\n    title: 'Robot Configuration',\n    description: 'Master robot joint control with manual positioning',\n    type: 'hardware',\n    requiresWebSerial: true,\n    estimatedTime: 15,\n    difficulty: 'beginner'\n  }\n  // 'C2': {\n  //   component: Challenge2,\n  //   title: 'Controls Quiz',\n  //   description: 'Test your theoretical knowledge of control systems',\n  //   type: 'quiz',\n  //   requiresWebSerial: false,\n  //   estimatedTime: 10,\n  //   difficulty: 'beginner'\n  // },\n  // 'C3': {\n  //   component: Challenge3,\n  //   title: 'PD Gain Tuning',\n  //   description: 'Learn controller design by tuning PD gains',\n  //   type: 'hardware',\n  //   requiresWebSerial: true,\n  //   estimatedTime: 20,\n  //   difficulty: 'beginner'\n  // },\n  // Add more challenges here...\n};\n\n/**\r\n * Get challenge component by ID\r\n * @param {string} challengeId - The challenge ID (e.g., 'C1', 'C2')\r\n * @returns {Object|null} Challenge configuration object or null if not found\r\n */\nexport const getChallengeComponent = challengeId => {\n  return CHALLENGE_COMPONENTS[challengeId] || null;\n};\n\n/**\r\n * Get all available challenges\r\n * @returns {Array} Array of challenge IDs and their configurations\r\n */\nexport const getAllChallenges = () => {\n  return Object.entries(CHALLENGE_COMPONENTS).map(([id, config]) => ({\n    id,\n    ...config\n  }));\n};\n\n/**\r\n * Check if challenge exists\r\n * @param {string} challengeId - The challenge ID\r\n * @returns {boolean} True if challenge exists, false otherwise\r\n */\nexport const challengeExists = challengeId => {\n  return challengeId in CHALLENGE_COMPONENTS;\n};\nexport default CHALLENGE_COMPONENTS;","map":{"version":3,"names":["Challenge1","CHALLENGE_COMPONENTS","component","title","description","type","requiresWebSerial","estimatedTime","difficulty","getChallengeComponent","challengeId","getAllChallenges","Object","entries","map","id","config","challengeExists"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/challenges/challengeRegistry.js"],"sourcesContent":["// src/challenges/challengeRegistry.js\r\n\r\n// Import all challenge components\r\nimport Challenge1 from './Challenge1';\r\n// import Challenge2 from './Challenge2';\r\n// import Challenge3 from './Challenge3';\r\n// Add new challenges here as you create them\r\n\r\n/**\r\n * Challenge Registry - Add new challenges here\r\n * \r\n * To add a new challenge:\r\n * 1. Create your challenge component in this folder (e.g., Challenge4.jsx)\r\n * 2. Import it above\r\n * 3. Add an entry to the CHALLENGE_COMPONENTS object below\r\n * 4. That's it! The system will automatically handle routing and display\r\n */\r\n\r\nexport const CHALLENGE_COMPONENTS = {\r\n  'C1': {\r\n    component: Challenge1,\r\n    title: 'Robot Configuration',\r\n    description: 'Master robot joint control with manual positioning',\r\n    type: 'hardware',\r\n    requiresWebSerial: true,\r\n    estimatedTime: 15,\r\n    difficulty: 'beginner'\r\n  },\r\n  // 'C2': {\r\n  //   component: Challenge2,\r\n  //   title: 'Controls Quiz',\r\n  //   description: 'Test your theoretical knowledge of control systems',\r\n  //   type: 'quiz',\r\n  //   requiresWebSerial: false,\r\n  //   estimatedTime: 10,\r\n  //   difficulty: 'beginner'\r\n  // },\r\n  // 'C3': {\r\n  //   component: Challenge3,\r\n  //   title: 'PD Gain Tuning',\r\n  //   description: 'Learn controller design by tuning PD gains',\r\n  //   type: 'hardware',\r\n  //   requiresWebSerial: true,\r\n  //   estimatedTime: 20,\r\n  //   difficulty: 'beginner'\r\n  // },\r\n  // Add more challenges here...\r\n};\r\n\r\n/**\r\n * Get challenge component by ID\r\n * @param {string} challengeId - The challenge ID (e.g., 'C1', 'C2')\r\n * @returns {Object|null} Challenge configuration object or null if not found\r\n */\r\nexport const getChallengeComponent = (challengeId) => {\r\n  return CHALLENGE_COMPONENTS[challengeId] || null;\r\n};\r\n\r\n/**\r\n * Get all available challenges\r\n * @returns {Array} Array of challenge IDs and their configurations\r\n */\r\nexport const getAllChallenges = () => {\r\n  return Object.entries(CHALLENGE_COMPONENTS).map(([id, config]) => ({\r\n    id,\r\n    ...config\r\n  }));\r\n};\r\n\r\n/**\r\n * Check if challenge exists\r\n * @param {string} challengeId - The challenge ID\r\n * @returns {boolean} True if challenge exists, false otherwise\r\n */\r\nexport const challengeExists = (challengeId) => {\r\n  return challengeId in CHALLENGE_COMPONENTS;\r\n};\r\n\r\nexport default CHALLENGE_COMPONENTS;"],"mappings":"AAAA;;AAEA;AACA,OAAOA,UAAU,MAAM,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG;EAClC,IAAI,EAAE;IACJC,SAAS,EAAEF,UAAU;IACrBG,KAAK,EAAE,qBAAqB;IAC5BC,WAAW,EAAE,oDAAoD;IACjEC,IAAI,EAAE,UAAU;IAChBC,iBAAiB,EAAE,IAAI;IACvBC,aAAa,EAAE,EAAE;IACjBC,UAAU,EAAE;EACd;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,WAAW,IAAK;EACpD,OAAOT,oBAAoB,CAACS,WAAW,CAAC,IAAI,IAAI;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAOC,MAAM,CAACC,OAAO,CAACZ,oBAAoB,CAAC,CAACa,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,MAAM,CAAC,MAAM;IACjED,EAAE;IACF,GAAGC;EACL,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIP,WAAW,IAAK;EAC9C,OAAOA,WAAW,IAAIT,oBAAoB;AAC5C,CAAC;AAED,eAAeA,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
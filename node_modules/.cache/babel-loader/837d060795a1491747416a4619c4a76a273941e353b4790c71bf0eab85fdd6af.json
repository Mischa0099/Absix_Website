{"ast":null,"code":"// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport robotService from '../services/robotService';\nimport websocketService from '../services/websocketService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk('robot/connect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.connect();\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message);\n  }\n});\nexport const disconnectRobot = createAsyncThunk('robot/disconnect', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.disconnect();\n    websocketService.disconnect();\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message);\n  }\n});\nexport const getRobotStatus = createAsyncThunk('robot/getStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.getStatus();\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || error.message);\n  }\n});\nexport const fetchRobotStatus = createAsyncThunk('robot/fetchStatus', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.getStatus();\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    return rejectWithValue(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || error.message);\n  }\n});\nexport const moveJoint = createAsyncThunk('robot/moveJoint', async ({\n  jointId,\n  position\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.moveJoint(jointId, position);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    return rejectWithValue(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || error.message);\n  }\n});\nexport const moveToPosition = createAsyncThunk('robot/moveToPosition', async (positions, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.moveToPosition(positions);\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    return rejectWithValue(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || error.message);\n  }\n});\nexport const emergencyStop = createAsyncThunk('robot/emergencyStop', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.emergencyStop();\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    return rejectWithValue(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.detail) || error.message);\n  }\n});\nexport const calibrateRobot = createAsyncThunk('robot/calibrate', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.calibrate();\n    return response.data;\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    return rejectWithValue(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.detail) || error.message);\n  }\n});\nexport const executeCode = createAsyncThunk('robot/executeCode', async (code, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await robotService.executeCode(code);\n    return response.data;\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    return rejectWithValue(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.detail) || error.message);\n  }\n});\nconst initialState = {\n  // Connection state\n  isConnected: false,\n  connectionStatus: 'disconnected',\n  loading: false,\n  // Robot configuration\n  robotConfig: {\n    jointLimits: [{\n      min: -180,\n      max: 180\n    }, {\n      min: -90,\n      max: 90\n    }, {\n      min: -90,\n      max: 90\n    }],\n    maxTemperature: 60,\n    maxCurrent: [2.0, 2.0, 2.0]\n  },\n  // Real-time telemetry data\n  telemetry: {\n    joint_angles: [0, 0, 0],\n    joint_velocities: [0, 0, 0],\n    joint_currents: [0, 0, 0],\n    joint_temperatures: [25, 25, 25],\n    joint_torques: [0, 0, 0],\n    end_effector_position: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    end_effector_velocity: {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n    system_status: 'idle',\n    timestamp: null,\n    updateRate: 0\n  },\n  // Current position and target\n  currentPosition: {\n    x: 0,\n    y: 0,\n    z: 0\n  },\n  targetPosition: {\n    x: 0,\n    y: 0,\n    z: 0\n  },\n  // Execution state\n  executionState: {\n    isExecuting: false,\n    executionId: null,\n    executionProgress: null,\n    executionStartTime: null,\n    executionEndTime: null,\n    lastExecution: null,\n    executionQueue: []\n  },\n  // Safety monitoring\n  safety: {\n    emergencyStopActive: false,\n    temperatureAlarms: [],\n    currentAlarms: [],\n    positionAlarms: [],\n    safetyViolations: []\n  },\n  // Calibration state\n  calibration: {\n    isCalibrated: false,\n    calibrationProgress: 0,\n    lastCalibration: null,\n    calibrationData: null\n  },\n  // Performance metrics\n  performance: {\n    commandCount: 0,\n    averageResponseTime: 0,\n    lastCommandTime: null,\n    telemetryStats: {\n      packetsReceived: 0,\n      packetsLost: 0,\n      averageLatency: 0\n    }\n  },\n  // Error handling\n  errors: [],\n  warnings: [],\n  lastError: null\n};\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    // Connection management\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.isConnected = action.payload === 'connected';\n    },\n    setConnectionError: (state, action) => {\n      state.connectionStatus = 'error';\n      state.isConnected = false;\n      state.lastError = action.payload;\n    },\n    // Robot data updates\n    setRobotData: (state, action) => {\n      const data = action.payload;\n\n      // Update telemetry\n      if (data.joint_angles) state.telemetry.joint_angles = data.joint_angles;\n      if (data.joint_velocities) state.telemetry.joint_velocities = data.joint_velocities;\n      if (data.joint_currents) state.telemetry.joint_currents = data.joint_currents;\n      if (data.joint_temperatures) state.telemetry.joint_temperatures = data.joint_temperatures;\n      if (data.joint_torques) state.telemetry.joint_torques = data.joint_torques;\n      if (data.end_effector_position) state.telemetry.end_effector_position = data.end_effector_position;\n      if (data.end_effector_velocity) state.telemetry.end_effector_velocity = data.end_effector_velocity;\n      if (data.system_status) state.telemetry.system_status = data.system_status;\n      state.telemetry.timestamp = Date.now();\n    },\n    // Position management\n    updateCurrentPosition: (state, action) => {\n      state.currentPosition = action.payload;\n    },\n    setTargetPosition: (state, action) => {\n      state.targetPosition = action.payload;\n    },\n    // Execution state\n    setExecutionState: (state, action) => {\n      state.executionState = {\n        ...state.executionState,\n        ...action.payload\n      };\n    },\n    setExecutionProgress: (state, action) => {\n      state.executionState.executionProgress = action.payload;\n    },\n    // Safety management\n    setSafetyState: (state, action) => {\n      state.safety = {\n        ...state.safety,\n        ...action.payload\n      };\n    },\n    addSafetyViolation: (state, action) => {\n      state.safety.safetyViolations.push(...action.payload);\n    },\n    clearSafetyViolations: state => {\n      state.safety.safetyViolations = [];\n    },\n    // Calibration\n    setCalibrationState: (state, action) => {\n      state.calibration = {\n        ...state.calibration,\n        ...action.payload\n      };\n    },\n    // Configuration\n    setRobotConfig: (state, action) => {\n      state.robotConfig = {\n        ...state.robotConfig,\n        ...action.payload\n      };\n    },\n    // Performance tracking\n    incrementCommandCount: state => {\n      state.performance.commandCount += 1;\n      state.performance.lastCommandTime = Date.now();\n    },\n    updatePerformanceMetrics: (state, action) => {\n      state.performance = {\n        ...state.performance,\n        ...action.payload\n      };\n    },\n    updateTelemetryStats: (state, action) => {\n      state.performance.telemetryStats = {\n        ...state.performance.telemetryStats,\n        ...action.payload\n      };\n    },\n    resetPerformanceMetrics: state => {\n      state.performance = {\n        commandCount: 0,\n        averageResponseTime: 0,\n        lastCommandTime: null,\n        telemetryStats: {\n          packetsReceived: 0,\n          packetsLost: 0,\n          averageLatency: 0\n        }\n      };\n    },\n    // Error handling\n    addError: (state, action) => {\n      const error = {\n        id: Date.now(),\n        message: action.payload.message || action.payload,\n        timestamp: Date.now(),\n        type: action.payload.type || 'error',\n        context: action.payload.context || null\n      };\n      state.errors.push(error);\n      state.lastError = error;\n    },\n    removeError: (state, action) => {\n      state.errors = state.errors.filter(error => error.id !== action.payload);\n    },\n    clearErrors: state => {\n      state.errors = [];\n      state.lastError = null;\n    },\n    addWarning: (state, action) => {\n      const warning = {\n        id: Date.now(),\n        message: action.payload.message || action.payload,\n        timestamp: Date.now(),\n        type: action.payload.type || 'warning',\n        context: action.payload.context || null\n      };\n      state.warnings.push(warning);\n    },\n    removeWarning: (state, action) => {\n      state.warnings = state.warnings.filter(warning => warning.id !== action.payload);\n    },\n    clearWarnings: state => {\n      state.warnings = [];\n    },\n    // General state management\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    resetRobotState: state => {\n      return {\n        ...initialState,\n        robotConfig: state.robotConfig\n      };\n    },\n    resetTelemetry: state => {\n      state.telemetry = initialState.telemetry;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Connect robot\n    .addCase(connectRobot.pending, state => {\n      state.loading = true;\n      state.lastError = null;\n    }).addCase(connectRobot.fulfilled, (state, action) => {\n      state.loading = false;\n      state.isConnected = true;\n      state.connectionStatus = 'connected';\n      if (action.payload.config) {\n        state.robotConfig = {\n          ...state.robotConfig,\n          ...action.payload.config\n        };\n      }\n    }).addCase(connectRobot.rejected, (state, action) => {\n      state.loading = false;\n      state.isConnected = false;\n      state.connectionStatus = 'error';\n      state.lastError = {\n        message: action.payload,\n        timestamp: Date.now()\n      };\n    })\n\n    // Disconnect robot\n    .addCase(disconnectRobot.fulfilled, state => {\n      state.isConnected = false;\n      state.connectionStatus = 'disconnected';\n      state.executionState.isExecuting = false;\n    })\n\n    // Get robot status\n    .addCase(getRobotStatus.fulfilled, (state, action) => {\n      const status = action.payload;\n      state.telemetry = {\n        ...state.telemetry,\n        ...status.telemetry\n      };\n      state.safety = {\n        ...state.safety,\n        ...status.safety\n      };\n      state.calibration = {\n        ...state.calibration,\n        ...status.calibration\n      };\n    })\n\n    // Fetch robot status (alias)\n    .addCase(fetchRobotStatus.fulfilled, (state, action) => {\n      const status = action.payload;\n      state.telemetry = {\n        ...state.telemetry,\n        ...status.telemetry\n      };\n      state.safety = {\n        ...state.safety,\n        ...status.safety\n      };\n      state.calibration = {\n        ...state.calibration,\n        ...status.calibration\n      };\n    })\n\n    // Move joint\n    .addCase(moveJoint.pending, state => {\n      state.executionState.isExecuting = true;\n    }).addCase(moveJoint.fulfilled, (state, action) => {\n      state.executionState.isExecuting = false;\n      state.performance.commandCount += 1;\n    }).addCase(moveJoint.rejected, (state, action) => {\n      state.executionState.isExecuting = false;\n      robotSlice.caseReducers.addError(state, {\n        payload: action.payload\n      });\n    })\n\n    // Move to position\n    .addCase(moveToPosition.pending, state => {\n      state.executionState.isExecuting = true;\n    }).addCase(moveToPosition.fulfilled, (state, action) => {\n      state.executionState.isExecuting = false;\n      state.performance.commandCount += 1;\n      if (action.payload.position) {\n        state.currentPosition = action.payload.position;\n      }\n    }).addCase(moveToPosition.rejected, (state, action) => {\n      state.executionState.isExecuting = false;\n      robotSlice.caseReducers.addError(state, {\n        payload: action.payload\n      });\n    })\n\n    // Emergency stop\n    .addCase(emergencyStop.fulfilled, state => {\n      state.safety.emergencyStopActive = true;\n      state.executionState.isExecuting = false;\n      state.executionState.executionQueue = [];\n    })\n\n    // Calibration\n    .addCase(calibrateRobot.pending, state => {\n      state.calibration.calibrationProgress = 0;\n    }).addCase(calibrateRobot.fulfilled, (state, action) => {\n      state.calibration.isCalibrated = true;\n      state.calibration.calibrationProgress = 100;\n      state.calibration.lastCalibration = Date.now();\n      state.calibration.calibrationData = action.payload;\n    }).addCase(calibrateRobot.rejected, (state, action) => {\n      state.calibration.calibrationProgress = 0;\n      robotSlice.caseReducers.addError(state, {\n        payload: action.payload\n      });\n    })\n\n    // Execute code\n    .addCase(executeCode.pending, state => {\n      state.executionState.isExecuting = true;\n      state.executionState.executionStartTime = Date.now();\n    }).addCase(executeCode.fulfilled, (state, action) => {\n      state.executionState.isExecuting = false;\n      state.executionState.executionEndTime = Date.now();\n      state.executionState.lastExecution = action.payload;\n    }).addCase(executeCode.rejected, (state, action) => {\n      state.executionState.isExecuting = false;\n      state.executionState.executionEndTime = Date.now();\n      robotSlice.caseReducers.addError(state, {\n        payload: action.payload\n      });\n    });\n  }\n});\n\n// Export actions\nexport const {\n  setConnectionStatus,\n  setConnectionError,\n  setRobotData,\n  updateCurrentPosition,\n  setTargetPosition,\n  setExecutionState,\n  setExecutionProgress,\n  setSafetyState,\n  addSafetyViolation,\n  clearSafetyViolations,\n  setCalibrationState,\n  setRobotConfig,\n  incrementCommandCount,\n  updatePerformanceMetrics,\n  updateTelemetryStats,\n  resetPerformanceMetrics,\n  addError,\n  removeError,\n  clearErrors,\n  addWarning,\n  removeWarning,\n  clearWarnings,\n  setLoading,\n  resetRobotState,\n  resetTelemetry\n} = robotSlice.actions;\n\n// Selectors\nexport const selectIsConnected = state => state.robot.isConnected;\nexport const selectConnectionStatus = state => state.robot.connectionStatus;\nexport const selectLoadingState = state => state.robot.loading;\nexport const selectTelemetry = state => state.robot.telemetry;\nexport const selectCurrentPosition = state => state.robot.currentPosition;\nexport const selectTargetPosition = state => state.robot.targetPosition;\nexport const selectExecutionState = state => state.robot.executionState;\nexport const selectIsExecuting = state => state.robot.executionState.isExecuting;\nexport const selectExecutionProgress = state => state.robot.executionState.executionProgress;\nexport const selectSafetyState = state => state.robot.safety;\nexport const selectCalibrationState = state => state.robot.calibration;\nexport const selectRobotConfig = state => state.robot.robotConfig;\nexport const selectPerformanceMetrics = state => state.robot.performance;\nexport const selectRobotErrors = state => state.robot.errors;\nexport const selectRobotWarnings = state => state.robot.warnings;\n\n// Computed selectors\nexport const selectRobotState = state => ({\n  connected: state.robot.isConnected,\n  status: state.robot.connectionStatus,\n  telemetry: state.robot.telemetry,\n  safety: state.robot.safety,\n  calibration: state.robot.calibration\n});\nexport const selectRobotHealth = state => {\n  const {\n    telemetry,\n    safety,\n    calibration,\n    isConnected\n  } = state.robot;\n  if (!isConnected) return 'disconnected';\n  if (safety.emergencyStopActive) return 'emergency';\n  if (safety.temperatureAlarms.length > 0) return 'warning';\n  if (!calibration.isCalibrated) return 'uncalibrated';\n  const maxTemp = Math.max(...telemetry.joint_temperatures);\n  if (maxTemp > 60) return 'warning';\n  if (maxTemp > 70) return 'critical';\n  return 'healthy';\n};\nexport default robotSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","robotService","websocketService","connectRobot","_","rejectWithValue","response","connect","data","error","_error$response","_error$response$data","detail","message","disconnectRobot","disconnect","_error$response2","_error$response2$data","getRobotStatus","getStatus","_error$response3","_error$response3$data","fetchRobotStatus","_error$response4","_error$response4$data","moveJoint","jointId","position","_error$response5","_error$response5$data","moveToPosition","positions","_error$response6","_error$response6$data","emergencyStop","_error$response7","_error$response7$data","calibrateRobot","calibrate","_error$response8","_error$response8$data","executeCode","code","_error$response9","_error$response9$data","initialState","isConnected","connectionStatus","loading","robotConfig","jointLimits","min","max","maxTemperature","maxCurrent","telemetry","joint_angles","joint_velocities","joint_currents","joint_temperatures","joint_torques","end_effector_position","x","y","z","end_effector_velocity","system_status","timestamp","updateRate","currentPosition","targetPosition","executionState","isExecuting","executionId","executionProgress","executionStartTime","executionEndTime","lastExecution","executionQueue","safety","emergencyStopActive","temperatureAlarms","currentAlarms","positionAlarms","safetyViolations","calibration","isCalibrated","calibrationProgress","lastCalibration","calibrationData","performance","commandCount","averageResponseTime","lastCommandTime","telemetryStats","packetsReceived","packetsLost","averageLatency","errors","warnings","lastError","robotSlice","name","reducers","setConnectionStatus","state","action","payload","setConnectionError","setRobotData","Date","now","updateCurrentPosition","setTargetPosition","setExecutionState","setExecutionProgress","setSafetyState","addSafetyViolation","push","clearSafetyViolations","setCalibrationState","setRobotConfig","incrementCommandCount","updatePerformanceMetrics","updateTelemetryStats","resetPerformanceMetrics","addError","id","type","context","removeError","filter","clearErrors","addWarning","warning","removeWarning","clearWarnings","setLoading","resetRobotState","resetTelemetry","extraReducers","builder","addCase","pending","fulfilled","config","rejected","status","caseReducers","actions","selectIsConnected","robot","selectConnectionStatus","selectLoadingState","selectTelemetry","selectCurrentPosition","selectTargetPosition","selectExecutionState","selectIsExecuting","selectExecutionProgress","selectSafetyState","selectCalibrationState","selectRobotConfig","selectPerformanceMetrics","selectRobotErrors","selectRobotWarnings","selectRobotState","connected","selectRobotHealth","length","maxTemp","Math","reducer"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/robotSlice.js"],"sourcesContent":["// src/store/robotSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport robotService from '../services/robotService';\nimport websocketService from '../services/websocketService';\n\n// Async thunks for robot operations\nexport const connectRobot = createAsyncThunk(\n  'robot/connect',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.connect();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const disconnectRobot = createAsyncThunk(\n  'robot/disconnect',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.disconnect();\n      websocketService.disconnect();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const getRobotStatus = createAsyncThunk(\n  'robot/getStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.getStatus();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const fetchRobotStatus = createAsyncThunk(\n  'robot/fetchStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.getStatus();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const moveJoint = createAsyncThunk(\n  'robot/moveJoint',\n  async ({ jointId, position }, { rejectWithValue }) => {\n    try {\n      const response = await robotService.moveJoint(jointId, position);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const moveToPosition = createAsyncThunk(\n  'robot/moveToPosition',\n  async (positions, { rejectWithValue }) => {\n    try {\n      const response = await robotService.moveToPosition(positions);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const emergencyStop = createAsyncThunk(\n  'robot/emergencyStop',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.emergencyStop();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const calibrateRobot = createAsyncThunk(\n  'robot/calibrate',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await robotService.calibrate();\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nexport const executeCode = createAsyncThunk(\n  'robot/executeCode',\n  async (code, { rejectWithValue }) => {\n    try {\n      const response = await robotService.executeCode(code);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.detail || error.message);\n    }\n  }\n);\n\nconst initialState = {\n  // Connection state\n  isConnected: false,\n  connectionStatus: 'disconnected',\n  loading: false,\n  \n  // Robot configuration\n  robotConfig: {\n    jointLimits: [\n      { min: -180, max: 180 },\n      { min: -90, max: 90 },\n      { min: -90, max: 90 }\n    ],\n    maxTemperature: 60,\n    maxCurrent: [2.0, 2.0, 2.0]\n  },\n  \n  // Real-time telemetry data\n  telemetry: {\n    joint_angles: [0, 0, 0],\n    joint_velocities: [0, 0, 0],\n    joint_currents: [0, 0, 0],\n    joint_temperatures: [25, 25, 25],\n    joint_torques: [0, 0, 0],\n    end_effector_position: { x: 0, y: 0, z: 0 },\n    end_effector_velocity: { x: 0, y: 0, z: 0 },\n    system_status: 'idle',\n    timestamp: null,\n    updateRate: 0\n  },\n  \n  // Current position and target\n  currentPosition: { x: 0, y: 0, z: 0 },\n  targetPosition: { x: 0, y: 0, z: 0 },\n  \n  // Execution state\n  executionState: {\n    isExecuting: false,\n    executionId: null,\n    executionProgress: null,\n    executionStartTime: null,\n    executionEndTime: null,\n    lastExecution: null,\n    executionQueue: []\n  },\n  \n  // Safety monitoring\n  safety: {\n    emergencyStopActive: false,\n    temperatureAlarms: [],\n    currentAlarms: [],\n    positionAlarms: [],\n    safetyViolations: []\n  },\n  \n  // Calibration state\n  calibration: {\n    isCalibrated: false,\n    calibrationProgress: 0,\n    lastCalibration: null,\n    calibrationData: null\n  },\n  \n  // Performance metrics\n  performance: {\n    commandCount: 0,\n    averageResponseTime: 0,\n    lastCommandTime: null,\n    telemetryStats: {\n      packetsReceived: 0,\n      packetsLost: 0,\n      averageLatency: 0\n    }\n  },\n  \n  // Error handling\n  errors: [],\n  warnings: [],\n  lastError: null\n};\n\nconst robotSlice = createSlice({\n  name: 'robot',\n  initialState,\n  reducers: {\n    // Connection management\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n      state.isConnected = action.payload === 'connected';\n    },\n    \n    setConnectionError: (state, action) => {\n      state.connectionStatus = 'error';\n      state.isConnected = false;\n      state.lastError = action.payload;\n    },\n    \n    // Robot data updates\n    setRobotData: (state, action) => {\n      const data = action.payload;\n      \n      // Update telemetry\n      if (data.joint_angles) state.telemetry.joint_angles = data.joint_angles;\n      if (data.joint_velocities) state.telemetry.joint_velocities = data.joint_velocities;\n      if (data.joint_currents) state.telemetry.joint_currents = data.joint_currents;\n      if (data.joint_temperatures) state.telemetry.joint_temperatures = data.joint_temperatures;\n      if (data.joint_torques) state.telemetry.joint_torques = data.joint_torques;\n      if (data.end_effector_position) state.telemetry.end_effector_position = data.end_effector_position;\n      if (data.end_effector_velocity) state.telemetry.end_effector_velocity = data.end_effector_velocity;\n      if (data.system_status) state.telemetry.system_status = data.system_status;\n      \n      state.telemetry.timestamp = Date.now();\n    },\n    \n    // Position management\n    updateCurrentPosition: (state, action) => {\n      state.currentPosition = action.payload;\n    },\n    \n    setTargetPosition: (state, action) => {\n      state.targetPosition = action.payload;\n    },\n    \n    // Execution state\n    setExecutionState: (state, action) => {\n      state.executionState = { ...state.executionState, ...action.payload };\n    },\n    \n    setExecutionProgress: (state, action) => {\n      state.executionState.executionProgress = action.payload;\n    },\n    \n    // Safety management\n    setSafetyState: (state, action) => {\n      state.safety = { ...state.safety, ...action.payload };\n    },\n    \n    addSafetyViolation: (state, action) => {\n      state.safety.safetyViolations.push(...action.payload);\n    },\n    \n    clearSafetyViolations: (state) => {\n      state.safety.safetyViolations = [];\n    },\n    \n    // Calibration\n    setCalibrationState: (state, action) => {\n      state.calibration = { ...state.calibration, ...action.payload };\n    },\n    \n    // Configuration\n    setRobotConfig: (state, action) => {\n      state.robotConfig = { ...state.robotConfig, ...action.payload };\n    },\n    \n    // Performance tracking\n    incrementCommandCount: (state) => {\n      state.performance.commandCount += 1;\n      state.performance.lastCommandTime = Date.now();\n    },\n    \n    updatePerformanceMetrics: (state, action) => {\n      state.performance = { ...state.performance, ...action.payload };\n    },\n    \n    updateTelemetryStats: (state, action) => {\n      state.performance.telemetryStats = { \n        ...state.performance.telemetryStats, \n        ...action.payload \n      };\n    },\n    \n    resetPerformanceMetrics: (state) => {\n      state.performance = {\n        commandCount: 0,\n        averageResponseTime: 0,\n        lastCommandTime: null,\n        telemetryStats: {\n          packetsReceived: 0,\n          packetsLost: 0,\n          averageLatency: 0\n        }\n      };\n    },\n    \n    // Error handling\n    addError: (state, action) => {\n      const error = {\n        id: Date.now(),\n        message: action.payload.message || action.payload,\n        timestamp: Date.now(),\n        type: action.payload.type || 'error',\n        context: action.payload.context || null\n      };\n      state.errors.push(error);\n      state.lastError = error;\n    },\n    \n    removeError: (state, action) => {\n      state.errors = state.errors.filter(error => error.id !== action.payload);\n    },\n    \n    clearErrors: (state) => {\n      state.errors = [];\n      state.lastError = null;\n    },\n    \n    addWarning: (state, action) => {\n      const warning = {\n        id: Date.now(),\n        message: action.payload.message || action.payload,\n        timestamp: Date.now(),\n        type: action.payload.type || 'warning',\n        context: action.payload.context || null\n      };\n      state.warnings.push(warning);\n    },\n    \n    removeWarning: (state, action) => {\n      state.warnings = state.warnings.filter(warning => warning.id !== action.payload);\n    },\n    \n    clearWarnings: (state) => {\n      state.warnings = [];\n    },\n    \n    // General state management\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    \n    resetRobotState: (state) => {\n      return { ...initialState, robotConfig: state.robotConfig };\n    },\n    \n    resetTelemetry: (state) => {\n      state.telemetry = initialState.telemetry;\n    }\n  },\n  \n  extraReducers: (builder) => {\n    builder\n      // Connect robot\n      .addCase(connectRobot.pending, (state) => {\n        state.loading = true;\n        state.lastError = null;\n      })\n      .addCase(connectRobot.fulfilled, (state, action) => {\n        state.loading = false;\n        state.isConnected = true;\n        state.connectionStatus = 'connected';\n        if (action.payload.config) {\n          state.robotConfig = { ...state.robotConfig, ...action.payload.config };\n        }\n      })\n      .addCase(connectRobot.rejected, (state, action) => {\n        state.loading = false;\n        state.isConnected = false;\n        state.connectionStatus = 'error';\n        state.lastError = { message: action.payload, timestamp: Date.now() };\n      })\n      \n      // Disconnect robot\n      .addCase(disconnectRobot.fulfilled, (state) => {\n        state.isConnected = false;\n        state.connectionStatus = 'disconnected';\n        state.executionState.isExecuting = false;\n      })\n      \n      // Get robot status\n      .addCase(getRobotStatus.fulfilled, (state, action) => {\n        const status = action.payload;\n        state.telemetry = { ...state.telemetry, ...status.telemetry };\n        state.safety = { ...state.safety, ...status.safety };\n        state.calibration = { ...state.calibration, ...status.calibration };\n      })\n      \n      // Fetch robot status (alias)\n      .addCase(fetchRobotStatus.fulfilled, (state, action) => {\n        const status = action.payload;\n        state.telemetry = { ...state.telemetry, ...status.telemetry };\n        state.safety = { ...state.safety, ...status.safety };\n        state.calibration = { ...state.calibration, ...status.calibration };\n      })\n      \n      // Move joint\n      .addCase(moveJoint.pending, (state) => {\n        state.executionState.isExecuting = true;\n      })\n      .addCase(moveJoint.fulfilled, (state, action) => {\n        state.executionState.isExecuting = false;\n        state.performance.commandCount += 1;\n      })\n      .addCase(moveJoint.rejected, (state, action) => {\n        state.executionState.isExecuting = false;\n        robotSlice.caseReducers.addError(state, { payload: action.payload });\n      })\n      \n      // Move to position\n      .addCase(moveToPosition.pending, (state) => {\n        state.executionState.isExecuting = true;\n      })\n      .addCase(moveToPosition.fulfilled, (state, action) => {\n        state.executionState.isExecuting = false;\n        state.performance.commandCount += 1;\n        if (action.payload.position) {\n          state.currentPosition = action.payload.position;\n        }\n      })\n      .addCase(moveToPosition.rejected, (state, action) => {\n        state.executionState.isExecuting = false;\n        robotSlice.caseReducers.addError(state, { payload: action.payload });\n      })\n      \n      // Emergency stop\n      .addCase(emergencyStop.fulfilled, (state) => {\n        state.safety.emergencyStopActive = true;\n        state.executionState.isExecuting = false;\n        state.executionState.executionQueue = [];\n      })\n      \n      // Calibration\n      .addCase(calibrateRobot.pending, (state) => {\n        state.calibration.calibrationProgress = 0;\n      })\n      .addCase(calibrateRobot.fulfilled, (state, action) => {\n        state.calibration.isCalibrated = true;\n        state.calibration.calibrationProgress = 100;\n        state.calibration.lastCalibration = Date.now();\n        state.calibration.calibrationData = action.payload;\n      })\n      .addCase(calibrateRobot.rejected, (state, action) => {\n        state.calibration.calibrationProgress = 0;\n        robotSlice.caseReducers.addError(state, { payload: action.payload });\n      })\n      \n      // Execute code\n      .addCase(executeCode.pending, (state) => {\n        state.executionState.isExecuting = true;\n        state.executionState.executionStartTime = Date.now();\n      })\n      .addCase(executeCode.fulfilled, (state, action) => {\n        state.executionState.isExecuting = false;\n        state.executionState.executionEndTime = Date.now();\n        state.executionState.lastExecution = action.payload;\n      })\n      .addCase(executeCode.rejected, (state, action) => {\n        state.executionState.isExecuting = false;\n        state.executionState.executionEndTime = Date.now();\n        robotSlice.caseReducers.addError(state, { payload: action.payload });\n      });\n  }\n});\n\n// Export actions\nexport const {\n  setConnectionStatus,\n  setConnectionError,\n  setRobotData,\n  updateCurrentPosition,\n  setTargetPosition,\n  setExecutionState,\n  setExecutionProgress,\n  setSafetyState,\n  addSafetyViolation,\n  clearSafetyViolations,\n  setCalibrationState,\n  setRobotConfig,\n  incrementCommandCount,\n  updatePerformanceMetrics,\n  updateTelemetryStats,\n  resetPerformanceMetrics,\n  addError,\n  removeError,\n  clearErrors,\n  addWarning,\n  removeWarning,\n  clearWarnings,\n  setLoading,\n  resetRobotState,\n  resetTelemetry\n} = robotSlice.actions;\n\n// Selectors\nexport const selectIsConnected = (state) => state.robot.isConnected;\nexport const selectConnectionStatus = (state) => state.robot.connectionStatus;\nexport const selectLoadingState = (state) => state.robot.loading;\nexport const selectTelemetry = (state) => state.robot.telemetry;\nexport const selectCurrentPosition = (state) => state.robot.currentPosition;\nexport const selectTargetPosition = (state) => state.robot.targetPosition;\nexport const selectExecutionState = (state) => state.robot.executionState;\nexport const selectIsExecuting = (state) => state.robot.executionState.isExecuting;\nexport const selectExecutionProgress = (state) => state.robot.executionState.executionProgress;\nexport const selectSafetyState = (state) => state.robot.safety;\nexport const selectCalibrationState = (state) => state.robot.calibration;\nexport const selectRobotConfig = (state) => state.robot.robotConfig;\nexport const selectPerformanceMetrics = (state) => state.robot.performance;\nexport const selectRobotErrors = (state) => state.robot.errors;\nexport const selectRobotWarnings = (state) => state.robot.warnings;\n\n// Computed selectors\nexport const selectRobotState = (state) => ({\n  connected: state.robot.isConnected,\n  status: state.robot.connectionStatus,\n  telemetry: state.robot.telemetry,\n  safety: state.robot.safety,\n  calibration: state.robot.calibration\n});\n\nexport const selectRobotHealth = (state) => {\n  const { telemetry, safety, calibration, isConnected } = state.robot;\n  \n  if (!isConnected) return 'disconnected';\n  if (safety.emergencyStopActive) return 'emergency';\n  if (safety.temperatureAlarms.length > 0) return 'warning';\n  if (!calibration.isCalibrated) return 'uncalibrated';\n  \n  const maxTemp = Math.max(...telemetry.joint_temperatures);\n  if (maxTemp > 60) return 'warning';\n  if (maxTemp > 70) return 'critical';\n  \n  return 'healthy';\n};\n\nexport default robotSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
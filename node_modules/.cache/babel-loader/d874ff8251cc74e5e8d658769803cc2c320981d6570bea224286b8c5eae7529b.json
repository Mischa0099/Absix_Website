{"ast":null,"code":"// src/utils/performanceMonitor.js\n\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = new Map();\n    this.isEnabled = process.env.NODE_ENV === 'development';\n    this.maxMetrics = 1000; // Limit stored metrics to prevent memory leaks\n  }\n  recordMetric(type, data) {\n    if (!this.isEnabled) return;\n    const timestamp = Date.now();\n    const metric = {\n      type,\n      data,\n      timestamp\n    };\n    if (!this.metrics.has(type)) {\n      this.metrics.set(type, []);\n    }\n    const typeMetrics = this.metrics.get(type);\n    typeMetrics.push(metric);\n\n    // Limit metrics per type\n    if (typeMetrics.length > this.maxMetrics) {\n      typeMetrics.shift(); // Remove oldest metric\n    }\n\n    // Log important metrics in development\n    if (this.shouldLog(type, data)) {\n      console.log(`ðŸ“Š [Performance] ${type}:`, data);\n    }\n  }\n  shouldLog(type, data) {\n    // Log slow operations or errors\n    if (type === 'redux_error' || type === 'slow_dispatch') {\n      return true;\n    }\n    if (type === 'redux_action' && data.duration > 10) {\n      return true;\n    }\n    return false;\n  }\n  getMetrics(type) {\n    return this.metrics.get(type) || [];\n  }\n  getAllMetrics() {\n    const result = {};\n    for (const [type, metrics] of this.metrics) {\n      result[type] = metrics;\n    }\n    return result;\n  }\n  getAverageMetric(type, property) {\n    const metrics = this.getMetrics(type);\n    if (metrics.length === 0) return 0;\n    const values = metrics.map(m => m.data[property]).filter(v => typeof v === 'number');\n    if (values.length === 0) return 0;\n    return values.reduce((sum, val) => sum + val, 0) / values.length;\n  }\n  clearMetrics(type) {\n    if (type) {\n      this.metrics.delete(type);\n    } else {\n      this.metrics.clear();\n    }\n  }\n  getStats() {\n    const stats = {};\n    for (const [type, metrics] of this.metrics) {\n      var _metrics, _metrics$;\n      stats[type] = {\n        count: metrics.length,\n        latest: (_metrics = metrics[metrics.length - 1]) === null || _metrics === void 0 ? void 0 : _metrics.timestamp,\n        oldest: (_metrics$ = metrics[0]) === null || _metrics$ === void 0 ? void 0 : _metrics$.timestamp\n      };\n    }\n    return stats;\n  }\n}\n\n// Mock services for testing\nclass MockRobotService {\n  constructor() {\n    this.connected = false;\n    this.jointAngles = [0, 0, 0];\n  }\n  async connect() {\n    this.connected = true;\n    return {\n      success: true\n    };\n  }\n  async disconnect() {\n    this.connected = false;\n    return {\n      success: true\n    };\n  }\n  async getJointAngles() {\n    return this.jointAngles;\n  }\n  async setJointAngles(angles) {\n    this.jointAngles = [...angles];\n    return {\n      success: true\n    };\n  }\n  async emergencyStop() {\n    return {\n      success: true\n    };\n  }\n  async enableTorque(actuatorId) {\n    return {\n      success: true\n    };\n  }\n  async disableTorque(actuatorId) {\n    return {\n      success: true\n    };\n  }\n}\nclass MockWebSocketService {\n  constructor() {\n    this.connected = false;\n    this.listeners = new Map();\n  }\n  connect(token) {\n    this.connected = true;\n    setTimeout(() => {\n      this.emit('connection_status', {\n        connected: true\n      });\n    }, 100);\n  }\n  disconnect() {\n    this.connected = false;\n    this.emit('connection_status', {\n      connected: false\n    });\n  }\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => callback(data));\n    }\n  }\n  sendRobotCommand(command, parameters) {\n    // Mock implementation\n    console.log('Mock robot command:', command, parameters);\n  }\n  subscribeToRobotUpdates(callback) {\n    this.on('robot_status', callback);\n  }\n  subscribeToChallengeUpdates(callback) {\n    this.on('challenge_update', callback);\n  }\n}\n\n// Create singleton instance\nexport const performanceMonitor = new PerformanceMonitor();\n\n// Export everything for easy testing and usage\nexport { PerformanceMonitor, MockRobotService, MockWebSocketService };\nexport default performanceMonitor;","map":{"version":3,"names":["PerformanceMonitor","constructor","metrics","Map","isEnabled","process","env","NODE_ENV","maxMetrics","recordMetric","type","data","timestamp","Date","now","metric","has","set","typeMetrics","get","push","length","shift","shouldLog","console","log","duration","getMetrics","getAllMetrics","result","getAverageMetric","property","values","map","m","filter","v","reduce","sum","val","clearMetrics","delete","clear","getStats","stats","_metrics","_metrics$","count","latest","oldest","MockRobotService","connected","jointAngles","connect","success","disconnect","getJointAngles","setJointAngles","angles","emergencyStop","enableTorque","actuatorId","disableTorque","MockWebSocketService","listeners","token","setTimeout","emit","on","event","callback","off","callbacks","index","indexOf","splice","forEach","sendRobotCommand","command","parameters","subscribeToRobotUpdates","subscribeToChallengeUpdates","performanceMonitor"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/utils/performanceMonitor.js"],"sourcesContent":["// src/utils/performanceMonitor.js\r\n\r\nclass PerformanceMonitor {\r\n  constructor() {\r\n    this.metrics = new Map();\r\n    this.isEnabled = process.env.NODE_ENV === 'development';\r\n    this.maxMetrics = 1000; // Limit stored metrics to prevent memory leaks\r\n  }\r\n\r\n  recordMetric(type, data) {\r\n    if (!this.isEnabled) return;\r\n\r\n    const timestamp = Date.now();\r\n    const metric = {\r\n      type,\r\n      data,\r\n      timestamp\r\n    };\r\n\r\n    if (!this.metrics.has(type)) {\r\n      this.metrics.set(type, []);\r\n    }\r\n\r\n    const typeMetrics = this.metrics.get(type);\r\n    typeMetrics.push(metric);\r\n\r\n    // Limit metrics per type\r\n    if (typeMetrics.length > this.maxMetrics) {\r\n      typeMetrics.shift(); // Remove oldest metric\r\n    }\r\n\r\n    // Log important metrics in development\r\n    if (this.shouldLog(type, data)) {\r\n      console.log(`ðŸ“Š [Performance] ${type}:`, data);\r\n    }\r\n  }\r\n\r\n  shouldLog(type, data) {\r\n    // Log slow operations or errors\r\n    if (type === 'redux_error' || type === 'slow_dispatch') {\r\n      return true;\r\n    }\r\n    \r\n    if (type === 'redux_action' && data.duration > 10) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getMetrics(type) {\r\n    return this.metrics.get(type) || [];\r\n  }\r\n\r\n  getAllMetrics() {\r\n    const result = {};\r\n    for (const [type, metrics] of this.metrics) {\r\n      result[type] = metrics;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getAverageMetric(type, property) {\r\n    const metrics = this.getMetrics(type);\r\n    if (metrics.length === 0) return 0;\r\n\r\n    const values = metrics\r\n      .map(m => m.data[property])\r\n      .filter(v => typeof v === 'number');\r\n    \r\n    if (values.length === 0) return 0;\r\n    \r\n    return values.reduce((sum, val) => sum + val, 0) / values.length;\r\n  }\r\n\r\n  clearMetrics(type) {\r\n    if (type) {\r\n      this.metrics.delete(type);\r\n    } else {\r\n      this.metrics.clear();\r\n    }\r\n  }\r\n\r\n  getStats() {\r\n    const stats = {};\r\n    \r\n    for (const [type, metrics] of this.metrics) {\r\n      stats[type] = {\r\n        count: metrics.length,\r\n        latest: metrics[metrics.length - 1]?.timestamp,\r\n        oldest: metrics[0]?.timestamp\r\n      };\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n// Mock services for testing\r\nclass MockRobotService {\r\n  constructor() {\r\n    this.connected = false;\r\n    this.jointAngles = [0, 0, 0];\r\n  }\r\n\r\n  async connect() {\r\n    this.connected = true;\r\n    return { success: true };\r\n  }\r\n\r\n  async disconnect() {\r\n    this.connected = false;\r\n    return { success: true };\r\n  }\r\n\r\n  async getJointAngles() {\r\n    return this.jointAngles;\r\n  }\r\n\r\n  async setJointAngles(angles) {\r\n    this.jointAngles = [...angles];\r\n    return { success: true };\r\n  }\r\n\r\n  async emergencyStop() {\r\n    return { success: true };\r\n  }\r\n\r\n  async enableTorque(actuatorId) {\r\n    return { success: true };\r\n  }\r\n\r\n  async disableTorque(actuatorId) {\r\n    return { success: true };\r\n  }\r\n}\r\n\r\nclass MockWebSocketService {\r\n  constructor() {\r\n    this.connected = false;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(token) {\r\n    this.connected = true;\r\n    setTimeout(() => {\r\n      this.emit('connection_status', { connected: true });\r\n    }, 100);\r\n  }\r\n\r\n  disconnect() {\r\n    this.connected = false;\r\n    this.emit('connection_status', { connected: false });\r\n  }\r\n\r\n  on(event, callback) {\r\n    if (!this.listeners.has(event)) {\r\n      this.listeners.set(event, []);\r\n    }\r\n    this.listeners.get(event).push(callback);\r\n  }\r\n\r\n  off(event, callback) {\r\n    if (this.listeners.has(event)) {\r\n      const callbacks = this.listeners.get(event);\r\n      const index = callbacks.indexOf(callback);\r\n      if (index > -1) {\r\n        callbacks.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit(event, data) {\r\n    if (this.listeners.has(event)) {\r\n      this.listeners.get(event).forEach(callback => callback(data));\r\n    }\r\n  }\r\n\r\n  sendRobotCommand(command, parameters) {\r\n    // Mock implementation\r\n    console.log('Mock robot command:', command, parameters);\r\n  }\r\n\r\n  subscribeToRobotUpdates(callback) {\r\n    this.on('robot_status', callback);\r\n  }\r\n\r\n  subscribeToChallengeUpdates(callback) {\r\n    this.on('challenge_update', callback);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nexport const performanceMonitor = new PerformanceMonitor();\r\n\r\n// Export everything for easy testing and usage\r\nexport {\r\n  PerformanceMonitor,\r\n  MockRobotService,\r\n  MockWebSocketService\r\n};\r\n\r\nexport default performanceMonitor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
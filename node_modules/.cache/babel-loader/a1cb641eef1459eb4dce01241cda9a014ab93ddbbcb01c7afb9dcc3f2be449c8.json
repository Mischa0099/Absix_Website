{"ast":null,"code":"// src/services/robotService.js\nimport api from './api';\nconst robotService = {\n  // Connect to robot hardware\n  connect: async () => {\n    try {\n      console.log('🤖 Robot Service: Connecting to robot...');\n      const response = await api.post('/api/v1/robot/connect');\n      console.log('🤖 Robot Service: Connected successfully');\n      return response;\n    } catch (error) {\n      console.error('🤖 Robot Service: Connection failed:', error);\n      throw error;\n    }\n  },\n  // Disconnect from robot\n  disconnect: async () => {\n    try {\n      console.log('🤖 Robot Service: Disconnecting from robot...');\n      const response = await api.post('/api/v1/robot/disconnect');\n      console.log('🤖 Robot Service: Disconnected successfully');\n      return response;\n    } catch (error) {\n      console.error('🤖 Robot Service: Disconnection failed:', error);\n      throw error;\n    }\n  },\n  // Get robot status\n  getStatus: async () => {\n    try {\n      const response = await api.get('/api/v1/robot/status');\n      return response;\n    } catch (error) {\n      console.error('🤖 Robot Service: Get status failed:', error);\n      throw error;\n    }\n  },\n  // Send generic command to robot\n  sendCommand: async (commandType, commandData) => {\n    try {\n      console.log(`🤖 Robot Service: Sending command ${commandType}...`);\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: commandType,\n        command_data: commandData\n      });\n      return response;\n    } catch (error) {\n      console.error(`🤖 Robot Service: Send command ${commandType} failed:`, error);\n      throw error;\n    }\n  },\n  // Move single joint\n  moveJoint: async (jointId, angle, speed = 50) => {\n    try {\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: 'move_joint',\n        command_data: {\n          joint_id: jointId,\n          angle: angle,\n          speed: speed\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(`🤖 Robot Service: Move joint ${jointId} failed:`, error);\n      throw error;\n    }\n  },\n  // Move to position (all joints)\n  moveToPosition: async (angles, speed = 50) => {\n    try {\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: 'move_to_position',\n        command_data: {\n          angles: angles,\n          speed: speed\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error('🤖 Robot Service: Move to position failed:', error);\n      throw error;\n    }\n  },\n  // Enable/disable torque\n  setTorque: async (actuatorId, enabled) => {\n    try {\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: 'set_torque',\n        command_data: {\n          actuator_id: actuatorId,\n          enabled: enabled\n        }\n      });\n      return response;\n    } catch (error) {\n      console.error(`🤖 Robot Service: Set torque for actuator ${actuatorId} failed:`, error);\n      throw error;\n    }\n  },\n  // Get joint angles\n  getJointAngles: async () => {\n    try {\n      const response = await api.get('/api/v1/robot/joint-angles');\n      return response;\n    } catch (error) {\n      console.error('🤖 Robot Service: Get joint angles failed:', error);\n      throw error;\n    }\n  },\n  // Emergency stop\n  emergencyStop: async () => {\n    try {\n      console.log('🚨 Robot Service: Emergency stop!');\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: 'emergency_stop',\n        command_data: {}\n      });\n      return response;\n    } catch (error) {\n      console.error('🚨 Robot Service: Emergency stop failed:', error);\n      throw error;\n    }\n  },\n  // Home position\n  homePosition: async () => {\n    try {\n      console.log('🏠 Robot Service: Moving to home position...');\n      const response = await api.post('/api/v1/robot/command', {\n        command_type: 'home_position',\n        command_data: {}\n      });\n      return response;\n    } catch (error) {\n      console.error('🏠 Robot Service: Home position failed:', error);\n      throw error;\n    }\n  },\n  // Get actuator details\n  getActuatorInfo: async actuatorId => {\n    try {\n      const response = await api.get(`/api/v1/robot/actuator/${actuatorId}`);\n      return response;\n    } catch (error) {\n      console.error(`🤖 Robot Service: Get actuator ${actuatorId} info failed:`, error);\n      throw error;\n    }\n  }\n};\nexport default robotService;\n\n// =================================================================","map":{"version":3,"names":["api","robotService","connect","console","log","response","post","error","disconnect","getStatus","get","sendCommand","commandType","commandData","command_type","command_data","moveJoint","jointId","angle","speed","joint_id","moveToPosition","angles","setTorque","actuatorId","enabled","actuator_id","getJointAngles","emergencyStop","homePosition","getActuatorInfo"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/services/robotService.js"],"sourcesContent":["// src/services/robotService.js\r\nimport api from './api';\r\n\r\nconst robotService = {\r\n  // Connect to robot hardware\r\n  connect: async () => {\r\n    try {\r\n      console.log('🤖 Robot Service: Connecting to robot...');\r\n      const response = await api.post('/api/v1/robot/connect');\r\n      console.log('🤖 Robot Service: Connected successfully');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Robot Service: Connection failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Disconnect from robot\r\n  disconnect: async () => {\r\n    try {\r\n      console.log('🤖 Robot Service: Disconnecting from robot...');\r\n      const response = await api.post('/api/v1/robot/disconnect');\r\n      console.log('🤖 Robot Service: Disconnected successfully');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Robot Service: Disconnection failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get robot status\r\n  getStatus: async () => {\r\n    try {\r\n      const response = await api.get('/api/v1/robot/status');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Robot Service: Get status failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Send generic command to robot\r\n  sendCommand: async (commandType, commandData) => {\r\n    try {\r\n      console.log(`🤖 Robot Service: Sending command ${commandType}...`);\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: commandType,\r\n        command_data: commandData,\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🤖 Robot Service: Send command ${commandType} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Move single joint\r\n  moveJoint: async (jointId, angle, speed = 50) => {\r\n    try {\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: 'move_joint',\r\n        command_data: {\r\n          joint_id: jointId,\r\n          angle: angle,\r\n          speed: speed\r\n        }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🤖 Robot Service: Move joint ${jointId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Move to position (all joints)\r\n  moveToPosition: async (angles, speed = 50) => {\r\n    try {\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: 'move_to_position',\r\n        command_data: {\r\n          angles: angles,\r\n          speed: speed\r\n        }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Robot Service: Move to position failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Enable/disable torque\r\n  setTorque: async (actuatorId, enabled) => {\r\n    try {\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: 'set_torque',\r\n        command_data: {\r\n          actuator_id: actuatorId,\r\n          enabled: enabled\r\n        }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🤖 Robot Service: Set torque for actuator ${actuatorId} failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get joint angles\r\n  getJointAngles: async () => {\r\n    try {\r\n      const response = await api.get('/api/v1/robot/joint-angles');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🤖 Robot Service: Get joint angles failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Emergency stop\r\n  emergencyStop: async () => {\r\n    try {\r\n      console.log('🚨 Robot Service: Emergency stop!');\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: 'emergency_stop',\r\n        command_data: {}\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🚨 Robot Service: Emergency stop failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Home position\r\n  homePosition: async () => {\r\n    try {\r\n      console.log('🏠 Robot Service: Moving to home position...');\r\n      const response = await api.post('/api/v1/robot/command', {\r\n        command_type: 'home_position',\r\n        command_data: {}\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🏠 Robot Service: Home position failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get actuator details\r\n  getActuatorInfo: async (actuatorId) => {\r\n    try {\r\n      const response = await api.get(`/api/v1/robot/actuator/${actuatorId}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`🤖 Robot Service: Get actuator ${actuatorId} info failed:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport default robotService;\r\n\r\n// ================================================================="],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/utils/challengeData.js\n\nexport const challengeDetailsData = {\n  challenge1: {\n    id: 'challenge1',\n    title: 'Robot Configuration',\n    description: 'Learn manual robot positioning and develop intuition about joint angles',\n    type: 'manual',\n    difficulty: 'Beginner',\n    estimatedTime: '15-20 minutes',\n    objectives: ['Position robot to absolute joint angles', 'Position robot to relative joint angles', 'Develop intuition about robot configurations', 'Practice manual robot control'],\n    prerequisites: ['Basic understanding of robot joints', 'Familiarity with angle measurements'],\n    learningOutcomes: ['Manual robot positioning skills', 'Understanding of absolute vs relative angles', 'Robot configuration intuition', 'Precision movement control'],\n    maxScore: 100,\n    passingScore: 60,\n    icon: 'Settings',\n    category: 'fundamentals',\n    tags: ['manual-control', 'positioning', 'basics'],\n    hardwareRequired: true,\n    robotConnectionRequired: true\n  },\n  C2: {\n    title: \"Controls Quiz\",\n    type: \"Interactive Quiz\",\n    difficulty: \"Beginner\",\n    description: \"Test your theoretical understanding of control systems, feedback loops, and robotics fundamentals.\",\n    objectives: [\"Demonstrate control theory knowledge\", \"Understand feedback mechanisms\", \"Master stability concepts\", \"Apply control principles\"],\n    successCriteria: [\"Score minimum 80% on quiz\", \"Answer all sections correctly\", \"Complete within time limit\"],\n    equipment: \"Interactive Quiz Interface\",\n    timeLimit: \"20 minutes\",\n    scoring: \"Points per correct answer with time bonus\",\n    technicalDetails: {\n      questionTypes: [\"Multiple choice\", \"True/False\", \"Diagram interpretation\", \"Calculation problems\"],\n      topics: [\"Open vs Closed loop control\", \"PID control principles\", \"System stability\", \"Transfer functions\", \"Feedback mechanisms\"],\n      passingScore: 80\n    }\n  },\n  C3: {\n    title: \"PD Gain Tuning\",\n    type: \"Parameter Optimization\",\n    difficulty: \"Beginner\",\n    description: \"Learn controller design by tuning Proportional and Derivative gains for optimal robot performance.\",\n    objectives: [\"Tune KP and KD parameters effectively\", \"Achieve target settling time < 3.0s\", \"Minimize overshoot < 20%\", \"Reduce steady-state error < 0.02\"],\n    successCriteria: [\"Meet all performance metrics\", \"Stable controller response\", \"No oscillations or instability\"],\n    equipment: \"PD Controller Interface + Robot\",\n    timeLimit: \"25 minutes\",\n    scoring: \"Performance metrics weighted scoring\",\n    technicalDetails: {\n      parameterRanges: {\n        kp: {\n          min: 0,\n          max: 16500,\n          default: 10.0\n        },\n        kd: {\n          min: 0,\n          max: 10.0,\n          default: 1.0\n        }\n      },\n      performanceMetrics: {\n        settlingTime: {\n          target: 3.0,\n          weight: 40\n        },\n        overshoot: {\n          target: 20.0,\n          weight: 30\n        },\n        steadyStateError: {\n          target: 0.02,\n          weight: 30\n        }\n      },\n      targetAngle: 1.5,\n      samplingRate: 0.01\n    }\n  },\n  C4: {\n    title: \"Workspace Identification\",\n    type: \"Reachability Analysis\",\n    difficulty: \"Beginner\",\n    description: \"Determine if randomly generated points are within the robot's reachable workspace.\",\n    objectives: [\"Analyze 6 random test points\", \"Determine reachability accurately\", \"Understand workspace limitations\", \"Achieve 80% accuracy minimum\"],\n    successCriteria: [\"Minimum 5 out of 6 correct answers\", \"Demonstrate workspace understanding\", \"Complete within time limit\"],\n    equipment: \"Workspace Visualization Tool\",\n    timeLimit: \"20 minutes\",\n    scoring: \"Binary scoring with accuracy bonus\",\n    technicalDetails: {\n      robotConfiguration: {\n        linkLengths: [0.10, 0.07, 0.05],\n        // meters\n        jointLimits: [{\n          min: -Math.PI,\n          max: Math.PI\n        }, {\n          min: -Math.PI / 2,\n          max: Math.PI / 2\n        }, {\n          min: -Math.PI / 2,\n          max: Math.PI / 2\n        }]\n      },\n      workspaceType: \"2D planar\",\n      accuracyThreshold: 0.8,\n      pointGenerationRange: {\n        x: [-0.25, 0.25],\n        y: [-0.25, 0.25]\n      }\n    }\n  },\n  C5: {\n    title: \"2R - EE Orientation & Position\",\n    type: \"Kinematics Verification\",\n    difficulty: \"Beginner\",\n    description: \"Verify end effector kinematics calculations for a 2R robotic manipulator system.\",\n    objectives: [\"Calculate forward kinematics correctly\", \"Verify orientation matrices\", \"Check position calculations\", \"Apply joint limit constraints\"],\n    successCriteria: [\"Matrix tolerance within 0.1\", \"Position tolerance within 0.01m\", \"All calculations verified\"],\n    equipment: \"2R Robot Kinematics Interface\",\n    timeLimit: \"30 minutes\",\n    scoring: \"Graded scoring per calculation step\",\n    technicalDetails: {\n      robotType: \"2R planar manipulator\",\n      linkLengths: [0.10, 0.07],\n      // L1, L2 in meters\n      jointLimits: {\n        joint1: {\n          min: -90,\n          max: 90\n        },\n        // degrees\n        joint2: {\n          min: -90,\n          max: 90\n        }\n      },\n      tolerances: {\n        orientation: 0.1,\n        position: 0.01\n      },\n      outputFormat: {\n        angles: \"degrees\",\n        positions: \"meters\",\n        matrices: \"3x3 rotation\"\n      },\n      scoringBreakdown: {\n        forwardKinematics: 40,\n        orientationCalculation: 30,\n        matrixVerification: 30\n      }\n    }\n  }\n};\n\n// Helper functions for challenge data\nexport const getChallengeById = id => {\n  return challengeDetailsData[id] || null;\n};\nexport const getChallengeDifficulty = id => {\n  const challenge = getChallengeById(id);\n  return challenge ? challenge.difficulty : 'Unknown';\n};\nexport const getChallengeType = id => {\n  const challenge = getChallengeById(id);\n  return challenge ? challenge.type : 'Unknown';\n};\nexport const getChallengePrerequisites = id => {\n  const prerequisites = {\n    C1: [],\n    C2: ['C1'],\n    C3: ['C1', 'C2'],\n    C4: ['C1', 'C2', 'C3'],\n    C5: ['C1', 'C2', 'C3', 'C4']\n  };\n  return prerequisites[id] || [];\n};\nexport const getUnlockRequirements = (id, userProgress = {}) => {\n  const prerequisites = getChallengePrerequisites(id);\n  if (prerequisites.length === 0) {\n    return {\n      unlocked: true,\n      message: 'Available'\n    };\n  }\n  const unmetPrereqs = prerequisites.filter(prereq => {\n    var _userProgress$prereq;\n    return !((_userProgress$prereq = userProgress[prereq]) !== null && _userProgress$prereq !== void 0 && _userProgress$prereq.completed);\n  });\n  if (unmetPrereqs.length > 0) {\n    const lastPrereq = unmetPrereqs[unmetPrereqs.length - 1];\n    return {\n      unlocked: false,\n      message: `Complete Challenge ${lastPrereq.slice(1)}`\n    };\n  }\n  return {\n    unlocked: true,\n    message: 'Available'\n  };\n};\nexport const calculateProgressPercentage = (userProgress = {}) => {\n  const totalChallenges = Object.keys(challengeDetailsData).length;\n  const completedChallenges = Object.values(userProgress).filter(progress => progress.completed).length;\n  return completedChallenges / totalChallenges * 100;\n};\nexport const getNextChallenge = (userProgress = {}) => {\n  const challengeIds = ['C1', 'C2', 'C3', 'C4', 'C5'];\n  for (const id of challengeIds) {\n    var _userProgress$id;\n    const requirements = getUnlockRequirements(id, userProgress);\n    if (requirements.unlocked && !((_userProgress$id = userProgress[id]) !== null && _userProgress$id !== void 0 && _userProgress$id.completed)) {\n      return id;\n    }\n  }\n  return null; // All challenges completed\n};\nexport const getRankFromProgress = (userProgress = {}) => {\n  const completed = Object.values(userProgress).filter(p => p.completed).length;\n  const totalScore = Object.values(userProgress).reduce((sum, p) => sum + (p.score || 0), 0);\n  if (completed >= 4 && totalScore >= 350) {\n    return {\n      rank: 'Robotics Master',\n      color: '#ffd60a',\n      icon: 'fas fa-crown'\n    };\n  } else if (completed >= 3 && totalScore >= 250) {\n    return {\n      rank: 'Robotics Expert',\n      color: '#0cc0df',\n      icon: 'fas fa-star'\n    };\n  } else if (completed >= 2 && totalScore >= 150) {\n    return {\n      rank: 'Robotics Apprentice',\n      color: '#28a745',\n      icon: 'fas fa-medal'\n    };\n  } else if (completed >= 1) {\n    return {\n      rank: 'Robotics Novice',\n      color: '#ffc107',\n      icon: 'fas fa-seedling'\n    };\n  } else {\n    return {\n      rank: 'Rising Roboticist',\n      color: '#6c757d',\n      icon: 'fas fa-user-graduate'\n    };\n  }\n};","map":{"version":3,"names":["challengeDetailsData","challenge1","id","title","description","type","difficulty","estimatedTime","objectives","prerequisites","learningOutcomes","maxScore","passingScore","icon","category","tags","hardwareRequired","robotConnectionRequired","C2","successCriteria","equipment","timeLimit","scoring","technicalDetails","questionTypes","topics","C3","parameterRanges","kp","min","max","default","kd","performanceMetrics","settlingTime","target","weight","overshoot","steadyStateError","targetAngle","samplingRate","C4","robotConfiguration","linkLengths","jointLimits","Math","PI","workspaceType","accuracyThreshold","pointGenerationRange","x","y","C5","robotType","joint1","joint2","tolerances","orientation","position","outputFormat","angles","positions","matrices","scoringBreakdown","forwardKinematics","orientationCalculation","matrixVerification","getChallengeById","getChallengeDifficulty","challenge","getChallengeType","getChallengePrerequisites","C1","getUnlockRequirements","userProgress","length","unlocked","message","unmetPrereqs","filter","prereq","_userProgress$prereq","completed","lastPrereq","slice","calculateProgressPercentage","totalChallenges","Object","keys","completedChallenges","values","progress","getNextChallenge","challengeIds","_userProgress$id","requirements","getRankFromProgress","p","totalScore","reduce","sum","score","rank","color"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/utils/ChallengeData.js"],"sourcesContent":["// src/utils/challengeData.js\r\n\r\nexport const challengeDetailsData = {\r\n  challenge1: {\r\n    id: 'challenge1',\r\n    title: 'Robot Configuration',\r\n    description: 'Learn manual robot positioning and develop intuition about joint angles',\r\n    type: 'manual',\r\n    difficulty: 'Beginner',\r\n    estimatedTime: '15-20 minutes',\r\n    objectives: [\r\n      'Position robot to absolute joint angles',\r\n      'Position robot to relative joint angles', \r\n      'Develop intuition about robot configurations',\r\n      'Practice manual robot control'\r\n    ],\r\n    prerequisites: [\r\n      'Basic understanding of robot joints',\r\n      'Familiarity with angle measurements'\r\n    ],\r\n    learningOutcomes: [\r\n      'Manual robot positioning skills',\r\n      'Understanding of absolute vs relative angles',\r\n      'Robot configuration intuition',\r\n      'Precision movement control'\r\n    ],\r\n    maxScore: 100,\r\n    passingScore: 60,\r\n    icon: 'Settings',\r\n    category: 'fundamentals',\r\n    tags: ['manual-control', 'positioning', 'basics'],\r\n    hardwareRequired: true,\r\n    robotConnectionRequired: true\r\n  },\r\n  \r\n  C2: {\r\n    title: \"Controls Quiz\",\r\n    type: \"Interactive Quiz\",\r\n    difficulty: \"Beginner\", \r\n    description: \"Test your theoretical understanding of control systems, feedback loops, and robotics fundamentals.\",\r\n    objectives: [\r\n      \"Demonstrate control theory knowledge\",\r\n      \"Understand feedback mechanisms\",\r\n      \"Master stability concepts\",\r\n      \"Apply control principles\"\r\n    ],\r\n    successCriteria: [\r\n      \"Score minimum 80% on quiz\",\r\n      \"Answer all sections correctly\",\r\n      \"Complete within time limit\"\r\n    ],\r\n    equipment: \"Interactive Quiz Interface\",\r\n    timeLimit: \"20 minutes\",\r\n    scoring: \"Points per correct answer with time bonus\",\r\n    technicalDetails: {\r\n      questionTypes: [\r\n        \"Multiple choice\",\r\n        \"True/False\",\r\n        \"Diagram interpretation\",\r\n        \"Calculation problems\"\r\n      ],\r\n      topics: [\r\n        \"Open vs Closed loop control\",\r\n        \"PID control principles\",\r\n        \"System stability\",\r\n        \"Transfer functions\",\r\n        \"Feedback mechanisms\"\r\n      ],\r\n      passingScore: 80\r\n    }\r\n  },\r\n  \r\n  C3: {\r\n    title: \"PD Gain Tuning\",\r\n    type: \"Parameter Optimization\",\r\n    difficulty: \"Beginner\",\r\n    description: \"Learn controller design by tuning Proportional and Derivative gains for optimal robot performance.\",\r\n    objectives: [\r\n      \"Tune KP and KD parameters effectively\",\r\n      \"Achieve target settling time < 3.0s\",\r\n      \"Minimize overshoot < 20%\",\r\n      \"Reduce steady-state error < 0.02\"\r\n    ],\r\n    successCriteria: [\r\n      \"Meet all performance metrics\",\r\n      \"Stable controller response\",\r\n      \"No oscillations or instability\"\r\n    ],\r\n    equipment: \"PD Controller Interface + Robot\",\r\n    timeLimit: \"25 minutes\",\r\n    scoring: \"Performance metrics weighted scoring\",\r\n    technicalDetails: {\r\n      parameterRanges: {\r\n        kp: { min: 0, max: 16500, default: 10.0 },\r\n        kd: { min: 0, max: 10.0, default: 1.0 }\r\n      },\r\n      performanceMetrics: {\r\n        settlingTime: { target: 3.0, weight: 40 },\r\n        overshoot: { target: 20.0, weight: 30 },\r\n        steadyStateError: { target: 0.02, weight: 30 }\r\n      },\r\n      targetAngle: 1.5,\r\n      samplingRate: 0.01\r\n    }\r\n  },\r\n  \r\n  C4: {\r\n    title: \"Workspace Identification\", \r\n    type: \"Reachability Analysis\",\r\n    difficulty: \"Beginner\",\r\n    description: \"Determine if randomly generated points are within the robot's reachable workspace.\",\r\n    objectives: [\r\n      \"Analyze 6 random test points\",\r\n      \"Determine reachability accurately\",\r\n      \"Understand workspace limitations\",\r\n      \"Achieve 80% accuracy minimum\"\r\n    ],\r\n    successCriteria: [\r\n      \"Minimum 5 out of 6 correct answers\",\r\n      \"Demonstrate workspace understanding\",\r\n      \"Complete within time limit\"\r\n    ],\r\n    equipment: \"Workspace Visualization Tool\",\r\n    timeLimit: \"20 minutes\", \r\n    scoring: \"Binary scoring with accuracy bonus\",\r\n    technicalDetails: {\r\n      robotConfiguration: {\r\n        linkLengths: [0.10, 0.07, 0.05], // meters\r\n        jointLimits: [\r\n          { min: -Math.PI, max: Math.PI },\r\n          { min: -Math.PI/2, max: Math.PI/2 },\r\n          { min: -Math.PI/2, max: Math.PI/2 }\r\n        ]\r\n      },\r\n      workspaceType: \"2D planar\",\r\n      accuracyThreshold: 0.8,\r\n      pointGenerationRange: {\r\n        x: [-0.25, 0.25],\r\n        y: [-0.25, 0.25]\r\n      }\r\n    }\r\n  },\r\n  \r\n  C5: {\r\n    title: \"2R - EE Orientation & Position\",\r\n    type: \"Kinematics Verification\",\r\n    difficulty: \"Beginner\",\r\n    description: \"Verify end effector kinematics calculations for a 2R robotic manipulator system.\",\r\n    objectives: [\r\n      \"Calculate forward kinematics correctly\",\r\n      \"Verify orientation matrices\",\r\n      \"Check position calculations\", \r\n      \"Apply joint limit constraints\"\r\n    ],\r\n    successCriteria: [\r\n      \"Matrix tolerance within 0.1\",\r\n      \"Position tolerance within 0.01m\",\r\n      \"All calculations verified\"\r\n    ],\r\n    equipment: \"2R Robot Kinematics Interface\", \r\n    timeLimit: \"30 minutes\",\r\n    scoring: \"Graded scoring per calculation step\",\r\n    technicalDetails: {\r\n      robotType: \"2R planar manipulator\",\r\n      linkLengths: [0.10, 0.07], // L1, L2 in meters\r\n      jointLimits: {\r\n        joint1: { min: -90, max: 90 }, // degrees\r\n        joint2: { min: -90, max: 90 }\r\n      },\r\n      tolerances: {\r\n        orientation: 0.1,\r\n        position: 0.01\r\n      },\r\n      outputFormat: {\r\n        angles: \"degrees\",\r\n        positions: \"meters\",\r\n        matrices: \"3x3 rotation\"\r\n      },\r\n      scoringBreakdown: {\r\n        forwardKinematics: 40,\r\n        orientationCalculation: 30,\r\n        matrixVerification: 30\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Helper functions for challenge data\r\nexport const getChallengeById = (id) => {\r\n  return challengeDetailsData[id] || null;\r\n};\r\n\r\nexport const getChallengeDifficulty = (id) => {\r\n  const challenge = getChallengeById(id);\r\n  return challenge ? challenge.difficulty : 'Unknown';\r\n};\r\n\r\nexport const getChallengeType = (id) => {\r\n  const challenge = getChallengeById(id);\r\n  return challenge ? challenge.type : 'Unknown';\r\n};\r\n\r\nexport const getChallengePrerequisites = (id) => {\r\n  const prerequisites = {\r\n    C1: [],\r\n    C2: ['C1'],\r\n    C3: ['C1', 'C2'],\r\n    C4: ['C1', 'C2', 'C3'],\r\n    C5: ['C1', 'C2', 'C3', 'C4']\r\n  };\r\n  return prerequisites[id] || [];\r\n};\r\n\r\nexport const getUnlockRequirements = (id, userProgress = {}) => {\r\n  const prerequisites = getChallengePrerequisites(id);\r\n  \r\n  if (prerequisites.length === 0) {\r\n    return { unlocked: true, message: 'Available' };\r\n  }\r\n  \r\n  const unmetPrereqs = prerequisites.filter(prereq => \r\n    !userProgress[prereq]?.completed\r\n  );\r\n  \r\n  if (unmetPrereqs.length > 0) {\r\n    const lastPrereq = unmetPrereqs[unmetPrereqs.length - 1];\r\n    return { \r\n      unlocked: false, \r\n      message: `Complete Challenge ${lastPrereq.slice(1)}` \r\n    };\r\n  }\r\n  \r\n  return { unlocked: true, message: 'Available' };\r\n};\r\n\r\nexport const calculateProgressPercentage = (userProgress = {}) => {\r\n  const totalChallenges = Object.keys(challengeDetailsData).length;\r\n  const completedChallenges = Object.values(userProgress).filter(\r\n    progress => progress.completed\r\n  ).length;\r\n  \r\n  return (completedChallenges / totalChallenges) * 100;\r\n};\r\n\r\nexport const getNextChallenge = (userProgress = {}) => {\r\n  const challengeIds = ['C1', 'C2', 'C3', 'C4', 'C5'];\r\n  \r\n  for (const id of challengeIds) {\r\n    const requirements = getUnlockRequirements(id, userProgress);\r\n    if (requirements.unlocked && !userProgress[id]?.completed) {\r\n      return id;\r\n    }\r\n  }\r\n  \r\n  return null; // All challenges completed\r\n};\r\n\r\nexport const getRankFromProgress = (userProgress = {}) => {\r\n  const completed = Object.values(userProgress).filter(p => p.completed).length;\r\n  const totalScore = Object.values(userProgress).reduce((sum, p) => sum + (p.score || 0), 0);\r\n  \r\n  if (completed >= 4 && totalScore >= 350) {\r\n    return { rank: 'Robotics Master', color: '#ffd60a', icon: 'fas fa-crown' };\r\n  } else if (completed >= 3 && totalScore >= 250) {\r\n    return { rank: 'Robotics Expert', color: '#0cc0df', icon: 'fas fa-star' };\r\n  } else if (completed >= 2 && totalScore >= 150) {\r\n    return { rank: 'Robotics Apprentice', color: '#28a745', icon: 'fas fa-medal' };\r\n  } else if (completed >= 1) {\r\n    return { rank: 'Robotics Novice', color: '#ffc107', icon: 'fas fa-seedling' };\r\n  } else {\r\n    return { rank: 'Rising Roboticist', color: '#6c757d', icon: 'fas fa-user-graduate' };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
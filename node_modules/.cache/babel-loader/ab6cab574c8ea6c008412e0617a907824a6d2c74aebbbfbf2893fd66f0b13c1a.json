{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\challenges\\\\Challenge1.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, Grid, Paper, Typography, Chip, LinearProgress } from '@mui/material';\nimport { useRobotController } from '../../hooks/useRobotController';\nimport { useChallenges } from '../../hooks/useChallenges';\nimport RobotVisualizer from '../robot/RobotVisualizer';\nimport ControlPanel from '../robot/ControlPanel';\nimport CodeEditor from './CodeEditor';\nimport ConsoleOutput from './ConsoleOutput';\nimport ChallengeProgressPanel from './ChallengeProgressPanel';\nimport { updateChallengeProgress } from '../../store/challengeSlice';\nimport { setRobotData, setConnectionStatus } from '../../store/robotSlice';\nimport { challengeService } from '../../services/challengeService';\nimport { robotService } from '../../services/robotService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Challenge1 = () => {\n  _s();\n  var _robot$telemetry, _robot$telemetry$join;\n  const dispatch = useDispatch();\n  const {\n    robot,\n    isConnected\n  } = useSelector(state => state.robot);\n  const {\n    currentChallenge,\n    userProgress\n  } = useSelector(state => state.challenges);\n  const {\n    user\n  } = useSelector(state => state.auth);\n\n  // Custom hooks\n  const {\n    executeCode,\n    measurePosition,\n    emergencyStop,\n    isExecuting,\n    executionResults\n  } = useRobotController();\n  const {\n    submitChallenge,\n    startChallenge,\n    getChallengeData\n  } = useChallenges();\n\n  // Local state\n  const [code, setCode] = useState(`# Challenge 1: Robot Configuration\n# Move the robot to target position [30, 0, 0] degrees\n\nimport robot_api as robot\nimport time\n\ndef main():\n    # Connect to robot\n    robot.connect()\n    print(\"Robot connected successfully!\")\n    \n    # Define target configuration\n    target_angles = [30, 0, 0]  # degrees\n    \n    # Move each joint to target position\n    for i, angle in enumerate(target_angles):\n        joint_id = i + 1\n        print(f\"Moving Joint {joint_id} to {angle} degrees...\")\n        robot.move_joint(joint_id, angle)\n        time.sleep(0.5)  # Small delay between movements\n    \n    # Wait for movement completion\n    print(\"Waiting for robot to reach target...\")\n    time.sleep(2)\n    \n    # Verify position\n    current_pos = robot.get_position()\n    print(f\"Current position: {current_pos}\")\n    \n    # Calculate accuracy\n    error = robot.calculate_error(current_pos, target_angles)\n    print(f\"Position error: {error:.3f} degrees\")\n    \n    if error < 5.0:\n        print(\"‚úÖ Challenge completed successfully!\")\n        print(\"Target reached within acceptable tolerance.\")\n    else:\n        print(\"‚ö†Ô∏è Try adjusting your approach for better accuracy.\")\n        print(\"Tip: Check joint limits and movement precision.\")\n    \n    return error < 5.0\n\n# Execute the challenge\nif __name__ == \"__main__\":\n    success = main()\n`);\n  const [challengeState, setChallengeState] = useState({\n    isStarted: false,\n    score: 0,\n    accuracy: 100,\n    attempts: 0,\n    bestScore: 0,\n    timeElapsed: 0,\n    targetPosition: [30, 0, 0],\n    currentError: 0,\n    isCompleted: false\n  });\n  const [consoleMessages, setConsoleMessages] = useState([{\n    id: 1,\n    timestamp: new Date().toLocaleTimeString(),\n    type: 'info',\n    message: 'üöÄ Challenge 1: Robot Configuration System initialized'\n  }, {\n    id: 2,\n    timestamp: new Date().toLocaleTimeString(),\n    type: 'info',\n    message: 'üìö Objective: Move robot to target position [30¬∞, 0¬∞, 0¬∞]'\n  }, {\n    id: 3,\n    timestamp: new Date().toLocaleTimeString(),\n    type: 'info',\n    message: 'üéØ Success criteria: Position error < 5 degrees'\n  }]);\n\n  // Initialize challenge data\n  useEffect(() => {\n    const initializeChallenge = async () => {\n      try {\n        const challengeData = await getChallengeData('C1');\n        if (challengeData) {\n          setChallengeState(prev => {\n            var _challengeData$parame;\n            return {\n              ...prev,\n              targetPosition: ((_challengeData$parame = challengeData.parameters) === null || _challengeData$parame === void 0 ? void 0 : _challengeData$parame.target_angles) || [30, 0, 0],\n              bestScore: (userProgress === null || userProgress === void 0 ? void 0 : userProgress.best_score) || 0\n            };\n          });\n        }\n      } catch (error) {\n        addConsoleMessage('error', `Failed to load challenge data: ${error.message}`);\n      }\n    };\n    initializeChallenge();\n  }, []);\n\n  // Real-time robot data updates\n  useEffect(() => {\n    if (isConnected && robot.telemetry) {\n      const currentError = calculatePositionError(robot.telemetry.joint_angles, challengeState.targetPosition);\n      setChallengeState(prev => ({\n        ...prev,\n        currentError,\n        accuracy: Math.max(0, 100 - currentError * 2) // 2% penalty per degree\n      }));\n    }\n  }, [robot.telemetry, challengeState.targetPosition, isConnected]);\n\n  // Timer for challenge duration\n  useEffect(() => {\n    let interval;\n    if (challengeState.isStarted && !challengeState.isCompleted) {\n      interval = setInterval(() => {\n        setChallengeState(prev => ({\n          ...prev,\n          timeElapsed: prev.timeElapsed + 1\n        }));\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [challengeState.isStarted, challengeState.isCompleted]);\n\n  // Helper functions\n  const addConsoleMessage = useCallback((type, message) => {\n    const newMessage = {\n      id: Date.now() + Math.random(),\n      timestamp: new Date().toLocaleTimeString(),\n      type,\n      message\n    };\n    setConsoleMessages(prev => [...prev, newMessage]);\n  }, []);\n  const calculatePositionError = (currentAngles, targetAngles) => {\n    if (!currentAngles || !targetAngles) return 0;\n    const errors = currentAngles.map((angle, i) => Math.abs(angle - targetAngles[i]));\n    return Math.max(...errors);\n  };\n  const calculateScore = (error, attempts, timeElapsed) => {\n    const baseScore = Math.max(0, 100 - error * 5); // 5 points per degree error\n    const timeBonus = Math.max(0, 50 - timeElapsed); // Time bonus\n    const attemptPenalty = (attempts - 1) * 10; // 10 points penalty per retry\n    return Math.max(0, Math.round(baseScore + timeBonus - attemptPenalty));\n  };\n\n  // Event handlers\n  const handleStartChallenge = async () => {\n    if (!isConnected) {\n      addConsoleMessage('error', '‚ùå Robot not connected. Please connect robot first.');\n      return;\n    }\n    try {\n      await startChallenge('C1');\n      setChallengeState(prev => ({\n        ...prev,\n        isStarted: true,\n        timeElapsed: 0\n      }));\n      addConsoleMessage('success', 'üöÄ Challenge 1 started! Write your code and execute it.');\n    } catch (error) {\n      addConsoleMessage('error', `Failed to start challenge: ${error.message}`);\n    }\n  };\n  const handleExecuteCode = async () => {\n    if (!isConnected) {\n      addConsoleMessage('error', '‚ùå Robot not connected');\n      return;\n    }\n    if (!challengeState.isStarted) {\n      addConsoleMessage('warning', '‚ö†Ô∏è Please start the challenge first');\n      return;\n    }\n    try {\n      setChallengeState(prev => ({\n        ...prev,\n        attempts: prev.attempts + 1\n      }));\n      addConsoleMessage('info', 'üîÑ Executing Python code...');\n      addConsoleMessage('info', 'üì° Converting to robot commands...');\n\n      // Execute code through robot controller\n      const result = await executeCode(code, {\n        challengeId: 'C1',\n        targetPosition: challengeState.targetPosition\n      });\n      if (result.success) {\n        const error = result.positionError || challengeState.currentError;\n        const score = calculateScore(error, challengeState.attempts, challengeState.timeElapsed);\n        const isSuccess = error < 5.0;\n        setChallengeState(prev => ({\n          ...prev,\n          score,\n          currentError: error,\n          bestScore: Math.max(prev.bestScore, score),\n          isCompleted: isSuccess\n        }));\n        if (isSuccess) {\n          addConsoleMessage('success', '‚úÖ Challenge completed successfully!');\n          addConsoleMessage('success', `üéØ Final error: ${error.toFixed(2)}¬∞ (Target: <5¬∞)`);\n          addConsoleMessage('success', `üèÜ Score: ${score}/100`);\n\n          // Submit challenge results\n          await submitChallenge('C1', {\n            score,\n            accuracy: challengeState.accuracy,\n            attempts: challengeState.attempts,\n            timeElapsed: challengeState.timeElapsed,\n            positionError: error\n          });\n        } else {\n          addConsoleMessage('warning', `‚ö†Ô∏è Position error: ${error.toFixed(2)}¬∞ (Target: <5¬∞)`);\n          addConsoleMessage('info', 'üí° Tip: Adjust joint angles for better precision');\n        }\n      } else {\n        addConsoleMessage('error', `‚ùå Execution failed: ${result.error}`);\n      }\n    } catch (error) {\n      addConsoleMessage('error', `‚ùå Code execution error: ${error.message}`);\n    }\n  };\n  const handleMeasurePosition = async () => {\n    try {\n      const position = await measurePosition();\n      addConsoleMessage('info', `üìè Current position: [${position.map(a => a.toFixed(2)).join(', ')}]¬∞`);\n      const error = calculatePositionError(position, challengeState.targetPosition);\n      addConsoleMessage('info', `üìê Error from target: ${error.toFixed(2)}¬∞`);\n    } catch (error) {\n      addConsoleMessage('error', `Failed to measure position: ${error.message}`);\n    }\n  };\n  const handleEmergencyStop = async () => {\n    try {\n      await emergencyStop();\n      addConsoleMessage('warning', 'üõë EMERGENCY STOP ACTIVATED');\n      addConsoleMessage('info', 'üîí All robot movements halted');\n    } catch (error) {\n      addConsoleMessage('error', `Emergency stop failed: ${error.message}`);\n    }\n  };\n  const handleResetChallenge = () => {\n    setChallengeState(prev => ({\n      ...prev,\n      isStarted: false,\n      score: 0,\n      accuracy: 100,\n      attempts: 0,\n      timeElapsed: 0,\n      currentError: 0,\n      isCompleted: false\n    }));\n    addConsoleMessage('info', 'üîÑ Challenge reset. Ready to start again.');\n  };\n\n  // Format time display\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3,\n      maxWidth: '1400px',\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 4,\n        mb: 3,\n        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"flex-start\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            component: \"h1\",\n            gutterBottom: true,\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"\\uD83E\\uDD16 Challenge 1: Robot Configuration\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            sx: {\n              opacity: 0.9,\n              mb: 2\n            },\n            children: \"Master precise robot positioning using Python programming and real-time feedback\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            gap: 2,\n            flexWrap: \"wrap\",\n            children: [/*#__PURE__*/_jsxDEV(Chip, {\n              label: \"Beginner\",\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.2)',\n                color: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: \"15-30 minutes\",\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.2)',\n                color: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: \"Python + Kinematics\",\n              sx: {\n                bgcolor: 'rgba(255,255,255,0.2)',\n                color: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: [challengeState.score, \"/100\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              opacity: 0.8\n            },\n            children: \"Current Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChallengeProgressPanel, {\n      challengeState: challengeState,\n      onStart: handleStartChallenge,\n      onReset: handleResetChallenge,\n      isConnected: isConnected,\n      isExecuting: isExecuting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      sx: {\n        mt: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '500px',\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: 'grey.50'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontWeight: 'bold'\n              },\n              children: \"\\uD83D\\uDC0D Python Code Editor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"Write Python code to control the robot joints\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flex: 1\n            },\n            children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n              code: code,\n              onChange: setCode,\n              onExecute: handleExecuteCode,\n              isExecuting: isExecuting,\n              language: \"python\",\n              theme: \"vs-dark\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '500px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: 'grey.50'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                fontWeight: 'bold'\n              },\n              children: \"\\uD83D\\uDD2C Real-time Robot Simulation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: \"Interactive 3-DOF robot arm with workspace visualization\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              height: 'calc(100% - 80px)'\n            },\n            children: /*#__PURE__*/_jsxDEV(RobotVisualizer, {\n              jointAngles: ((_robot$telemetry = robot.telemetry) === null || _robot$telemetry === void 0 ? void 0 : _robot$telemetry.joint_angles) || [0, 0, 0],\n              targetAngles: challengeState.targetPosition,\n              isAnimating: isExecuting,\n              showWorkspace: true,\n              showTrajectory: true,\n              showTargetReached: challengeState.currentError < 5,\n              config: {\n                width: '100%',\n                height: '100%',\n                enableInteraction: true,\n                showJointLimits: true,\n                showRealTimeData: true\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 410,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(ControlPanel, {\n          onMeasurePosition: handleMeasurePosition,\n          onEmergencyStop: handleEmergencyStop,\n          isConnected: isConnected,\n          isExecuting: isExecuting,\n          robotData: robot.telemetry,\n          challengeMode: \"C1\",\n          onQuickAction: action => {\n            addConsoleMessage('info', `Quick action: ${action}`);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"\\uD83D\\uDCCA Real-time Telemetry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), robot.telemetry && /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              gutterBottom: true,\n              children: \"Joint Positions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this), (_robot$telemetry$join = robot.telemetry.joint_angles) === null || _robot$telemetry$join === void 0 ? void 0 : _robot$telemetry$join.map((angle, index) => /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                mb: 0.5,\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: [\"Joint \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  fontFamily: \"monospace\",\n                  children: [angle.toFixed(2), \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: Math.abs(angle) / 150 * 100,\n                sx: {\n                  height: 6,\n                  borderRadius: 3\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"text.secondary\",\n              gutterBottom: true,\n              sx: {\n                mt: 3\n              },\n              children: \"System Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: 1,\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: \"Connection\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                  label: isConnected ? \"Connected\" : \"Disconnected\",\n                  color: isConnected ? \"success\" : \"error\",\n                  size: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 478,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: \"Position Error\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  fontFamily: \"monospace\",\n                  children: [challengeState.currentError.toFixed(2), \"\\xB0\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: \"Time Elapsed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  fontFamily: \"monospace\",\n                  children: formatTime(challengeState.timeElapsed)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        lg: 4,\n        children: /*#__PURE__*/_jsxDEV(ConsoleOutput, {\n          messages: consoleMessages,\n          onClear: () => setConsoleMessages([]),\n          height: \"400px\",\n          enableFiltering: true,\n          enableExport: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n};\n_s(Challenge1, \"of4u7e5fx21mjAdEm5aeDaZ5zhA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useRobotController, useChallenges];\n});\n_c = Challenge1;\nexport default Challenge1;\nvar _c;\n$RefreshReg$(_c, \"Challenge1\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useDispatch","useSelector","Box","Grid","Paper","Typography","Chip","LinearProgress","useRobotController","useChallenges","RobotVisualizer","ControlPanel","CodeEditor","ConsoleOutput","ChallengeProgressPanel","updateChallengeProgress","setRobotData","setConnectionStatus","challengeService","robotService","jsxDEV","_jsxDEV","Challenge1","_s","_robot$telemetry","_robot$telemetry$join","dispatch","robot","isConnected","state","currentChallenge","userProgress","challenges","user","auth","executeCode","measurePosition","emergencyStop","isExecuting","executionResults","submitChallenge","startChallenge","getChallengeData","code","setCode","challengeState","setChallengeState","isStarted","score","accuracy","attempts","bestScore","timeElapsed","targetPosition","currentError","isCompleted","consoleMessages","setConsoleMessages","id","timestamp","Date","toLocaleTimeString","type","message","initializeChallenge","challengeData","prev","_challengeData$parame","parameters","target_angles","best_score","error","addConsoleMessage","telemetry","calculatePositionError","joint_angles","Math","max","interval","setInterval","clearInterval","newMessage","now","random","currentAngles","targetAngles","errors","map","angle","i","abs","calculateScore","baseScore","timeBonus","attemptPenalty","round","handleStartChallenge","handleExecuteCode","result","challengeId","success","positionError","isSuccess","toFixed","handleMeasurePosition","position","a","join","handleEmergencyStop","handleResetChallenge","formatTime","seconds","mins","floor","secs","toString","padStart","sx","p","maxWidth","mx","children","elevation","mb","background","color","display","justifyContent","alignItems","variant","component","gutterBottom","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","opacity","gap","flexWrap","label","bgcolor","textAlign","onStart","onReset","container","spacing","mt","item","xs","lg","height","flexDirection","borderBottom","borderColor","flex","onChange","onExecute","language","theme","jointAngles","isAnimating","showWorkspace","showTrajectory","showTargetReached","config","width","enableInteraction","showJointLimits","showRealTimeData","md","onMeasurePosition","onEmergencyStop","robotData","challengeMode","onQuickAction","action","index","fontFamily","value","borderRadius","size","messages","onClear","enableFiltering","enableExport","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/challenges/Challenge1.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Box, Grid, Paper, Typography, Chip, LinearProgress } from '@mui/material';\r\nimport { useRobotController } from '../../hooks/useRobotController';\r\nimport { useChallenges } from '../../hooks/useChallenges';\r\nimport RobotVisualizer from '../robot/RobotVisualizer';\r\nimport ControlPanel from '../robot/ControlPanel';\r\nimport CodeEditor from './CodeEditor';\r\nimport ConsoleOutput from './ConsoleOutput';\r\nimport ChallengeProgressPanel from './ChallengeProgressPanel';\r\nimport { updateChallengeProgress } from '../../store/challengeSlice';\r\nimport { setRobotData, setConnectionStatus } from '../../store/robotSlice';\r\nimport { challengeService } from '../../services/challengeService';\r\nimport { robotService } from '../../services/robotService';\r\n\r\nconst Challenge1 = () => {\r\n  const dispatch = useDispatch();\r\n  const { robot, isConnected } = useSelector(state => state.robot);\r\n  const { currentChallenge, userProgress } = useSelector(state => state.challenges);\r\n  const { user } = useSelector(state => state.auth);\r\n  \r\n  // Custom hooks\r\n  const { \r\n    executeCode, \r\n    measurePosition, \r\n    emergencyStop, \r\n    isExecuting,\r\n    executionResults \r\n  } = useRobotController();\r\n  \r\n  const { \r\n    submitChallenge, \r\n    startChallenge,\r\n    getChallengeData \r\n  } = useChallenges();\r\n\r\n  // Local state\r\n  const [code, setCode] = useState(`# Challenge 1: Robot Configuration\r\n# Move the robot to target position [30, 0, 0] degrees\r\n\r\nimport robot_api as robot\r\nimport time\r\n\r\ndef main():\r\n    # Connect to robot\r\n    robot.connect()\r\n    print(\"Robot connected successfully!\")\r\n    \r\n    # Define target configuration\r\n    target_angles = [30, 0, 0]  # degrees\r\n    \r\n    # Move each joint to target position\r\n    for i, angle in enumerate(target_angles):\r\n        joint_id = i + 1\r\n        print(f\"Moving Joint {joint_id} to {angle} degrees...\")\r\n        robot.move_joint(joint_id, angle)\r\n        time.sleep(0.5)  # Small delay between movements\r\n    \r\n    # Wait for movement completion\r\n    print(\"Waiting for robot to reach target...\")\r\n    time.sleep(2)\r\n    \r\n    # Verify position\r\n    current_pos = robot.get_position()\r\n    print(f\"Current position: {current_pos}\")\r\n    \r\n    # Calculate accuracy\r\n    error = robot.calculate_error(current_pos, target_angles)\r\n    print(f\"Position error: {error:.3f} degrees\")\r\n    \r\n    if error < 5.0:\r\n        print(\"‚úÖ Challenge completed successfully!\")\r\n        print(\"Target reached within acceptable tolerance.\")\r\n    else:\r\n        print(\"‚ö†Ô∏è Try adjusting your approach for better accuracy.\")\r\n        print(\"Tip: Check joint limits and movement precision.\")\r\n    \r\n    return error < 5.0\r\n\r\n# Execute the challenge\r\nif __name__ == \"__main__\":\r\n    success = main()\r\n`);\r\n\r\n  const [challengeState, setChallengeState] = useState({\r\n    isStarted: false,\r\n    score: 0,\r\n    accuracy: 100,\r\n    attempts: 0,\r\n    bestScore: 0,\r\n    timeElapsed: 0,\r\n    targetPosition: [30, 0, 0],\r\n    currentError: 0,\r\n    isCompleted: false\r\n  });\r\n\r\n  const [consoleMessages, setConsoleMessages] = useState([\r\n    {\r\n      id: 1,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      type: 'info',\r\n      message: 'üöÄ Challenge 1: Robot Configuration System initialized'\r\n    },\r\n    {\r\n      id: 2,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      type: 'info',\r\n      message: 'üìö Objective: Move robot to target position [30¬∞, 0¬∞, 0¬∞]'\r\n    },\r\n    {\r\n      id: 3,\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      type: 'info',\r\n      message: 'üéØ Success criteria: Position error < 5 degrees'\r\n    }\r\n  ]);\r\n\r\n  // Initialize challenge data\r\n  useEffect(() => {\r\n    const initializeChallenge = async () => {\r\n      try {\r\n        const challengeData = await getChallengeData('C1');\r\n        if (challengeData) {\r\n          setChallengeState(prev => ({\r\n            ...prev,\r\n            targetPosition: challengeData.parameters?.target_angles || [30, 0, 0],\r\n            bestScore: userProgress?.best_score || 0\r\n          }));\r\n        }\r\n      } catch (error) {\r\n        addConsoleMessage('error', `Failed to load challenge data: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    initializeChallenge();\r\n  }, []);\r\n\r\n  // Real-time robot data updates\r\n  useEffect(() => {\r\n    if (isConnected && robot.telemetry) {\r\n      const currentError = calculatePositionError(\r\n        robot.telemetry.joint_angles, \r\n        challengeState.targetPosition\r\n      );\r\n      \r\n      setChallengeState(prev => ({\r\n        ...prev,\r\n        currentError,\r\n        accuracy: Math.max(0, 100 - currentError * 2) // 2% penalty per degree\r\n      }));\r\n    }\r\n  }, [robot.telemetry, challengeState.targetPosition, isConnected]);\r\n\r\n  // Timer for challenge duration\r\n  useEffect(() => {\r\n    let interval;\r\n    if (challengeState.isStarted && !challengeState.isCompleted) {\r\n      interval = setInterval(() => {\r\n        setChallengeState(prev => ({\r\n          ...prev,\r\n          timeElapsed: prev.timeElapsed + 1\r\n        }));\r\n      }, 1000);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [challengeState.isStarted, challengeState.isCompleted]);\r\n\r\n  // Helper functions\r\n  const addConsoleMessage = useCallback((type, message) => {\r\n    const newMessage = {\r\n      id: Date.now() + Math.random(),\r\n      timestamp: new Date().toLocaleTimeString(),\r\n      type,\r\n      message\r\n    };\r\n    setConsoleMessages(prev => [...prev, newMessage]);\r\n  }, []);\r\n\r\n  const calculatePositionError = (currentAngles, targetAngles) => {\r\n    if (!currentAngles || !targetAngles) return 0;\r\n    const errors = currentAngles.map((angle, i) => \r\n      Math.abs(angle - targetAngles[i])\r\n    );\r\n    return Math.max(...errors);\r\n  };\r\n\r\n  const calculateScore = (error, attempts, timeElapsed) => {\r\n    const baseScore = Math.max(0, 100 - error * 5); // 5 points per degree error\r\n    const timeBonus = Math.max(0, 50 - timeElapsed); // Time bonus\r\n    const attemptPenalty = (attempts - 1) * 10; // 10 points penalty per retry\r\n    return Math.max(0, Math.round(baseScore + timeBonus - attemptPenalty));\r\n  };\r\n\r\n  // Event handlers\r\n  const handleStartChallenge = async () => {\r\n    if (!isConnected) {\r\n      addConsoleMessage('error', '‚ùå Robot not connected. Please connect robot first.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await startChallenge('C1');\r\n      setChallengeState(prev => ({\r\n        ...prev,\r\n        isStarted: true,\r\n        timeElapsed: 0\r\n      }));\r\n      addConsoleMessage('success', 'üöÄ Challenge 1 started! Write your code and execute it.');\r\n    } catch (error) {\r\n      addConsoleMessage('error', `Failed to start challenge: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleExecuteCode = async () => {\r\n    if (!isConnected) {\r\n      addConsoleMessage('error', '‚ùå Robot not connected');\r\n      return;\r\n    }\r\n\r\n    if (!challengeState.isStarted) {\r\n      addConsoleMessage('warning', '‚ö†Ô∏è Please start the challenge first');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setChallengeState(prev => ({\r\n        ...prev,\r\n        attempts: prev.attempts + 1\r\n      }));\r\n\r\n      addConsoleMessage('info', 'üîÑ Executing Python code...');\r\n      addConsoleMessage('info', 'üì° Converting to robot commands...');\r\n\r\n      // Execute code through robot controller\r\n      const result = await executeCode(code, {\r\n        challengeId: 'C1',\r\n        targetPosition: challengeState.targetPosition\r\n      });\r\n\r\n      if (result.success) {\r\n        const error = result.positionError || challengeState.currentError;\r\n        const score = calculateScore(error, challengeState.attempts, challengeState.timeElapsed);\r\n        const isSuccess = error < 5.0;\r\n\r\n        setChallengeState(prev => ({\r\n          ...prev,\r\n          score,\r\n          currentError: error,\r\n          bestScore: Math.max(prev.bestScore, score),\r\n          isCompleted: isSuccess\r\n        }));\r\n\r\n        if (isSuccess) {\r\n          addConsoleMessage('success', '‚úÖ Challenge completed successfully!');\r\n          addConsoleMessage('success', `üéØ Final error: ${error.toFixed(2)}¬∞ (Target: <5¬∞)`);\r\n          addConsoleMessage('success', `üèÜ Score: ${score}/100`);\r\n          \r\n          // Submit challenge results\r\n          await submitChallenge('C1', {\r\n            score,\r\n            accuracy: challengeState.accuracy,\r\n            attempts: challengeState.attempts,\r\n            timeElapsed: challengeState.timeElapsed,\r\n            positionError: error\r\n          });\r\n        } else {\r\n          addConsoleMessage('warning', `‚ö†Ô∏è Position error: ${error.toFixed(2)}¬∞ (Target: <5¬∞)`);\r\n          addConsoleMessage('info', 'üí° Tip: Adjust joint angles for better precision');\r\n        }\r\n      } else {\r\n        addConsoleMessage('error', `‚ùå Execution failed: ${result.error}`);\r\n      }\r\n    } catch (error) {\r\n      addConsoleMessage('error', `‚ùå Code execution error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleMeasurePosition = async () => {\r\n    try {\r\n      const position = await measurePosition();\r\n      addConsoleMessage('info', `üìè Current position: [${position.map(a => a.toFixed(2)).join(', ')}]¬∞`);\r\n      \r\n      const error = calculatePositionError(position, challengeState.targetPosition);\r\n      addConsoleMessage('info', `üìê Error from target: ${error.toFixed(2)}¬∞`);\r\n    } catch (error) {\r\n      addConsoleMessage('error', `Failed to measure position: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleEmergencyStop = async () => {\r\n    try {\r\n      await emergencyStop();\r\n      addConsoleMessage('warning', 'üõë EMERGENCY STOP ACTIVATED');\r\n      addConsoleMessage('info', 'üîí All robot movements halted');\r\n    } catch (error) {\r\n      addConsoleMessage('error', `Emergency stop failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleResetChallenge = () => {\r\n    setChallengeState(prev => ({\r\n      ...prev,\r\n      isStarted: false,\r\n      score: 0,\r\n      accuracy: 100,\r\n      attempts: 0,\r\n      timeElapsed: 0,\r\n      currentError: 0,\r\n      isCompleted: false\r\n    }));\r\n    addConsoleMessage('info', 'üîÑ Challenge reset. Ready to start again.');\r\n  };\r\n\r\n  // Format time display\r\n  const formatTime = (seconds) => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3, maxWidth: '1400px', mx: 'auto' }}>\r\n      {/* Challenge Header */}\r\n      <Paper elevation={2} sx={{ p: 4, mb: 3, background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>\r\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\">\r\n          <Box>\r\n            <Typography variant=\"h3\" component=\"h1\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n              ü§ñ Challenge 1: Robot Configuration\r\n            </Typography>\r\n            <Typography variant=\"h6\" sx={{ opacity: 0.9, mb: 2 }}>\r\n              Master precise robot positioning using Python programming and real-time feedback\r\n            </Typography>\r\n            \r\n            <Box display=\"flex\" gap={2} flexWrap=\"wrap\">\r\n              <Chip \r\n                label=\"Beginner\" \r\n                sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} \r\n              />\r\n              <Chip \r\n                label=\"15-30 minutes\" \r\n                sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} \r\n              />\r\n              <Chip \r\n                label=\"Python + Kinematics\" \r\n                sx={{ bgcolor: 'rgba(255,255,255,0.2)', color: 'white' }} \r\n              />\r\n            </Box>\r\n          </Box>\r\n          \r\n          <Box textAlign=\"right\">\r\n            <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\r\n              {challengeState.score}/100\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\r\n              Current Score\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n\r\n      {/* Challenge Progress Panel */}\r\n      <ChallengeProgressPanel \r\n        challengeState={challengeState}\r\n        onStart={handleStartChallenge}\r\n        onReset={handleResetChallenge}\r\n        isConnected={isConnected}\r\n        isExecuting={isExecuting}\r\n      />\r\n\r\n      {/* Main Content Grid */}\r\n      <Grid container spacing={3} sx={{ mt: 1 }}>\r\n        {/* Code Editor */}\r\n        <Grid item xs={12} lg={6}>\r\n          <Paper elevation={3} sx={{ height: '500px', display: 'flex', flexDirection: 'column' }}>\r\n            <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider', bgcolor: 'grey.50' }}>\r\n              <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                üêç Python Code Editor\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Write Python code to control the robot joints\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Box sx={{ flex: 1 }}>\r\n              <CodeEditor\r\n                code={code}\r\n                onChange={setCode}\r\n                onExecute={handleExecuteCode}\r\n                isExecuting={isExecuting}\r\n                language=\"python\"\r\n                theme=\"vs-dark\"\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Robot Visualization */}\r\n        <Grid item xs={12} lg={6}>\r\n          <Paper elevation={3} sx={{ height: '500px' }}>\r\n            <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider', bgcolor: 'grey.50' }}>\r\n              <Typography variant=\"h6\" sx={{ fontWeight: 'bold' }}>\r\n                üî¨ Real-time Robot Simulation\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"text.secondary\">\r\n                Interactive 3-DOF robot arm with workspace visualization\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Box sx={{ p: 2, height: 'calc(100% - 80px)' }}>\r\n              <RobotVisualizer\r\n                jointAngles={robot.telemetry?.joint_angles || [0, 0, 0]}\r\n                targetAngles={challengeState.targetPosition}\r\n                isAnimating={isExecuting}\r\n                showWorkspace={true}\r\n                showTrajectory={true}\r\n                showTargetReached={challengeState.currentError < 5}\r\n                config={{\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  enableInteraction: true,\r\n                  showJointLimits: true,\r\n                  showRealTimeData: true\r\n                }}\r\n              />\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Control Panel */}\r\n        <Grid item xs={12} md={6} lg={4}>\r\n          <ControlPanel\r\n            onMeasurePosition={handleMeasurePosition}\r\n            onEmergencyStop={handleEmergencyStop}\r\n            isConnected={isConnected}\r\n            isExecuting={isExecuting}\r\n            robotData={robot.telemetry}\r\n            challengeMode=\"C1\"\r\n            onQuickAction={(action) => {\r\n              addConsoleMessage('info', `Quick action: ${action}`);\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        {/* Real-time Data Display */}\r\n        <Grid item xs={12} md={6} lg={4}>\r\n          <Paper elevation={3} sx={{ p: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n              üìä Real-time Telemetry\r\n            </Typography>\r\n            \r\n            {robot.telemetry && (\r\n              <Box>\r\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\r\n                  Joint Positions\r\n                </Typography>\r\n                {robot.telemetry.joint_angles?.map((angle, index) => (\r\n                  <Box key={index} sx={{ mb: 2 }}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" mb={0.5}>\r\n                      <Typography variant=\"body2\">Joint {index + 1}</Typography>\r\n                      <Typography variant=\"body2\" fontFamily=\"monospace\">\r\n                        {angle.toFixed(2)}¬∞\r\n                      </Typography>\r\n                    </Box>\r\n                    <LinearProgress \r\n                      variant=\"determinate\" \r\n                      value={Math.abs(angle) / 150 * 100}\r\n                      sx={{ height: 6, borderRadius: 3 }}\r\n                    />\r\n                  </Box>\r\n                ))}\r\n                \r\n                <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom sx={{ mt: 3 }}>\r\n                  System Status\r\n                </Typography>\r\n                <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Connection</Typography>\r\n                    <Chip \r\n                      label={isConnected ? \"Connected\" : \"Disconnected\"}\r\n                      color={isConnected ? \"success\" : \"error\"}\r\n                      size=\"small\"\r\n                    />\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Position Error</Typography>\r\n                    <Typography variant=\"body2\" fontFamily=\"monospace\">\r\n                      {challengeState.currentError.toFixed(2)}¬∞\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"body2\">Time Elapsed</Typography>\r\n                    <Typography variant=\"body2\" fontFamily=\"monospace\">\r\n                      {formatTime(challengeState.timeElapsed)}\r\n                    </Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {/* Console Output */}\r\n        <Grid item xs={12} lg={4}>\r\n          <ConsoleOutput\r\n            messages={consoleMessages}\r\n            onClear={() => setConsoleMessages([])}\r\n            height=\"400px\"\r\n            enableFiltering={true}\r\n            enableExport={true}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Challenge1;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,IAAI,EAAEC,cAAc,QAAQ,eAAe;AAClF,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,aAAa,QAAQ,2BAA2B;AACzD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,SAASC,uBAAuB,QAAQ,4BAA4B;AACpE,SAASC,YAAY,EAAEC,mBAAmB,QAAQ,wBAAwB;AAC1E,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,YAAY,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,gBAAA,EAAAC,qBAAA;EACvB,MAAMC,QAAQ,GAAG1B,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAE2B,KAAK;IAAEC;EAAY,CAAC,GAAG3B,WAAW,CAAC4B,KAAK,IAAIA,KAAK,CAACF,KAAK,CAAC;EAChE,MAAM;IAAEG,gBAAgB;IAAEC;EAAa,CAAC,GAAG9B,WAAW,CAAC4B,KAAK,IAAIA,KAAK,CAACG,UAAU,CAAC;EACjF,MAAM;IAAEC;EAAK,CAAC,GAAGhC,WAAW,CAAC4B,KAAK,IAAIA,KAAK,CAACK,IAAI,CAAC;;EAEjD;EACA,MAAM;IACJC,WAAW;IACXC,eAAe;IACfC,aAAa;IACbC,WAAW;IACXC;EACF,CAAC,GAAG/B,kBAAkB,CAAC,CAAC;EAExB,MAAM;IACJgC,eAAe;IACfC,cAAc;IACdC;EACF,CAAC,GAAGjC,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAM,CAACkC,IAAI,EAAEC,OAAO,CAAC,GAAG/C,QAAQ,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;EAEA,MAAM,CAACgD,cAAc,EAAEC,iBAAiB,CAAC,GAAGjD,QAAQ,CAAC;IACnDkD,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAE,GAAG;IACbC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,CAAC;IACdC,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1BC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG5D,QAAQ,CAAC,CACrD;IACE6D,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAC1CC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;EACX,CAAC,EACD;IACEL,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAC1CC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;EACX,CAAC,EACD;IACEL,EAAE,EAAE,CAAC;IACLC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAC1CC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE;EACX,CAAC,CACF,CAAC;;EAEF;EACAjE,SAAS,CAAC,MAAM;IACd,MAAMkE,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMvB,gBAAgB,CAAC,IAAI,CAAC;QAClD,IAAIuB,aAAa,EAAE;UACjBnB,iBAAiB,CAACoB,IAAI;YAAA,IAAAC,qBAAA;YAAA,OAAK;cACzB,GAAGD,IAAI;cACPb,cAAc,EAAE,EAAAc,qBAAA,GAAAF,aAAa,CAACG,UAAU,cAAAD,qBAAA,uBAAxBA,qBAAA,CAA0BE,aAAa,KAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;cACrElB,SAAS,EAAE,CAAApB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEuC,UAAU,KAAI;YACzC,CAAC;UAAA,CAAC,CAAC;QACL;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,iBAAiB,CAAC,OAAO,EAAE,kCAAkCD,KAAK,CAACR,OAAO,EAAE,CAAC;MAC/E;IACF,CAAC;IAEDC,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlE,SAAS,CAAC,MAAM;IACd,IAAI8B,WAAW,IAAID,KAAK,CAAC8C,SAAS,EAAE;MAClC,MAAMnB,YAAY,GAAGoB,sBAAsB,CACzC/C,KAAK,CAAC8C,SAAS,CAACE,YAAY,EAC5B9B,cAAc,CAACQ,cACjB,CAAC;MAEDP,iBAAiB,CAACoB,IAAI,KAAK;QACzB,GAAGA,IAAI;QACPZ,YAAY;QACZL,QAAQ,EAAE2B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAGvB,YAAY,GAAG,CAAC,CAAC,CAAC;MAChD,CAAC,CAAC,CAAC;IACL;EACF,CAAC,EAAE,CAAC3B,KAAK,CAAC8C,SAAS,EAAE5B,cAAc,CAACQ,cAAc,EAAEzB,WAAW,CAAC,CAAC;;EAEjE;EACA9B,SAAS,CAAC,MAAM;IACd,IAAIgF,QAAQ;IACZ,IAAIjC,cAAc,CAACE,SAAS,IAAI,CAACF,cAAc,CAACU,WAAW,EAAE;MAC3DuB,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC3BjC,iBAAiB,CAACoB,IAAI,KAAK;UACzB,GAAGA,IAAI;UACPd,WAAW,EAAEc,IAAI,CAACd,WAAW,GAAG;QAClC,CAAC,CAAC,CAAC;MACL,CAAC,EAAE,IAAI,CAAC;IACV;IACA,OAAO,MAAM4B,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACjC,cAAc,CAACE,SAAS,EAAEF,cAAc,CAACU,WAAW,CAAC,CAAC;;EAE1D;EACA,MAAMiB,iBAAiB,GAAGzE,WAAW,CAAC,CAAC+D,IAAI,EAAEC,OAAO,KAAK;IACvD,MAAMkB,UAAU,GAAG;MACjBvB,EAAE,EAAEE,IAAI,CAACsB,GAAG,CAAC,CAAC,GAAGN,IAAI,CAACO,MAAM,CAAC,CAAC;MAC9BxB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC;MAC1CC,IAAI;MACJC;IACF,CAAC;IACDN,kBAAkB,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEe,UAAU,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMP,sBAAsB,GAAGA,CAACU,aAAa,EAAEC,YAAY,KAAK;IAC9D,IAAI,CAACD,aAAa,IAAI,CAACC,YAAY,EAAE,OAAO,CAAC;IAC7C,MAAMC,MAAM,GAAGF,aAAa,CAACG,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KACxCb,IAAI,CAACc,GAAG,CAACF,KAAK,GAAGH,YAAY,CAACI,CAAC,CAAC,CAClC,CAAC;IACD,OAAOb,IAAI,CAACC,GAAG,CAAC,GAAGS,MAAM,CAAC;EAC5B,CAAC;EAED,MAAMK,cAAc,GAAGA,CAACpB,KAAK,EAAErB,QAAQ,EAAEE,WAAW,KAAK;IACvD,MAAMwC,SAAS,GAAGhB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,GAAGN,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD,MAAMsB,SAAS,GAAGjB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAGzB,WAAW,CAAC,CAAC,CAAC;IACjD,MAAM0C,cAAc,GAAG,CAAC5C,QAAQ,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5C,OAAO0B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACmB,KAAK,CAACH,SAAS,GAAGC,SAAS,GAAGC,cAAc,CAAC,CAAC;EACxE,CAAC;;EAED;EACA,MAAME,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI,CAACpE,WAAW,EAAE;MAChB4C,iBAAiB,CAAC,OAAO,EAAE,oDAAoD,CAAC;MAChF;IACF;IAEA,IAAI;MACF,MAAM/B,cAAc,CAAC,IAAI,CAAC;MAC1BK,iBAAiB,CAACoB,IAAI,KAAK;QACzB,GAAGA,IAAI;QACPnB,SAAS,EAAE,IAAI;QACfK,WAAW,EAAE;MACf,CAAC,CAAC,CAAC;MACHoB,iBAAiB,CAAC,SAAS,EAAE,yDAAyD,CAAC;IACzF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,iBAAiB,CAAC,OAAO,EAAE,8BAA8BD,KAAK,CAACR,OAAO,EAAE,CAAC;IAC3E;EACF,CAAC;EAED,MAAMkC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACrE,WAAW,EAAE;MAChB4C,iBAAiB,CAAC,OAAO,EAAE,uBAAuB,CAAC;MACnD;IACF;IAEA,IAAI,CAAC3B,cAAc,CAACE,SAAS,EAAE;MAC7ByB,iBAAiB,CAAC,SAAS,EAAE,qCAAqC,CAAC;MACnE;IACF;IAEA,IAAI;MACF1B,iBAAiB,CAACoB,IAAI,KAAK;QACzB,GAAGA,IAAI;QACPhB,QAAQ,EAAEgB,IAAI,CAAChB,QAAQ,GAAG;MAC5B,CAAC,CAAC,CAAC;MAEHsB,iBAAiB,CAAC,MAAM,EAAE,6BAA6B,CAAC;MACxDA,iBAAiB,CAAC,MAAM,EAAE,oCAAoC,CAAC;;MAE/D;MACA,MAAM0B,MAAM,GAAG,MAAM/D,WAAW,CAACQ,IAAI,EAAE;QACrCwD,WAAW,EAAE,IAAI;QACjB9C,cAAc,EAAER,cAAc,CAACQ;MACjC,CAAC,CAAC;MAEF,IAAI6C,MAAM,CAACE,OAAO,EAAE;QAClB,MAAM7B,KAAK,GAAG2B,MAAM,CAACG,aAAa,IAAIxD,cAAc,CAACS,YAAY;QACjE,MAAMN,KAAK,GAAG2C,cAAc,CAACpB,KAAK,EAAE1B,cAAc,CAACK,QAAQ,EAAEL,cAAc,CAACO,WAAW,CAAC;QACxF,MAAMkD,SAAS,GAAG/B,KAAK,GAAG,GAAG;QAE7BzB,iBAAiB,CAACoB,IAAI,KAAK;UACzB,GAAGA,IAAI;UACPlB,KAAK;UACLM,YAAY,EAAEiB,KAAK;UACnBpB,SAAS,EAAEyB,IAAI,CAACC,GAAG,CAACX,IAAI,CAACf,SAAS,EAAEH,KAAK,CAAC;UAC1CO,WAAW,EAAE+C;QACf,CAAC,CAAC,CAAC;QAEH,IAAIA,SAAS,EAAE;UACb9B,iBAAiB,CAAC,SAAS,EAAE,qCAAqC,CAAC;UACnEA,iBAAiB,CAAC,SAAS,EAAE,mBAAmBD,KAAK,CAACgC,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC;UAClF/B,iBAAiB,CAAC,SAAS,EAAE,aAAaxB,KAAK,MAAM,CAAC;;UAEtD;UACA,MAAMR,eAAe,CAAC,IAAI,EAAE;YAC1BQ,KAAK;YACLC,QAAQ,EAAEJ,cAAc,CAACI,QAAQ;YACjCC,QAAQ,EAAEL,cAAc,CAACK,QAAQ;YACjCE,WAAW,EAAEP,cAAc,CAACO,WAAW;YACvCiD,aAAa,EAAE9B;UACjB,CAAC,CAAC;QACJ,CAAC,MAAM;UACLC,iBAAiB,CAAC,SAAS,EAAE,sBAAsBD,KAAK,CAACgC,OAAO,CAAC,CAAC,CAAC,iBAAiB,CAAC;UACrF/B,iBAAiB,CAAC,MAAM,EAAE,kDAAkD,CAAC;QAC/E;MACF,CAAC,MAAM;QACLA,iBAAiB,CAAC,OAAO,EAAE,uBAAuB0B,MAAM,CAAC3B,KAAK,EAAE,CAAC;MACnE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,iBAAiB,CAAC,OAAO,EAAE,2BAA2BD,KAAK,CAACR,OAAO,EAAE,CAAC;IACxE;EACF,CAAC;EAED,MAAMyC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrE,eAAe,CAAC,CAAC;MACxCoC,iBAAiB,CAAC,MAAM,EAAE,yBAAyBiC,QAAQ,CAAClB,GAAG,CAACmB,CAAC,IAAIA,CAAC,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAElG,MAAMpC,KAAK,GAAGG,sBAAsB,CAAC+B,QAAQ,EAAE5D,cAAc,CAACQ,cAAc,CAAC;MAC7EmB,iBAAiB,CAAC,MAAM,EAAE,yBAAyBD,KAAK,CAACgC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACzE,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdC,iBAAiB,CAAC,OAAO,EAAE,+BAA+BD,KAAK,CAACR,OAAO,EAAE,CAAC;IAC5E;EACF,CAAC;EAED,MAAM6C,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMvE,aAAa,CAAC,CAAC;MACrBmC,iBAAiB,CAAC,SAAS,EAAE,6BAA6B,CAAC;MAC3DA,iBAAiB,CAAC,MAAM,EAAE,+BAA+B,CAAC;IAC5D,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,iBAAiB,CAAC,OAAO,EAAE,0BAA0BD,KAAK,CAACR,OAAO,EAAE,CAAC;IACvE;EACF,CAAC;EAED,MAAM8C,oBAAoB,GAAGA,CAAA,KAAM;IACjC/D,iBAAiB,CAACoB,IAAI,KAAK;MACzB,GAAGA,IAAI;MACPnB,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE,GAAG;MACbC,QAAQ,EAAE,CAAC;MACXE,WAAW,EAAE,CAAC;MACdE,YAAY,EAAE,CAAC;MACfC,WAAW,EAAE;IACf,CAAC,CAAC,CAAC;IACHiB,iBAAiB,CAAC,MAAM,EAAE,2CAA2C,CAAC;EACxE,CAAC;;EAED;EACA,MAAMsC,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,IAAI,GAAGpC,IAAI,CAACqC,KAAK,CAACF,OAAO,GAAG,EAAE,CAAC;IACrC,MAAMG,IAAI,GAAGH,OAAO,GAAG,EAAE;IACzB,OAAO,GAAGC,IAAI,IAAIE,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACtD,CAAC;EAED,oBACE/F,OAAA,CAACnB,GAAG;IAACmH,EAAE,EAAE;MAAEC,CAAC,EAAE,CAAC;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,EAAE,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAEhDpG,OAAA,CAACjB,KAAK;MAACsH,SAAS,EAAE,CAAE;MAACL,EAAE,EAAE;QAAEC,CAAC,EAAE,CAAC;QAAEK,EAAE,EAAE,CAAC;QAAEC,UAAU,EAAE,mDAAmD;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAJ,QAAA,eACxHpG,OAAA,CAACnB,GAAG;QAAC4H,OAAO,EAAC,MAAM;QAACC,cAAc,EAAC,eAAe;QAACC,UAAU,EAAC,YAAY;QAAAP,QAAA,gBACxEpG,OAAA,CAACnB,GAAG;UAAAuH,QAAA,gBACFpG,OAAA,CAAChB,UAAU;YAAC4H,OAAO,EAAC,IAAI;YAACC,SAAS,EAAC,IAAI;YAACC,YAAY;YAACd,EAAE,EAAE;cAAEe,UAAU,EAAE;YAAO,CAAE;YAAAX,QAAA,EAAC;UAEjF;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbnH,OAAA,CAAChB,UAAU;YAAC4H,OAAO,EAAC,IAAI;YAACZ,EAAE,EAAE;cAAEoB,OAAO,EAAE,GAAG;cAAEd,EAAE,EAAE;YAAE,CAAE;YAAAF,QAAA,EAAC;UAEtD;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAEbnH,OAAA,CAACnB,GAAG;YAAC4H,OAAO,EAAC,MAAM;YAACY,GAAG,EAAE,CAAE;YAACC,QAAQ,EAAC,MAAM;YAAAlB,QAAA,gBACzCpG,OAAA,CAACf,IAAI;cACHsI,KAAK,EAAC,UAAU;cAChBvB,EAAE,EAAE;gBAAEwB,OAAO,EAAE,uBAAuB;gBAAEhB,KAAK,EAAE;cAAQ;YAAE;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC,eACFnH,OAAA,CAACf,IAAI;cACHsI,KAAK,EAAC,eAAe;cACrBvB,EAAE,EAAE;gBAAEwB,OAAO,EAAE,uBAAuB;gBAAEhB,KAAK,EAAE;cAAQ;YAAE;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC,eACFnH,OAAA,CAACf,IAAI;cACHsI,KAAK,EAAC,qBAAqB;cAC3BvB,EAAE,EAAE;gBAAEwB,OAAO,EAAE,uBAAuB;gBAAEhB,KAAK,EAAE;cAAQ;YAAE;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENnH,OAAA,CAACnB,GAAG;UAAC4I,SAAS,EAAC,OAAO;UAAArB,QAAA,gBACpBpG,OAAA,CAAChB,UAAU;YAAC4H,OAAO,EAAC,IAAI;YAACZ,EAAE,EAAE;cAAEe,UAAU,EAAE;YAAO,CAAE;YAAAX,QAAA,GACjD5E,cAAc,CAACG,KAAK,EAAC,MACxB;UAAA;YAAAqF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACbnH,OAAA,CAAChB,UAAU;YAAC4H,OAAO,EAAC,OAAO;YAACZ,EAAE,EAAE;cAAEoB,OAAO,EAAE;YAAI,CAAE;YAAAhB,QAAA,EAAC;UAElD;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGRnH,OAAA,CAACP,sBAAsB;MACrB+B,cAAc,EAAEA,cAAe;MAC/BkG,OAAO,EAAE/C,oBAAqB;MAC9BgD,OAAO,EAAEnC,oBAAqB;MAC9BjF,WAAW,EAAEA,WAAY;MACzBU,WAAW,EAAEA;IAAY;MAAA+F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAGFnH,OAAA,CAAClB,IAAI;MAAC8I,SAAS;MAACC,OAAO,EAAE,CAAE;MAAC7B,EAAE,EAAE;QAAE8B,EAAE,EAAE;MAAE,CAAE;MAAA1B,QAAA,gBAExCpG,OAAA,CAAClB,IAAI;QAACiJ,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAA7B,QAAA,eACvBpG,OAAA,CAACjB,KAAK;UAACsH,SAAS,EAAE,CAAE;UAACL,EAAE,EAAE;YAAEkC,MAAM,EAAE,OAAO;YAAEzB,OAAO,EAAE,MAAM;YAAE0B,aAAa,EAAE;UAAS,CAAE;UAAA/B,QAAA,gBACrFpG,OAAA,CAACnB,GAAG;YAACmH,EAAE,EAAE;cAAEC,CAAC,EAAE,CAAC;cAAEmC,YAAY,EAAE,CAAC;cAAEC,WAAW,EAAE,SAAS;cAAEb,OAAO,EAAE;YAAU,CAAE;YAAApB,QAAA,gBAC7EpG,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,IAAI;cAACZ,EAAE,EAAE;gBAAEe,UAAU,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAErD;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACbnH,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,OAAO;cAACJ,KAAK,EAAC,gBAAgB;cAAAJ,QAAA,EAAC;YAEnD;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,eAENnH,OAAA,CAACnB,GAAG;YAACmH,EAAE,EAAE;cAAEsC,IAAI,EAAE;YAAE,CAAE;YAAAlC,QAAA,eACnBpG,OAAA,CAACT,UAAU;cACT+B,IAAI,EAAEA,IAAK;cACXiH,QAAQ,EAAEhH,OAAQ;cAClBiH,SAAS,EAAE5D,iBAAkB;cAC7B3D,WAAW,EAAEA,WAAY;cACzBwH,QAAQ,EAAC,QAAQ;cACjBC,KAAK,EAAC;YAAS;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAGPnH,OAAA,CAAClB,IAAI;QAACiJ,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAA7B,QAAA,eACvBpG,OAAA,CAACjB,KAAK;UAACsH,SAAS,EAAE,CAAE;UAACL,EAAE,EAAE;YAAEkC,MAAM,EAAE;UAAQ,CAAE;UAAA9B,QAAA,gBAC3CpG,OAAA,CAACnB,GAAG;YAACmH,EAAE,EAAE;cAAEC,CAAC,EAAE,CAAC;cAAEmC,YAAY,EAAE,CAAC;cAAEC,WAAW,EAAE,SAAS;cAAEb,OAAO,EAAE;YAAU,CAAE;YAAApB,QAAA,gBAC7EpG,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,IAAI;cAACZ,EAAE,EAAE;gBAAEe,UAAU,EAAE;cAAO,CAAE;cAAAX,QAAA,EAAC;YAErD;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACbnH,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,OAAO;cAACJ,KAAK,EAAC,gBAAgB;cAAAJ,QAAA,EAAC;YAEnD;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,eAENnH,OAAA,CAACnB,GAAG;YAACmH,EAAE,EAAE;cAAEC,CAAC,EAAE,CAAC;cAAEiC,MAAM,EAAE;YAAoB,CAAE;YAAA9B,QAAA,eAC7CpG,OAAA,CAACX,eAAe;cACdsJ,WAAW,EAAE,EAAAxI,gBAAA,GAAAG,KAAK,CAAC8C,SAAS,cAAAjD,gBAAA,uBAAfA,gBAAA,CAAiBmD,YAAY,KAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;cACxDU,YAAY,EAAExC,cAAc,CAACQ,cAAe;cAC5C4G,WAAW,EAAE3H,WAAY;cACzB4H,aAAa,EAAE,IAAK;cACpBC,cAAc,EAAE,IAAK;cACrBC,iBAAiB,EAAEvH,cAAc,CAACS,YAAY,GAAG,CAAE;cACnD+G,MAAM,EAAE;gBACNC,KAAK,EAAE,MAAM;gBACbf,MAAM,EAAE,MAAM;gBACdgB,iBAAiB,EAAE,IAAI;gBACvBC,eAAe,EAAE,IAAI;gBACrBC,gBAAgB,EAAE;cACpB;YAAE;cAAApC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAGPnH,OAAA,CAAClB,IAAI;QAACiJ,IAAI;QAACC,EAAE,EAAE,EAAG;QAACqB,EAAE,EAAE,CAAE;QAACpB,EAAE,EAAE,CAAE;QAAA7B,QAAA,eAC9BpG,OAAA,CAACV,YAAY;UACXgK,iBAAiB,EAAEnE,qBAAsB;UACzCoE,eAAe,EAAEhE,mBAAoB;UACrChF,WAAW,EAAEA,WAAY;UACzBU,WAAW,EAAEA,WAAY;UACzBuI,SAAS,EAAElJ,KAAK,CAAC8C,SAAU;UAC3BqG,aAAa,EAAC,IAAI;UAClBC,aAAa,EAAGC,MAAM,IAAK;YACzBxG,iBAAiB,CAAC,MAAM,EAAE,iBAAiBwG,MAAM,EAAE,CAAC;UACtD;QAAE;UAAA3C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGPnH,OAAA,CAAClB,IAAI;QAACiJ,IAAI;QAACC,EAAE,EAAE,EAAG;QAACqB,EAAE,EAAE,CAAE;QAACpB,EAAE,EAAE,CAAE;QAAA7B,QAAA,eAC9BpG,OAAA,CAACjB,KAAK;UAACsH,SAAS,EAAE,CAAE;UAACL,EAAE,EAAE;YAAEC,CAAC,EAAE;UAAE,CAAE;UAAAG,QAAA,gBAChCpG,OAAA,CAAChB,UAAU;YAAC4H,OAAO,EAAC,IAAI;YAACE,YAAY;YAACd,EAAE,EAAE;cAAEe,UAAU,EAAE;YAAO,CAAE;YAAAX,QAAA,EAAC;UAElE;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,EAEZ7G,KAAK,CAAC8C,SAAS,iBACdpD,OAAA,CAACnB,GAAG;YAAAuH,QAAA,gBACFpG,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,WAAW;cAACJ,KAAK,EAAC,gBAAgB;cAACM,YAAY;cAAAV,QAAA,EAAC;YAEpE;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,GAAA/G,qBAAA,GACZE,KAAK,CAAC8C,SAAS,CAACE,YAAY,cAAAlD,qBAAA,uBAA5BA,qBAAA,CAA8B8D,GAAG,CAAC,CAACC,KAAK,EAAEyF,KAAK,kBAC9C5J,OAAA,CAACnB,GAAG;cAAamH,EAAE,EAAE;gBAAEM,EAAE,EAAE;cAAE,CAAE;cAAAF,QAAA,gBAC7BpG,OAAA,CAACnB,GAAG;gBAAC4H,OAAO,EAAC,MAAM;gBAACC,cAAc,EAAC,eAAe;gBAACJ,EAAE,EAAE,GAAI;gBAAAF,QAAA,gBACzDpG,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAAAR,QAAA,GAAC,QAAM,EAACwD,KAAK,GAAG,CAAC;gBAAA;kBAAA5C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAa,CAAC,eAC1DnH,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAACiD,UAAU,EAAC,WAAW;kBAAAzD,QAAA,GAC/CjC,KAAK,CAACe,OAAO,CAAC,CAAC,CAAC,EAAC,MACpB;gBAAA;kBAAA8B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACV,CAAC,eACNnH,OAAA,CAACd,cAAc;gBACb0H,OAAO,EAAC,aAAa;gBACrBkD,KAAK,EAAEvG,IAAI,CAACc,GAAG,CAACF,KAAK,CAAC,GAAG,GAAG,GAAG,GAAI;gBACnC6B,EAAE,EAAE;kBAAEkC,MAAM,EAAE,CAAC;kBAAE6B,YAAY,EAAE;gBAAE;cAAE;gBAAA/C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACpC,CAAC;YAAA,GAXMyC,KAAK;cAAA5C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAYV,CACN,CAAC,eAEFnH,OAAA,CAAChB,UAAU;cAAC4H,OAAO,EAAC,WAAW;cAACJ,KAAK,EAAC,gBAAgB;cAACM,YAAY;cAACd,EAAE,EAAE;gBAAE8B,EAAE,EAAE;cAAE,CAAE;cAAA1B,QAAA,EAAC;YAEnF;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAY,CAAC,eACbnH,OAAA,CAACnB,GAAG;cAAC4H,OAAO,EAAC,MAAM;cAAC0B,aAAa,EAAC,QAAQ;cAACd,GAAG,EAAE,CAAE;cAAAjB,QAAA,gBAChDpG,OAAA,CAACnB,GAAG;gBAAC4H,OAAO,EAAC,MAAM;gBAACC,cAAc,EAAC,eAAe;gBAAAN,QAAA,gBAChDpG,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAAAR,QAAA,EAAC;gBAAU;kBAAAY,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eACnDnH,OAAA,CAACf,IAAI;kBACHsI,KAAK,EAAEhH,WAAW,GAAG,WAAW,GAAG,cAAe;kBAClDiG,KAAK,EAAEjG,WAAW,GAAG,SAAS,GAAG,OAAQ;kBACzCyJ,IAAI,EAAC;gBAAO;kBAAAhD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACb,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACNnH,OAAA,CAACnB,GAAG;gBAAC4H,OAAO,EAAC,MAAM;gBAACC,cAAc,EAAC,eAAe;gBAAAN,QAAA,gBAChDpG,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAAAR,QAAA,EAAC;gBAAc;kBAAAY,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eACvDnH,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAACiD,UAAU,EAAC,WAAW;kBAAAzD,QAAA,GAC/C5E,cAAc,CAACS,YAAY,CAACiD,OAAO,CAAC,CAAC,CAAC,EAAC,MAC1C;gBAAA;kBAAA8B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACV,CAAC,eACNnH,OAAA,CAACnB,GAAG;gBAAC4H,OAAO,EAAC,MAAM;gBAACC,cAAc,EAAC,eAAe;gBAAAN,QAAA,gBAChDpG,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAAAR,QAAA,EAAC;gBAAY;kBAAAY,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eACrDnH,OAAA,CAAChB,UAAU;kBAAC4H,OAAO,EAAC,OAAO;kBAACiD,UAAU,EAAC,WAAW;kBAAAzD,QAAA,EAC/CX,UAAU,CAACjE,cAAc,CAACO,WAAW;gBAAC;kBAAAiF,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACV,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAGPnH,OAAA,CAAClB,IAAI;QAACiJ,IAAI;QAACC,EAAE,EAAE,EAAG;QAACC,EAAE,EAAE,CAAE;QAAA7B,QAAA,eACvBpG,OAAA,CAACR,aAAa;UACZyK,QAAQ,EAAE9H,eAAgB;UAC1B+H,OAAO,EAAEA,CAAA,KAAM9H,kBAAkB,CAAC,EAAE,CAAE;UACtC8F,MAAM,EAAC,OAAO;UACdiC,eAAe,EAAE,IAAK;UACtBC,YAAY,EAAE;QAAK;UAAApD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACjH,EAAA,CAnfID,UAAU;EAAA,QACGtB,WAAW,EACGC,WAAW,EACCA,WAAW,EACrCA,WAAW,EASxBO,kBAAkB,EAMlBC,aAAa;AAAA;AAAAiL,EAAA,GAnBbpK,UAAU;AAqfhB,eAAeA,UAAU;AAAC,IAAAoK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
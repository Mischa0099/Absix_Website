{"ast":null,"code":"// src/services/authService.js\nimport api from './api';\nconst authService = {\n  // Login user\n  login: async (username, password) => {\n    try {\n      console.log('🔐 Auth Service: Starting login...');\n\n      // Send as form data to match OAuth2PasswordRequestForm\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      const response = await api.post('/api/v1/auth/login', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log('🔐 Auth Service: Login successful');\n\n      // Store the token and user data\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('🔐 Auth Service: Login failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message);\n      throw error;\n    }\n  },\n  // Register user\n  register: async (username, password, email = '') => {\n    try {\n      console.log('👤 Auth Service: Starting registration...');\n\n      // Send as form data\n      const formData = new FormData();\n      formData.append('username', username);\n      formData.append('password', password);\n      if (email) {\n        formData.append('email', email);\n      }\n      const response = await api.post('/api/v1/auth/register', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log('👤 Auth Service: Registration successful');\n\n      // Store the token and user data\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('👤 Auth Service: Registration failed:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || error.message);\n      throw error;\n    }\n  },\n  // Logout user\n  logout: async () => {\n    try {\n      console.log('🚪 Auth Service: Logging out...');\n      await api.post('/api/v1/auth/logout');\n    } catch (error) {\n      console.error('🚪 Auth Service: Logout error:', error);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      console.log('🚪 Auth Service: Cleanup completed');\n    }\n  },\n  // Get current user profile\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/api/v1/auth/me');\n      return response;\n    } catch (error) {\n      console.error('👤 Auth Service: Get current user failed:', error);\n      throw error;\n    }\n  },\n  // Update user profile\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/api/v1/auth/profile', userData);\n\n      // Update stored user data\n      if (response.data.user) {\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response;\n    } catch (error) {\n      console.error('👤 Auth Service: Update profile failed:', error);\n      throw error;\n    }\n  },\n  // Change password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const response = await api.post('/api/v1/auth/change-password', {\n        current_password: currentPassword,\n        new_password: newPassword\n      });\n      return response;\n    } catch (error) {\n      console.error('🔐 Auth Service: Change password failed:', error);\n      throw error;\n    }\n  },\n  // Utility functions\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    return !!(token && user);\n  },\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  getUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // Token validation\n  isTokenValid: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return tokenPayload.exp > currentTime;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      return false;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","authService","login","username","password","console","log","formData","FormData","append","response","post","headers","data","access_token","localStorage","setItem","JSON","stringify","user","error","_error$response","_error$response$data","detail","message","register","email","_error$response2","_error$response2$data","logout","removeItem","getCurrentUser","get","updateProfile","userData","put","changePassword","currentPassword","newPassword","current_password","new_password","isAuthenticated","token","getItem","getToken","getUser","parse","isTokenValid","tokenPayload","atob","split","currentTime","Date","now","exp"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport api from './api';\r\n\r\nconst authService = {\r\n  // Login user\r\n  login: async (username, password) => {\r\n    try {\r\n      console.log('🔐 Auth Service: Starting login...');\r\n      \r\n      // Send as form data to match OAuth2PasswordRequestForm\r\n      const formData = new FormData();\r\n      formData.append('username', username);\r\n      formData.append('password', password);\r\n      \r\n      const response = await api.post('/api/v1/auth/login', formData, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n      \r\n      console.log('🔐 Auth Service: Login successful');\r\n      \r\n      // Store the token and user data\r\n      if (response.data.access_token) {\r\n        localStorage.setItem('token', response.data.access_token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('🔐 Auth Service: Login failed:', error.response?.data?.detail || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register user\r\n  register: async (username, password, email = '') => {\r\n    try {\r\n      console.log('👤 Auth Service: Starting registration...');\r\n      \r\n      // Send as form data\r\n      const formData = new FormData();\r\n      formData.append('username', username);\r\n      formData.append('password', password);\r\n      if (email) {\r\n        formData.append('email', email);\r\n      }\r\n      \r\n      const response = await api.post('/api/v1/auth/register', formData, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n      \r\n      console.log('👤 Auth Service: Registration successful');\r\n      \r\n      // Store the token and user data\r\n      if (response.data.access_token) {\r\n        localStorage.setItem('token', response.data.access_token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('👤 Auth Service: Registration failed:', error.response?.data?.detail || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Logout user\r\n  logout: async () => {\r\n    try {\r\n      console.log('🚪 Auth Service: Logging out...');\r\n      await api.post('/api/v1/auth/logout');\r\n    } catch (error) {\r\n      console.error('🚪 Auth Service: Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      console.log('🚪 Auth Service: Cleanup completed');\r\n    }\r\n  },\r\n\r\n  // Get current user profile\r\n  getCurrentUser: async () => {\r\n    try {\r\n      const response = await api.get('/api/v1/auth/me');\r\n      return response;\r\n    } catch (error) {\r\n      console.error('👤 Auth Service: Get current user failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update user profile\r\n  updateProfile: async (userData) => {\r\n    try {\r\n      const response = await api.put('/api/v1/auth/profile', userData);\r\n      \r\n      // Update stored user data\r\n      if (response.data.user) {\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('👤 Auth Service: Update profile failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (currentPassword, newPassword) => {\r\n    try {\r\n      const response = await api.post('/api/v1/auth/change-password', {\r\n        current_password: currentPassword,\r\n        new_password: newPassword\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      console.error('🔐 Auth Service: Change password failed:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Utility functions\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('token');\r\n    const user = localStorage.getItem('user');\r\n    return !!(token && user);\r\n  },\r\n\r\n  getToken: () => {\r\n    return localStorage.getItem('token');\r\n  },\r\n\r\n  getUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Token validation\r\n  isTokenValid: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const tokenPayload = JSON.parse(atob(token.split('.')[1]));\r\n      const currentTime = Date.now() / 1000;\r\n      return tokenPayload.exp > currentTime;\r\n    } catch (error) {\r\n      console.error('Token validation error:', error);\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
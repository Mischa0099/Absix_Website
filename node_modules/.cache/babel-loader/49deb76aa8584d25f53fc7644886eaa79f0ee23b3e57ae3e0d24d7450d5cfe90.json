{"ast":null,"code":"var _s = $RefreshSig$();\n// src/store/index.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer, persistCombineReducers, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { encryptTransform } from 'redux-persist-transform-encrypt';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import all slices\nimport authSlice from './authSlice';\nimport challengeSlice from './challengeSlice';\nimport robotSlice from './robotSlice';\nimport uiSlice from './uiSlice';\n\n// Import middleware\nimport { performanceMonitor } from '../utils/performanceMonitor';\n\n// Encryption transform for sensitive data\nconst encryptTransformConfig = encryptTransform({\n  secretKey: process.env.REACT_APP_PERSIST_KEY || 'robotics-app-secret-key',\n  onError: error => {\n    console.error('Redux persist encryption error:', error);\n  }\n});\n\n// Persist configuration for different slices\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token', 'refreshToken', 'user'],\n  // Only persist auth tokens and user info\n  transforms: [encryptTransformConfig] // Encrypt sensitive auth data\n};\nconst uiPersistConfig = {\n  key: 'ui',\n  storage,\n  whitelist: ['theme', 'sidebarOpen', 'preferences'] // Persist UI preferences\n};\nconst challengePersistConfig = {\n  key: 'challenges',\n  storage,\n  whitelist: ['userProgress', 'completedChallenges'],\n  // Persist progress but not current state\n  blacklist: ['loading', 'error', 'currentChallenge'] // Don't persist temporary state\n};\n\n// Don't persist robot slice (real-time data should not be persisted)\nconst robotPersistConfig = {\n  key: 'robot',\n  storage,\n  whitelist: ['robotConfig'],\n  // Only persist robot configuration\n  blacklist: ['telemetry', 'currentPosition', 'executionState', 'safety', 'performance', 'errors', 'warnings', 'isConnected', 'connectionStatus']\n};\n\n// Create persisted reducers\nconst persistedReducers = {\n  auth: persistReducer(authPersistConfig, authSlice),\n  challenges: persistReducer(challengePersistConfig, challengeSlice),\n  robot: persistReducer(robotPersistConfig, robotSlice),\n  ui: persistReducer(uiPersistConfig, uiSlice)\n};\n\n// Root persist configuration\nconst rootPersistConfig = {\n  key: 'root',\n  storage,\n  version: 1,\n  debug: process.env.NODE_ENV === 'development',\n  migrate: state => {\n    // Handle version migrations here\n    return Promise.resolve(state);\n  },\n  stateReconciler: (inboundState, originalState, reducedState) => {\n    // Custom state reconciler for handling conflicts\n    return {\n      ...reducedState,\n      // Ensure robot connection state is reset on app start\n      robot: {\n        ...reducedState.robot,\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        telemetry: {\n          joint_angles: [0, 0, 0],\n          joint_velocities: [0, 0, 0],\n          joint_currents: [0, 0, 0],\n          joint_temperatures: [25, 25, 25],\n          joint_torques: [0, 0, 0],\n          end_effector_position: {\n            x: 0,\n            y: 0,\n            z: 0\n          },\n          end_effector_velocity: {\n            x: 0,\n            y: 0,\n            z: 0\n          },\n          system_status: 'idle',\n          timestamp: null,\n          updateRate: 0\n        },\n        executionState: {\n          isExecuting: false,\n          executionId: null,\n          executionProgress: null,\n          executionStartTime: null,\n          executionEndTime: null,\n          lastExecution: null,\n          executionQueue: []\n        },\n        errors: [],\n        warnings: [],\n        lastError: null\n      }\n    };\n  }\n};\n\n// Create root reducer with persistence\nconst rootReducer = persistCombineReducers(rootPersistConfig, persistedReducers);\n\n// Custom middleware for robot telemetry and challenge tracking\nconst robotTelemetryMiddleware = store => next => action => {\n  const result = next(action);\n\n  // Monitor robot telemetry for safety violations\n  if (action.type === 'robot/setRobotData') {\n    const state = store.getState();\n    const {\n      joint_angles,\n      joint_temperatures,\n      joint_currents\n    } = action.payload;\n    const {\n      robotConfig\n    } = state.robot;\n\n    // Check joint limits\n    if (joint_angles) {\n      joint_angles.forEach((angle, index) => {\n        const limits = robotConfig.jointLimits[index];\n        if (limits && (angle < limits.min || angle > limits.max)) {\n          store.dispatch({\n            type: 'robot/addSafetyViolation',\n            payload: [{\n              joint: index + 1,\n              angle,\n              limit: limits,\n              severity: 'error',\n              message: `Joint ${index + 1} angle ${angle.toFixed(1)}° outside safe range [${limits.min}°, ${limits.max}°]`\n            }]\n          });\n        }\n      });\n    }\n\n    // Check temperature limits\n    if (joint_temperatures) {\n      joint_temperatures.forEach((temp, index) => {\n        if (temp > robotConfig.maxTemperature) {\n          store.dispatch({\n            type: 'robot/addWarning',\n            payload: {\n              message: `Joint ${index + 1} temperature ${temp}°C exceeds safe limit`,\n              type: 'temperature_warning',\n              context: {\n                joint: index + 1,\n                temperature: temp\n              }\n            }\n          });\n        }\n      });\n    }\n\n    // Check current limits\n    if (joint_currents && robotConfig.maxCurrent) {\n      joint_currents.forEach((current, index) => {\n        const maxCurrent = robotConfig.maxCurrent[index] || 2.0;\n        if (current > maxCurrent) {\n          store.dispatch({\n            type: 'robot/addWarning',\n            payload: {\n              message: `Joint ${index + 1} current ${current.toFixed(2)}A exceeds safe limit`,\n              type: 'current_warning',\n              context: {\n                joint: index + 1,\n                current\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n  return result;\n};\n\n// Challenge progress tracking middleware\nconst challengeProgressMiddleware = store => next => action => {\n  const result = next(action);\n\n  // Track challenge events for analytics\n  if (action.type.startsWith('challenges/')) {\n    var _state$auth$user, _state$challenges$ses;\n    const state = store.getState();\n    const challengeEvent = {\n      type: action.type,\n      timestamp: new Date().toISOString(),\n      payload: action.payload,\n      userId: (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user.id,\n      sessionId: (_state$challenges$ses = state.challenges.session) === null || _state$challenges$ses === void 0 ? void 0 : _state$challenges$ses.sessionId\n    };\n\n    // Record performance metric\n    performanceMonitor.recordMetric('challenge_event', challengeEvent);\n\n    // Send to analytics service in production\n    if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ANALYTICS_ENDPOINT) {\n      fetch(process.env.REACT_APP_ANALYTICS_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(challengeEvent)\n      }).catch(error => {\n        console.warn('Failed to send challenge analytics:', error);\n      });\n    }\n  }\n  return result;\n};\n\n// Performance monitoring middleware\nconst performanceMiddleware = store => next => action => {\n  const startTime = performance.now();\n  const result = next(action);\n  const endTime = performance.now();\n  const actionDuration = endTime - startTime;\n\n  // Log slow actions in development\n  if (process.env.NODE_ENV === 'development' && actionDuration > 10) {\n    console.warn(`Slow action detected: ${action.type} took ${actionDuration.toFixed(2)}ms`);\n  }\n\n  // Record performance metrics for critical actions\n  if (actionDuration > 5 || action.type.includes('robot/') || action.type.includes('challenges/')) {\n    performanceMonitor.recordMetric('redux_action', {\n      type: action.type,\n      duration: actionDuration,\n      timestamp: Date.now()\n    });\n  }\n  return result;\n};\n\n// Error logging middleware\nconst errorLoggingMiddleware = store => next => action => {\n  try {\n    return next(action);\n  } catch (error) {\n    // Log Redux errors\n    console.error('Redux Error:', {\n      action: action.type,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n\n    // Record error metric\n    performanceMonitor.recordMetric('redux_error', {\n      action: action.type,\n      error: error.message,\n      timestamp: Date.now()\n    });\n\n    // Send to error tracking service\n    if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ERROR_ENDPOINT) {\n      fetch(process.env.REACT_APP_ERROR_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          type: 'redux_error',\n          action: action.type,\n          error: error.message,\n          stack: error.stack,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          url: window.location.href\n        })\n      }).catch(reportError => {\n        console.error('Failed to report Redux error:', reportError);\n      });\n    }\n\n    // Re-throw the error\n    throw error;\n  }\n};\n\n// Configure store\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      // Ignore these field paths in all actions\n      ignoredActionsPaths: ['meta.arg', 'payload.timestamp'],\n      // Ignore these paths in the state\n      ignoredPaths: ['robot.telemetry.timestamp', 'robot.executionState.executionStartTime']\n    },\n    // Enable immutability check in development\n    immutableCheck: {\n      warnAfter: 128,\n      ignoredPaths: ['robot.performance.telemetryStats']\n    }\n  }).concat([performanceMiddleware, robotTelemetryMiddleware, challengeProgressMiddleware, errorLoggingMiddleware]),\n  devTools: process.env.NODE_ENV !== 'production' && {\n    // Redux DevTools configuration\n    name: 'Robotics Challenge App',\n    trace: true,\n    traceLimit: 25,\n    actionCreators: {\n      // Add custom action creators for debugging\n    },\n    serialize: {\n      options: {\n        undefined: true,\n        function: fn => fn.toString()\n      }\n    }\n  },\n  // Preloaded state for testing or initial values\n  preloadedState: process.env.NODE_ENV === 'test' ? {\n    robot: {\n      isConnected: false,\n      connectionStatus: 'disconnected',\n      telemetry: {\n        joint_angles: [0, 0, 0],\n        joint_velocities: [0, 0, 0],\n        joint_currents: [0, 0, 0],\n        joint_temperatures: [25, 25, 25],\n        joint_torques: [0, 0, 0],\n        end_effector_position: {\n          x: 0,\n          y: 0,\n          z: 0\n        },\n        end_effector_velocity: {\n          x: 0,\n          y: 0,\n          z: 0\n        },\n        system_status: 'idle',\n        timestamp: null,\n        updateRate: 0\n      }\n    }\n  } : undefined\n});\n\n// Create persistor\nexport const persistor = persistStore(store, null, () => {\n  console.log('📦 Redux store rehydrated successfully');\n\n  // Log store statistics\n  const state = store.getState();\n  console.log('📊 Store statistics:', {\n    authConnected: !!state.auth.token,\n    robotConfigured: !!state.robot.robotConfig,\n    challengesLoaded: Object.keys(state.challenges.challengeDetails || {}).length,\n    uiTheme: state.ui.theme\n  });\n});\n\n// Store enhancement for development\nif (process.env.NODE_ENV === 'development') {\n  // Enable hot reloading for reducers\n  if (module.hot) {\n    module.hot.accept('./authSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./challengeSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./robotSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./uiSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n  }\n\n  // Expose store to window for debugging\n  window.__REDUX_STORE__ = store;\n\n  // Log all actions in development\n  store.subscribe(() => {\n    const state = store.getState();\n\n    // Monitor store size to prevent memory leaks\n    const stateSize = JSON.stringify(state).length;\n    if (stateSize > 1024 * 1024) {\n      // 1MB\n      console.warn('Redux store size is large:', (stateSize / 1024 / 1024).toFixed(2) + 'MB');\n    }\n  });\n}\n\n// Performance monitoring for store operations\nconst storePerformanceMonitor = {\n  start: performance.now(),\n  // Monitor dispatch performance\n  monitorDispatch: action => {\n    const start = performance.now();\n    return () => {\n      const end = performance.now();\n      const duration = end - start;\n      if (duration > 10) {\n        performanceMonitor.recordMetric('slow_dispatch', {\n          action: action.type,\n          duration,\n          timestamp: Date.now()\n        });\n      }\n    };\n  }\n};\n\n// Wrap dispatch with performance monitoring\nconst originalDispatch = store.dispatch;\nstore.dispatch = action => {\n  const endMonitoring = storePerformanceMonitor.monitorDispatch(action);\n  const result = originalDispatch(action);\n  endMonitoring();\n  return result;\n};\n\n// JavaScript hooks (no TypeScript types)\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;\n\n// Export selectors for convenience\nexport const selectors = {\n  // Auth selectors\n  selectIsAuthenticated: state => !!state.auth.token,\n  selectCurrentUser: state => state.auth.user,\n  selectAuthLoading: state => state.auth.loading,\n  // Robot selectors\n  selectIsRobotConnected: state => state.robot.isConnected,\n  selectRobotTelemetry: state => state.robot.telemetry,\n  selectRobotConfig: state => state.robot.robotConfig,\n  selectIsExecuting: state => state.robot.executionState.isExecuting,\n  selectRobotErrors: state => state.robot.errors,\n  selectRobotHealth: state => {\n    const {\n      telemetry,\n      safety,\n      calibration,\n      isConnected\n    } = state.robot;\n    if (!isConnected) return 'disconnected';\n    if (safety.emergencyStopActive) return 'emergency';\n    if (safety.temperatureAlarms.length > 0) return 'warning';\n    if (!calibration.isCalibrated) return 'uncalibrated';\n    const maxTemp = Math.max(...telemetry.joint_temperatures);\n    if (maxTemp > 60) return 'warning';\n    if (maxTemp > 70) return 'critical';\n    return 'healthy';\n  },\n  // Challenge selectors\n  selectCurrentChallenge: state => state.challenges.currentChallenge,\n  selectChallenge1State: state => state.challenges.challenge1,\n  selectUserProgress: state => state.challenges.userProgress,\n  selectChallengeLoading: state => state.challenges.loading,\n  // UI selectors\n  selectTheme: state => state.ui.theme,\n  selectSidebarOpen: state => state.ui.sidebarOpen,\n  selectNotifications: state => state.ui.notifications,\n  // Computed selectors\n  selectChallengeProgress: state => {\n    const {\n      challenge1,\n      userProgress\n    } = state.challenges;\n    return {\n      currentScore: challenge1.score,\n      totalScore: userProgress.totalScore,\n      completionRate: userProgress.challengesCompleted / 15 * 100,\n      // Assuming 15 total challenges\n      currentStreak: userProgress.streakCount,\n      timeSpent: challenge1.timeElapsed,\n      accuracy: challenge1.accuracy\n    };\n  }\n};\n\n// Store initialization complete\nconsole.log('🏪 Redux store configured successfully');\nconsole.log('🔄 Persistence enabled for auth, challenges, robot config, and UI');\nconsole.log('🛡️ Security: Sensitive data encrypted');\nconsole.log('📊 Monitoring: Performance and error tracking enabled');\nexport default store;","map":{"version":3,"names":["configureStore","persistStore","persistReducer","persistCombineReducers","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","encryptTransform","useDispatch","useSelector","authSlice","challengeSlice","robotSlice","uiSlice","performanceMonitor","encryptTransformConfig","secretKey","process","env","REACT_APP_PERSIST_KEY","onError","error","console","authPersistConfig","key","whitelist","transforms","uiPersistConfig","challengePersistConfig","blacklist","robotPersistConfig","persistedReducers","auth","challenges","robot","ui","rootPersistConfig","version","debug","NODE_ENV","migrate","state","Promise","resolve","stateReconciler","inboundState","originalState","reducedState","isConnected","connectionStatus","telemetry","joint_angles","joint_velocities","joint_currents","joint_temperatures","joint_torques","end_effector_position","x","y","z","end_effector_velocity","system_status","timestamp","updateRate","executionState","isExecuting","executionId","executionProgress","executionStartTime","executionEndTime","lastExecution","executionQueue","errors","warnings","lastError","rootReducer","robotTelemetryMiddleware","store","next","action","result","type","getState","payload","robotConfig","forEach","angle","index","limits","jointLimits","min","max","dispatch","joint","limit","severity","message","toFixed","temp","maxTemperature","context","temperature","maxCurrent","current","challengeProgressMiddleware","startsWith","_state$auth$user","_state$challenges$ses","challengeEvent","Date","toISOString","userId","user","id","sessionId","session","recordMetric","REACT_APP_ANALYTICS_ENDPOINT","fetch","method","headers","body","JSON","stringify","catch","warn","performanceMiddleware","startTime","performance","now","endTime","actionDuration","includes","duration","errorLoggingMiddleware","stack","REACT_APP_ERROR_ENDPOINT","userAgent","navigator","url","window","location","href","reportError","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredActionsPaths","ignoredPaths","immutableCheck","warnAfter","concat","devTools","name","trace","traceLimit","actionCreators","serialize","options","undefined","function","fn","toString","preloadedState","persistor","log","authConnected","token","robotConfigured","challengesLoaded","Object","keys","challengeDetails","length","uiTheme","theme","module","hot","accept","replaceReducer","__REDUX_STORE__","subscribe","stateSize","storePerformanceMonitor","start","monitorDispatch","end","originalDispatch","endMonitoring","useAppDispatch","_s","useAppSelector","selectors","selectIsAuthenticated","selectCurrentUser","selectAuthLoading","loading","selectIsRobotConnected","selectRobotTelemetry","selectRobotConfig","selectIsExecuting","selectRobotErrors","selectRobotHealth","safety","calibration","emergencyStopActive","temperatureAlarms","isCalibrated","maxTemp","Math","selectCurrentChallenge","currentChallenge","selectChallenge1State","challenge1","selectUserProgress","userProgress","selectChallengeLoading","selectTheme","selectSidebarOpen","sidebarOpen","selectNotifications","notifications","selectChallengeProgress","currentScore","score","totalScore","completionRate","challengesCompleted","currentStreak","streakCount","timeSpent","timeElapsed","accuracy"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/index.js"],"sourcesContent":["// src/store/index.js\nimport { configureStore } from '@reduxjs/toolkit';\nimport { \n  persistStore, \n  persistReducer, \n  persistCombineReducers,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { encryptTransform } from 'redux-persist-transform-encrypt';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import all slices\nimport authSlice from './authSlice';\nimport challengeSlice from './challengeSlice'; \nimport robotSlice from './robotSlice';\nimport uiSlice from './uiSlice';\n\n// Import middleware\nimport { performanceMonitor } from '../utils/performanceMonitor';\n\n// Encryption transform for sensitive data\nconst encryptTransformConfig = encryptTransform({\n  secretKey: process.env.REACT_APP_PERSIST_KEY || 'robotics-app-secret-key',\n  onError: (error) => {\n    console.error('Redux persist encryption error:', error);\n  }\n});\n\n// Persist configuration for different slices\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token', 'refreshToken', 'user'], // Only persist auth tokens and user info\n  transforms: [encryptTransformConfig], // Encrypt sensitive auth data\n};\n\nconst uiPersistConfig = {\n  key: 'ui',\n  storage,\n  whitelist: ['theme', 'sidebarOpen', 'preferences'], // Persist UI preferences\n};\n\nconst challengePersistConfig = {\n  key: 'challenges',\n  storage,\n  whitelist: ['userProgress', 'completedChallenges'], // Persist progress but not current state\n  blacklist: ['loading', 'error', 'currentChallenge'], // Don't persist temporary state\n};\n\n// Don't persist robot slice (real-time data should not be persisted)\nconst robotPersistConfig = {\n  key: 'robot',\n  storage,\n  whitelist: ['robotConfig'], // Only persist robot configuration\n  blacklist: [\n    'telemetry', \n    'currentPosition', \n    'executionState', \n    'safety', \n    'performance', \n    'errors', \n    'warnings',\n    'isConnected',\n    'connectionStatus'\n  ]\n};\n\n// Create persisted reducers\nconst persistedReducers = {\n  auth: persistReducer(authPersistConfig, authSlice),\n  challenges: persistReducer(challengePersistConfig, challengeSlice),\n  robot: persistReducer(robotPersistConfig, robotSlice),\n  ui: persistReducer(uiPersistConfig, uiSlice),\n};\n\n// Root persist configuration\nconst rootPersistConfig = {\n  key: 'root',\n  storage,\n  version: 1,\n  debug: process.env.NODE_ENV === 'development',\n  migrate: (state) => {\n    // Handle version migrations here\n    return Promise.resolve(state);\n  },\n  stateReconciler: (inboundState, originalState, reducedState) => {\n    // Custom state reconciler for handling conflicts\n    return {\n      ...reducedState,\n      // Ensure robot connection state is reset on app start\n      robot: {\n        ...reducedState.robot,\n        isConnected: false,\n        connectionStatus: 'disconnected',\n        telemetry: {\n          joint_angles: [0, 0, 0],\n          joint_velocities: [0, 0, 0],\n          joint_currents: [0, 0, 0],\n          joint_temperatures: [25, 25, 25],\n          joint_torques: [0, 0, 0],\n          end_effector_position: { x: 0, y: 0, z: 0 },\n          end_effector_velocity: { x: 0, y: 0, z: 0 },\n          system_status: 'idle',\n          timestamp: null,\n          updateRate: 0\n        },\n        executionState: {\n          isExecuting: false,\n          executionId: null,\n          executionProgress: null,\n          executionStartTime: null,\n          executionEndTime: null,\n          lastExecution: null,\n          executionQueue: []\n        },\n        errors: [],\n        warnings: [],\n        lastError: null\n      }\n    };\n  }\n};\n\n// Create root reducer with persistence\nconst rootReducer = persistCombineReducers(rootPersistConfig, persistedReducers);\n\n// Custom middleware for robot telemetry and challenge tracking\nconst robotTelemetryMiddleware = (store) => (next) => (action) => {\n  const result = next(action);\n  \n  // Monitor robot telemetry for safety violations\n  if (action.type === 'robot/setRobotData') {\n    const state = store.getState();\n    const { joint_angles, joint_temperatures, joint_currents } = action.payload;\n    const { robotConfig } = state.robot;\n    \n    // Check joint limits\n    if (joint_angles) {\n      joint_angles.forEach((angle, index) => {\n        const limits = robotConfig.jointLimits[index];\n        if (limits && (angle < limits.min || angle > limits.max)) {\n          store.dispatch({\n            type: 'robot/addSafetyViolation',\n            payload: [{\n              joint: index + 1,\n              angle,\n              limit: limits,\n              severity: 'error',\n              message: `Joint ${index + 1} angle ${angle.toFixed(1)}° outside safe range [${limits.min}°, ${limits.max}°]`\n            }]\n          });\n        }\n      });\n    }\n    \n    // Check temperature limits\n    if (joint_temperatures) {\n      joint_temperatures.forEach((temp, index) => {\n        if (temp > robotConfig.maxTemperature) {\n          store.dispatch({\n            type: 'robot/addWarning',\n            payload: {\n              message: `Joint ${index + 1} temperature ${temp}°C exceeds safe limit`,\n              type: 'temperature_warning',\n              context: { joint: index + 1, temperature: temp }\n            }\n          });\n        }\n      });\n    }\n    \n    // Check current limits\n    if (joint_currents && robotConfig.maxCurrent) {\n      joint_currents.forEach((current, index) => {\n        const maxCurrent = robotConfig.maxCurrent[index] || 2.0;\n        if (current > maxCurrent) {\n          store.dispatch({\n            type: 'robot/addWarning',\n            payload: {\n              message: `Joint ${index + 1} current ${current.toFixed(2)}A exceeds safe limit`,\n              type: 'current_warning',\n              context: { joint: index + 1, current }\n            }\n          });\n        }\n      });\n    }\n  }\n  \n  return result;\n};\n\n// Challenge progress tracking middleware\nconst challengeProgressMiddleware = (store) => (next) => (action) => {\n  const result = next(action);\n  \n  // Track challenge events for analytics\n  if (action.type.startsWith('challenges/')) {\n    const state = store.getState();\n    const challengeEvent = {\n      type: action.type,\n      timestamp: new Date().toISOString(),\n      payload: action.payload,\n      userId: state.auth.user?.id,\n      sessionId: state.challenges.session?.sessionId\n    };\n    \n    // Record performance metric\n    performanceMonitor.recordMetric('challenge_event', challengeEvent);\n    \n    // Send to analytics service in production\n    if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ANALYTICS_ENDPOINT) {\n      fetch(process.env.REACT_APP_ANALYTICS_ENDPOINT, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(challengeEvent)\n      }).catch(error => {\n        console.warn('Failed to send challenge analytics:', error);\n      });\n    }\n  }\n  \n  return result;\n};\n\n// Performance monitoring middleware\nconst performanceMiddleware = (store) => (next) => (action) => {\n  const startTime = performance.now();\n  const result = next(action);\n  const endTime = performance.now();\n  \n  const actionDuration = endTime - startTime;\n  \n  // Log slow actions in development\n  if (process.env.NODE_ENV === 'development' && actionDuration > 10) {\n    console.warn(`Slow action detected: ${action.type} took ${actionDuration.toFixed(2)}ms`);\n  }\n  \n  // Record performance metrics for critical actions\n  if (actionDuration > 5 || action.type.includes('robot/') || action.type.includes('challenges/')) {\n    performanceMonitor.recordMetric('redux_action', {\n      type: action.type,\n      duration: actionDuration,\n      timestamp: Date.now()\n    });\n  }\n  \n  return result;\n};\n\n// Error logging middleware\nconst errorLoggingMiddleware = (store) => (next) => (action) => {\n  try {\n    return next(action);\n  } catch (error) {\n    // Log Redux errors\n    console.error('Redux Error:', {\n      action: action.type,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    });\n    \n    // Record error metric\n    performanceMonitor.recordMetric('redux_error', {\n      action: action.type,\n      error: error.message,\n      timestamp: Date.now()\n    });\n    \n    // Send to error tracking service\n    if (process.env.NODE_ENV === 'production' && process.env.REACT_APP_ERROR_ENDPOINT) {\n      fetch(process.env.REACT_APP_ERROR_ENDPOINT, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          type: 'redux_error',\n          action: action.type,\n          error: error.message,\n          stack: error.stack,\n          timestamp: new Date().toISOString(),\n          userAgent: navigator.userAgent,\n          url: window.location.href\n        })\n      }).catch(reportError => {\n        console.error('Failed to report Redux error:', reportError);\n      });\n    }\n    \n    // Re-throw the error\n    throw error;\n  }\n};\n\n// Configure store\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        // Ignore these field paths in all actions\n        ignoredActionsPaths: ['meta.arg', 'payload.timestamp'],\n        // Ignore these paths in the state\n        ignoredPaths: ['robot.telemetry.timestamp', 'robot.executionState.executionStartTime'],\n      },\n      // Enable immutability check in development\n      immutableCheck: {\n        warnAfter: 128,\n        ignoredPaths: ['robot.performance.telemetryStats']\n      }\n    }).concat([\n      performanceMiddleware,\n      robotTelemetryMiddleware,\n      challengeProgressMiddleware,\n      errorLoggingMiddleware,\n    ]),\n  \n  devTools: process.env.NODE_ENV !== 'production' && {\n    // Redux DevTools configuration\n    name: 'Robotics Challenge App',\n    trace: true,\n    traceLimit: 25,\n    actionCreators: {\n      // Add custom action creators for debugging\n    },\n    serialize: {\n      options: {\n        undefined: true,\n        function: (fn) => fn.toString()\n      }\n    }\n  },\n  \n  // Preloaded state for testing or initial values\n  preloadedState: process.env.NODE_ENV === 'test' ? {\n    robot: {\n      isConnected: false,\n      connectionStatus: 'disconnected',\n      telemetry: {\n        joint_angles: [0, 0, 0],\n        joint_velocities: [0, 0, 0],\n        joint_currents: [0, 0, 0],\n        joint_temperatures: [25, 25, 25],\n        joint_torques: [0, 0, 0],\n        end_effector_position: { x: 0, y: 0, z: 0 },\n        end_effector_velocity: { x: 0, y: 0, z: 0 },\n        system_status: 'idle',\n        timestamp: null,\n        updateRate: 0\n      }\n    }\n  } : undefined\n});\n\n// Create persistor\nexport const persistor = persistStore(store, null, () => {\n  console.log('📦 Redux store rehydrated successfully');\n  \n  // Log store statistics\n  const state = store.getState();\n  console.log('📊 Store statistics:', {\n    authConnected: !!state.auth.token,\n    robotConfigured: !!state.robot.robotConfig,\n    challengesLoaded: Object.keys(state.challenges.challengeDetails || {}).length,\n    uiTheme: state.ui.theme\n  });\n});\n\n// Store enhancement for development\nif (process.env.NODE_ENV === 'development') {\n  // Enable hot reloading for reducers\n  if (module.hot) {\n    module.hot.accept('./authSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./challengeSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./robotSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n    module.hot.accept('./uiSlice', () => {\n      store.replaceReducer(rootReducer);\n    });\n  }\n  \n  // Expose store to window for debugging\n  window.__REDUX_STORE__ = store;\n  \n  // Log all actions in development\n  store.subscribe(() => {\n    const state = store.getState();\n    \n    // Monitor store size to prevent memory leaks\n    const stateSize = JSON.stringify(state).length;\n    if (stateSize > 1024 * 1024) { // 1MB\n      console.warn('Redux store size is large:', (stateSize / 1024 / 1024).toFixed(2) + 'MB');\n    }\n  });\n}\n\n// Performance monitoring for store operations\nconst storePerformanceMonitor = {\n  start: performance.now(),\n  \n  // Monitor dispatch performance\n  monitorDispatch: (action) => {\n    const start = performance.now();\n    return () => {\n      const end = performance.now();\n      const duration = end - start;\n      \n      if (duration > 10) {\n        performanceMonitor.recordMetric('slow_dispatch', {\n          action: action.type,\n          duration,\n          timestamp: Date.now()\n        });\n      }\n    };\n  }\n};\n\n// Wrap dispatch with performance monitoring\nconst originalDispatch = store.dispatch;\nstore.dispatch = (action) => {\n  const endMonitoring = storePerformanceMonitor.monitorDispatch(action);\n  const result = originalDispatch(action);\n  endMonitoring();\n  return result;\n};\n\n// JavaScript hooks (no TypeScript types)\nexport const useAppDispatch = () => useDispatch();\nexport const useAppSelector = useSelector;\n\n// Export selectors for convenience\nexport const selectors = {\n  // Auth selectors\n  selectIsAuthenticated: (state) => !!state.auth.token,\n  selectCurrentUser: (state) => state.auth.user,\n  selectAuthLoading: (state) => state.auth.loading,\n  \n  // Robot selectors\n  selectIsRobotConnected: (state) => state.robot.isConnected,\n  selectRobotTelemetry: (state) => state.robot.telemetry,\n  selectRobotConfig: (state) => state.robot.robotConfig,\n  selectIsExecuting: (state) => state.robot.executionState.isExecuting,\n  selectRobotErrors: (state) => state.robot.errors,\n  selectRobotHealth: (state) => {\n    const { telemetry, safety, calibration, isConnected } = state.robot;\n    \n    if (!isConnected) return 'disconnected';\n    if (safety.emergencyStopActive) return 'emergency';\n    if (safety.temperatureAlarms.length > 0) return 'warning';\n    if (!calibration.isCalibrated) return 'uncalibrated';\n    \n    const maxTemp = Math.max(...telemetry.joint_temperatures);\n    if (maxTemp > 60) return 'warning';\n    if (maxTemp > 70) return 'critical';\n    \n    return 'healthy';\n  },\n  \n  // Challenge selectors\n  selectCurrentChallenge: (state) => state.challenges.currentChallenge,\n  selectChallenge1State: (state) => state.challenges.challenge1,\n  selectUserProgress: (state) => state.challenges.userProgress,\n  selectChallengeLoading: (state) => state.challenges.loading,\n  \n  // UI selectors\n  selectTheme: (state) => state.ui.theme,\n  selectSidebarOpen: (state) => state.ui.sidebarOpen,\n  selectNotifications: (state) => state.ui.notifications,\n  \n  // Computed selectors\n  selectChallengeProgress: (state) => {\n    const { challenge1, userProgress } = state.challenges;\n    return {\n      currentScore: challenge1.score,\n      totalScore: userProgress.totalScore,\n      completionRate: (userProgress.challengesCompleted / 15) * 100, // Assuming 15 total challenges\n      currentStreak: userProgress.streakCount,\n      timeSpent: challenge1.timeElapsed,\n      accuracy: challenge1.accuracy\n    };\n  }\n};\n\n// Store initialization complete\nconsole.log('🏪 Redux store configured successfully');\nconsole.log('🔄 Persistence enabled for auth, challenges, robot config, and UI');\nconsole.log('🛡️ Security: Sensitive data encrypted');\nconsole.log('📊 Monitoring: Performance and error tracking enabled');\n\nexport default store;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/utils/mockChallengeData.js\nexport const mockChallenges = [{\n  id: 1,\n  title: \"Basic Joint Movement\",\n  description: \"Learn to control individual robot joints and understand forward kinematics. Move each joint separately to see how they affect the robot's position.\",\n  difficulty: \"beginner\",\n  type: \"manual_movement\",\n  estimated_time: 30,\n  max_score: 100,\n  points: 20,\n  is_unlocked: true,\n  is_completed: false,\n  best_score: 0,\n  attempts: 0,\n  instructions: \"Use the joint controls to move each joint of the robot. Observe how each joint affects the end-effector position. Complete the target positions to finish this challenge.\",\n  video_url: null\n}, {\n  id: 2,\n  title: \"Position Control Challenge\",\n  description: \"Move the robot end-effector to specific target positions in 3D space using inverse kinematics.\",\n  difficulty: \"intermediate\",\n  type: \"position_control\",\n  estimated_time: 45,\n  max_score: 150,\n  points: 35,\n  is_unlocked: true,\n  is_completed: false,\n  best_score: 0,\n  attempts: 0,\n  instructions: \"Guide the robot's end-effector to reach the specified target positions. Use your understanding of inverse kinematics to calculate the required joint angles.\",\n  video_url: null\n}, {\n  id: 3,\n  title: \"Trajectory Planning\",\n  description: \"Plan and execute smooth trajectories between multiple waypoints while avoiding obstacles.\",\n  difficulty: \"advanced\",\n  type: \"trajectory_planning\",\n  estimated_time: 60,\n  max_score: 200,\n  points: 50,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  attempts: 0,\n  instructions: \"Create smooth trajectories that connect multiple waypoints while avoiding obstacles in the workspace. Consider velocity and acceleration constraints.\",\n  video_url: null\n}, {\n  id: 4,\n  title: \"PD Control Implementation\",\n  description: \"Implement a PD controller for precise position control with stability analysis.\",\n  difficulty: \"advanced\",\n  type: \"control_theory\",\n  estimated_time: 75,\n  max_score: 200,\n  points: 60,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  attempts: 0,\n  instructions: \"Design and tune a PD controller for the robot joints. Analyze stability and performance characteristics.\",\n  video_url: null\n}, {\n  id: 5,\n  title: \"Force Control\",\n  description: \"Implement force control for safe interaction with the environment.\",\n  difficulty: \"expert\",\n  type: \"force_control\",\n  estimated_time: 90,\n  max_score: 250,\n  points: 75,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  attempts: 0,\n  instructions: \"Implement force feedback control to enable safe physical interaction between the robot and its environment.\",\n  video_url: null\n}];\nexport const mockUserProgress = {\n  challengesCompleted: 0,\n  totalScore: 0,\n  rank: \"Rising Roboticist\",\n  streakCount: 0,\n  averageScore: 0,\n  totalAttempts: 0,\n  timeSpent: 0\n};\n\n// Function to get mock challenges with user progress\nexport const getMockChallengesWithProgress = () => {\n  return {\n    challenges: mockChallenges,\n    userProgress: mockUserProgress\n  };\n};","map":{"version":3,"names":["mockChallenges","id","title","description","difficulty","type","estimated_time","max_score","points","is_unlocked","is_completed","best_score","attempts","instructions","video_url","mockUserProgress","challengesCompleted","totalScore","rank","streakCount","averageScore","totalAttempts","timeSpent","getMockChallengesWithProgress","challenges","userProgress"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/utils/mockChallengeData.js"],"sourcesContent":["// src/utils/mockChallengeData.js\r\nexport const mockChallenges = [\r\n  {\r\n    id: 1,\r\n    title: \"Basic Joint Movement\",\r\n    description: \"Learn to control individual robot joints and understand forward kinematics. Move each joint separately to see how they affect the robot's position.\",\r\n    difficulty: \"beginner\",\r\n    type: \"manual_movement\",\r\n    estimated_time: 30,\r\n    max_score: 100,\r\n    points: 20,\r\n    is_unlocked: true,\r\n    is_completed: false,\r\n    best_score: 0,\r\n    attempts: 0,\r\n    instructions: \"Use the joint controls to move each joint of the robot. Observe how each joint affects the end-effector position. Complete the target positions to finish this challenge.\",\r\n    video_url: null\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Position Control Challenge\",\r\n    description: \"Move the robot end-effector to specific target positions in 3D space using inverse kinematics.\",\r\n    difficulty: \"intermediate\",\r\n    type: \"position_control\",\r\n    estimated_time: 45,\r\n    max_score: 150,\r\n    points: 35,\r\n    is_unlocked: true,\r\n    is_completed: false,\r\n    best_score: 0,\r\n    attempts: 0,\r\n    instructions: \"Guide the robot's end-effector to reach the specified target positions. Use your understanding of inverse kinematics to calculate the required joint angles.\",\r\n    video_url: null\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Trajectory Planning\",\r\n    description: \"Plan and execute smooth trajectories between multiple waypoints while avoiding obstacles.\",\r\n    difficulty: \"advanced\",\r\n    type: \"trajectory_planning\",\r\n    estimated_time: 60,\r\n    max_score: 200,\r\n    points: 50,\r\n    is_unlocked: false,\r\n    is_completed: false,\r\n    best_score: 0,\r\n    attempts: 0,\r\n    instructions: \"Create smooth trajectories that connect multiple waypoints while avoiding obstacles in the workspace. Consider velocity and acceleration constraints.\",\r\n    video_url: null\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"PD Control Implementation\",\r\n    description: \"Implement a PD controller for precise position control with stability analysis.\",\r\n    difficulty: \"advanced\",\r\n    type: \"control_theory\",\r\n    estimated_time: 75,\r\n    max_score: 200,\r\n    points: 60,\r\n    is_unlocked: false,\r\n    is_completed: false,\r\n    best_score: 0,\r\n    attempts: 0,\r\n    instructions: \"Design and tune a PD controller for the robot joints. Analyze stability and performance characteristics.\",\r\n    video_url: null\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"Force Control\",\r\n    description: \"Implement force control for safe interaction with the environment.\",\r\n    difficulty: \"expert\",\r\n    type: \"force_control\",\r\n    estimated_time: 90,\r\n    max_score: 250,\r\n    points: 75,\r\n    is_unlocked: false,\r\n    is_completed: false,\r\n    best_score: 0,\r\n    attempts: 0,\r\n    instructions: \"Implement force feedback control to enable safe physical interaction between the robot and its environment.\",\r\n    video_url: null\r\n  }\r\n];\r\n\r\nexport const mockUserProgress = {\r\n  challengesCompleted: 0,\r\n  totalScore: 0,\r\n  rank: \"Rising Roboticist\",\r\n  streakCount: 0,\r\n  averageScore: 0,\r\n  totalAttempts: 0,\r\n  timeSpent: 0\r\n};\r\n\r\n// Function to get mock challenges with user progress\r\nexport const getMockChallengesWithProgress = () => {\r\n  return {\r\n    challenges: mockChallenges,\r\n    userProgress: mockUserProgress\r\n  };\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,cAAc,GAAG,CAC5B;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,sBAAsB;EAC7BC,WAAW,EAAE,qJAAqJ;EAClKC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,iBAAiB;EACvBC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,2KAA2K;EACzLC,SAAS,EAAE;AACb,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,4BAA4B;EACnCC,WAAW,EAAE,gGAAgG;EAC7GC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,kBAAkB;EACxBC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,8JAA8J;EAC5KC,SAAS,EAAE;AACb,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,qBAAqB;EAC5BC,WAAW,EAAE,2FAA2F;EACxGC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,qBAAqB;EAC3BC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,uJAAuJ;EACrKC,SAAS,EAAE;AACb,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,2BAA2B;EAClCC,WAAW,EAAE,iFAAiF;EAC9FC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,gBAAgB;EACtBC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,0GAA0G;EACxHC,SAAS,EAAE;AACb,CAAC,EACD;EACEb,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,eAAe;EACtBC,WAAW,EAAE,oEAAoE;EACjFC,UAAU,EAAE,QAAQ;EACpBC,IAAI,EAAE,eAAe;EACrBC,cAAc,EAAE,EAAE;EAClBC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,EAAE;EACVC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,6GAA6G;EAC3HC,SAAS,EAAE;AACb,CAAC,CACF;AAED,OAAO,MAAMC,gBAAgB,GAAG;EAC9BC,mBAAmB,EAAE,CAAC;EACtBC,UAAU,EAAE,CAAC;EACbC,IAAI,EAAE,mBAAmB;EACzBC,WAAW,EAAE,CAAC;EACdC,YAAY,EAAE,CAAC;EACfC,aAAa,EAAE,CAAC;EAChBC,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,6BAA6B,GAAGA,CAAA,KAAM;EACjD,OAAO;IACLC,UAAU,EAAExB,cAAc;IAC1ByB,YAAY,EAAEV;EAChB,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
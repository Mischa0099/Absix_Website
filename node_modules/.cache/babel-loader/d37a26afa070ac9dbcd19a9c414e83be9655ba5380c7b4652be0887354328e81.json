{"ast":null,"code":"// Existing functions (keep these if they exist)\nexport const calculateAccuracy = (targetAngles, currentAngles, tolerance = 10) => {\n  const differences = targetAngles.map((target, i) => Math.abs(target - currentAngles[i]));\n  const maxDifference = Math.max(...differences);\n  return Math.max(0, 100 - maxDifference / tolerance * 100);\n};\nexport const calculateProgress = (completed, total) => {\n  return total > 0 ? completed / total * 100 : 0;\n};\nexport const clampAngle = (angle, min = -180, max = 180) => {\n  return Math.max(min, Math.min(max, angle));\n};\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\nexport const throttle = (func, limit) => {\n  let inThrottle;\n  return function (...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\nexport const degreesToRadians = degrees => {\n  return degrees * Math.PI / 180;\n};\nexport const radiansToDegrees = radians => {\n  return radians * 180 / Math.PI;\n};\nexport const formatDate = timestamp => {\n  return new Date(timestamp).toLocaleString();\n};\nexport const formatDuration = seconds => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const secs = Math.floor(seconds % 60);\n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n};\nexport const generateRandomAngles = jointLimits => {\n  return jointLimits.map(limit => {\n    const range = limit.max - limit.min;\n    return limit.min + Math.random() * range;\n  });\n};\nexport const getDifficultyColor = difficulty => {\n  switch (difficulty === null || difficulty === void 0 ? void 0 : difficulty.toLowerCase()) {\n    case 'beginner':\n      return '#4CAF50';\n    // Green\n    case 'intermediate':\n      return '#FF9800';\n    // Orange\n    case 'advanced':\n      return '#F44336';\n    // Red\n    default:\n      return '#2196F3';\n    // Blue\n  }\n};\nexport const getRank = score => {\n  if (score >= 90) return {\n    rank: 'Master',\n    color: '#FFD700'\n  };\n  if (score >= 80) return {\n    rank: 'Expert',\n    color: '#C0C0C0'\n  };\n  if (score >= 70) return {\n    rank: 'Advanced',\n    color: '#CD7F32'\n  };\n  if (score >= 60) return {\n    rank: 'Intermediate',\n    color: '#4CAF50'\n  };\n  return {\n    rank: 'Beginner',\n    color: '#2196F3'\n  };\n};\nexport const getScoreColor = score => {\n  if (score >= 90) return '#4CAF50'; // Green\n  if (score >= 80) return '#8BC34A'; // Light green\n  if (score >= 70) return '#CDDC39'; // Yellow-green\n  if (score >= 60) return '#FFEB3B'; // Yellow\n  if (score >= 50) return '#FF9800'; // Orange\n  return '#F44336'; // Red\n};\n\n// Missing functions that useRobotController expects\nexport const now = () => Date.now();\nexport const debugLog = (message, ...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[DEBUG] ${message}`, ...args);\n  }\n};\nexport const errorLog = (message, error) => {\n  console.error(`[ERROR] ${message}`, error);\n};\nexport const clamp = (value, min, max) => {\n  return Math.max(min, Math.min(max, value));\n};\n\n// Robot utility functions\nexport const degreesToPositionRaw = (degrees, motorSpecs) => {\n  // Convert degrees to raw motor position\n  // This is a simplified conversion - adjust based on your motor specs\n  const range = (motorSpecs === null || motorSpecs === void 0 ? void 0 : motorSpecs.positionRange) || 4096;\n  const normalized = (degrees + 180) / 360; // Normalize to 0-1\n  return Math.round(normalized * range);\n};\nexport const rawToDegrees = (rawPosition, motorSpecs) => {\n  // Convert raw motor position to degrees\n  const range = (motorSpecs === null || motorSpecs === void 0 ? void 0 : motorSpecs.positionRange) || 4096;\n  const normalized = rawPosition / range; // Normalize to 0-1\n  return normalized * 360 - 180; // Convert to -180 to 180 degrees\n};\nexport const degreesToVelocityRaw = (degreesPerSecond, motorSpecs) => {\n  // Convert degrees per second to raw velocity units\n  const maxVelocity = (motorSpecs === null || motorSpecs === void 0 ? void 0 : motorSpecs.maxVelocity) || 1023;\n  const maxDegreesPerSecond = (motorSpecs === null || motorSpecs === void 0 ? void 0 : motorSpecs.maxDegreesPerSecond) || 114; // rpm to deg/s\n\n  const normalized = Math.abs(degreesPerSecond) / maxDegreesPerSecond;\n  return Math.round(normalized * maxVelocity);\n};\n\n// Export default object for backward compatibility\nconst robotUtils = {\n  degreesToPositionRaw,\n  rawToDegrees,\n  degreesToVelocityRaw,\n  clamp,\n  degreesToRadians,\n  radiansToDegrees\n};\nexport default robotUtils;","map":{"version":3,"names":["calculateAccuracy","targetAngles","currentAngles","tolerance","differences","map","target","i","Math","abs","maxDifference","max","calculateProgress","completed","total","clampAngle","angle","min","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","throttle","limit","inThrottle","apply","degreesToRadians","degrees","PI","radiansToDegrees","radians","formatDate","timestamp","Date","toLocaleString","formatDuration","seconds","hours","floor","minutes","secs","generateRandomAngles","jointLimits","range","random","getDifficultyColor","difficulty","toLowerCase","getRank","score","rank","color","getScoreColor","now","debugLog","message","process","env","NODE_ENV","console","log","errorLog","error","clamp","value","degreesToPositionRaw","motorSpecs","positionRange","normalized","round","rawToDegrees","rawPosition","degreesToVelocityRaw","degreesPerSecond","maxVelocity","maxDegreesPerSecond","robotUtils"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/utils/helpers.js"],"sourcesContent":["// Existing functions (keep these if they exist)\nexport const calculateAccuracy = (targetAngles, currentAngles, tolerance = 10) => {\n  const differences = targetAngles.map((target, i) => \n    Math.abs(target - currentAngles[i])\n  );\n  const maxDifference = Math.max(...differences);\n  return Math.max(0, 100 - (maxDifference / tolerance * 100));\n};\n\nexport const calculateProgress = (completed, total) => {\n  return total > 0 ? (completed / total) * 100 : 0;\n};\n\nexport const clampAngle = (angle, min = -180, max = 180) => {\n  return Math.max(min, Math.min(max, angle));\n};\n\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\nexport const throttle = (func, limit) => {\n  let inThrottle;\n  return function(...args) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n\nexport const degreesToRadians = (degrees) => {\n  return degrees * Math.PI / 180;\n};\n\nexport const radiansToDegrees = (radians) => {\n  return radians * 180 / Math.PI;\n};\n\nexport const formatDate = (timestamp) => {\n  return new Date(timestamp).toLocaleString();\n};\n\nexport const formatDuration = (seconds) => {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n};\n\nexport const generateRandomAngles = (jointLimits) => {\n  return jointLimits.map(limit => {\n    const range = limit.max - limit.min;\n    return limit.min + Math.random() * range;\n  });\n};\n\nexport const getDifficultyColor = (difficulty) => {\n  switch (difficulty?.toLowerCase()) {\n    case 'beginner':\n      return '#4CAF50'; // Green\n    case 'intermediate':\n      return '#FF9800'; // Orange\n    case 'advanced':\n      return '#F44336'; // Red\n    default:\n      return '#2196F3'; // Blue\n  }\n};\n\nexport const getRank = (score) => {\n  if (score >= 90) return { rank: 'Master', color: '#FFD700' };\n  if (score >= 80) return { rank: 'Expert', color: '#C0C0C0' };\n  if (score >= 70) return { rank: 'Advanced', color: '#CD7F32' };\n  if (score >= 60) return { rank: 'Intermediate', color: '#4CAF50' };\n  return { rank: 'Beginner', color: '#2196F3' };\n};\n\nexport const getScoreColor = (score) => {\n  if (score >= 90) return '#4CAF50'; // Green\n  if (score >= 80) return '#8BC34A'; // Light green\n  if (score >= 70) return '#CDDC39'; // Yellow-green\n  if (score >= 60) return '#FFEB3B'; // Yellow\n  if (score >= 50) return '#FF9800'; // Orange\n  return '#F44336'; // Red\n};\n\n// Missing functions that useRobotController expects\nexport const now = () => Date.now();\n\nexport const debugLog = (message, ...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`[DEBUG] ${message}`, ...args);\n  }\n};\n\nexport const errorLog = (message, error) => {\n  console.error(`[ERROR] ${message}`, error);\n};\n\nexport const clamp = (value, min, max) => {\n  return Math.max(min, Math.min(max, value));\n};\n\n// Robot utility functions\nexport const degreesToPositionRaw = (degrees, motorSpecs) => {\n  // Convert degrees to raw motor position\n  // This is a simplified conversion - adjust based on your motor specs\n  const range = motorSpecs?.positionRange || 4096;\n  const normalized = (degrees + 180) / 360; // Normalize to 0-1\n  return Math.round(normalized * range);\n};\n\nexport const rawToDegrees = (rawPosition, motorSpecs) => {\n  // Convert raw motor position to degrees\n  const range = motorSpecs?.positionRange || 4096;\n  const normalized = rawPosition / range; // Normalize to 0-1\n  return (normalized * 360) - 180; // Convert to -180 to 180 degrees\n};\n\nexport const degreesToVelocityRaw = (degreesPerSecond, motorSpecs) => {\n  // Convert degrees per second to raw velocity units\n  const maxVelocity = motorSpecs?.maxVelocity || 1023;\n  const maxDegreesPerSecond = motorSpecs?.maxDegreesPerSecond || 114; // rpm to deg/s\n  \n  const normalized = Math.abs(degreesPerSecond) / maxDegreesPerSecond;\n  return Math.round(normalized * maxVelocity);\n};\n\n// Export default object for backward compatibility\nconst robotUtils = {\n  degreesToPositionRaw,\n  rawToDegrees,\n  degreesToVelocityRaw,\n  clamp,\n  degreesToRadians,\n  radiansToDegrees\n};\n\nexport default robotUtils;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
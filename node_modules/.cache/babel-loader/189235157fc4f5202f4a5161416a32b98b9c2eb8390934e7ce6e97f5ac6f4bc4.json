{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\challenges\\\\PDControlChallenge.jsx\",\n  _s = $RefreshSig$();\n// ===== PDControlChallenge.jsx =====\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Box, Typography, Card, CardContent, Grid, Slider, TextField, Button, Alert, FormControl, InputLabel, Select, MenuItem, Switch, FormControlLabel } from '@mui/material';\nimport { PlayArrow, Stop, Tune } from '@mui/icons-material';\nimport robotService from '../../services/robotService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PDControlChallenge = ({\n  challenge,\n  onDataChange,\n  onError,\n  started\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    connected,\n    jointAngles\n  } = useSelector(state => state.robot);\n  const [kp, setKp] = useState(400);\n  const [kd, setKd] = useState(0);\n  const [targetPosition, setTargetPosition] = useState(0);\n  const [selectedJoint, setSelectedJoint] = useState(1);\n  const [controlActive, setControlActive] = useState(false);\n  const [responseData, setResponseData] = useState([]);\n  const [settleTime, setSettleTime] = useState(null);\n  const [overshoot, setOvershoot] = useState(null);\n  const [steadyStateError, setSteadyStateError] = useState(null);\n  const [autoTune, setAutoTune] = useState(false);\n  useEffect(() => {\n    onDataChange && onDataChange({\n      kp,\n      kd,\n      targetPosition,\n      selectedJoint,\n      settleTime,\n      overshoot,\n      steadyStateError,\n      responseData: responseData.slice(-100) // Keep last 100 points\n    });\n  }, [kp, kd, targetPosition, selectedJoint, settleTime, overshoot, steadyStateError, responseData]);\n  const startControl = async () => {\n    try {\n      if (!connected) {\n        onError('Robot not connected');\n        return;\n      }\n      setControlActive(true);\n      setResponseData([]);\n      const response = await robotService.setPDControl(selectedJoint, {\n        kp,\n        kd,\n        target: targetPosition\n      });\n\n      // Start monitoring response\n      monitorResponse();\n    } catch (error) {\n      onError('Failed to start PD control');\n      setControlActive(false);\n    }\n  };\n  const stopControl = async () => {\n    try {\n      await robotService.stopPDControl(selectedJoint);\n      setControlActive(false);\n      analyzeResponse();\n    } catch (error) {\n      onError('Failed to stop PD control');\n    }\n  };\n  const monitorResponse = () => {\n    const interval = setInterval(async () => {\n      if (!controlActive) {\n        clearInterval(interval);\n        return;\n      }\n      try {\n        const currentAngle = jointAngles[selectedJoint - 1] || 0;\n        const timestamp = Date.now();\n        setResponseData(prev => [...prev, {\n          time: timestamp,\n          position: currentAngle,\n          target: targetPosition,\n          error: targetPosition - currentAngle\n        }]);\n\n        // Stop after 10 seconds or when settled\n        if (responseData.length > 1000 || Math.abs(targetPosition - currentAngle) < 1) {\n          clearInterval(interval);\n          setControlActive(false);\n          analyzeResponse();\n        }\n      } catch (error) {\n        clearInterval(interval);\n        setControlActive(false);\n      }\n    }, 10); // 100Hz sampling\n  };\n  const analyzeResponse = () => {\n    if (responseData.length < 10) return;\n\n    // Calculate settle time (time to reach and stay within 2% of target)\n    const finalValue = targetPosition;\n    const tolerance = Math.abs(finalValue) * 0.02 + 1; // 2% + 1 degree\n\n    let settleIndex = -1;\n    for (let i = responseData.length - 1; i >= 0; i--) {\n      if (Math.abs(responseData[i].error) > tolerance) {\n        settleIndex = i + 1;\n        break;\n      }\n    }\n    if (settleIndex > 0) {\n      const settleTimeMs = responseData[settleIndex].time - responseData[0].time;\n      setSettleTime(settleTimeMs / 1000); // Convert to seconds\n    }\n\n    // Calculate overshoot\n    const maxValue = Math.max(...responseData.map(d => d.position));\n    const minValue = Math.min(...responseData.map(d => d.position));\n    let overshootPercent = 0;\n    if (targetPosition > responseData[0].position) {\n      overshootPercent = Math.max(0, (maxValue - finalValue) / Math.abs(finalValue) * 100);\n    } else {\n      overshootPercent = Math.max(0, (finalValue - minValue) / Math.abs(finalValue) * 100);\n    }\n    setOvershoot(overshootPercent);\n\n    // Calculate steady-state error\n    const lastValues = responseData.slice(-50); // Last 50 samples\n    const avgFinalValue = lastValues.reduce((sum, d) => sum + d.position, 0) / lastValues.length;\n    setSteadyStateError(Math.abs(finalValue - avgFinalValue));\n  };\n  const performAutoTune = async () => {\n    try {\n      setAutoTune(true);\n      const response = await robotService.autoTunePD(selectedJoint, targetPosition);\n      setKp(response.data.kp);\n      setKd(response.data.kd);\n    } catch (error) {\n      onError('Auto-tune failed');\n    } finally {\n      setAutoTune(false);\n    }\n  };\n  const getPerformanceColor = (value, thresholds) => {\n    if (value === null) return 'text.secondary';\n    if (value <= thresholds.excellent) return 'success.main';\n    if (value <= thresholds.good) return 'warning.main';\n    return 'error.main';\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"PD Control Tuning Challenge\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 3\n      },\n      children: \"Tune the PD controller parameters (Kp and Kd) to achieve optimal step response performance. Minimize settle time, overshoot, and steady-state error.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Control Parameters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Joint\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: selectedJoint,\n                label: \"Joint\",\n                onChange: e => setSelectedJoint(e.target.value),\n                disabled: controlActive,\n                children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 1,\n                  children: \"Joint 1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 2,\n                  children: \"Joint 2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: 3,\n                  children: \"Joint 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 207,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Target Position (degrees)\",\n              type: \"number\",\n              value: targetPosition,\n              onChange: e => setTargetPosition(Number(e.target.value)),\n              disabled: controlActive,\n              sx: {\n                mb: 2\n              },\n              inputProps: {\n                min: -90,\n                max: 90\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                gutterBottom: true,\n                children: [\"Proportional Gain (Kp): \", kp]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                value: kp,\n                onChange: (e, value) => setKp(value),\n                min: 0,\n                max: 1000,\n                step: 10,\n                disabled: controlActive,\n                valueLabelDisplay: \"auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 3\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                gutterBottom: true,\n                children: [\"Derivative Gain (Kd): \", kd]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Slider, {\n                value: kd,\n                onChange: (e, value) => setKd(value),\n                min: 0,\n                max: 100,\n                step: 1,\n                disabled: controlActive,\n                valueLabelDisplay: \"auto\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              control: /*#__PURE__*/_jsxDEV(Switch, {\n                checked: autoTune,\n                onChange: e => setAutoTune(e.target.checked),\n                disabled: controlActive\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this),\n              label: \"Auto-tune enabled\",\n              sx: {\n                mb: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 2\n              },\n              children: !controlActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: startControl,\n                  startIcon: /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 34\n                  }, this),\n                  disabled: !connected,\n                  children: \"Start Test\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this), autoTune && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"outlined\",\n                  onClick: performAutoTune,\n                  startIcon: /*#__PURE__*/_jsxDEV(Tune, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 36\n                  }, this),\n                  disabled: !connected,\n                  children: \"Auto Tune\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"error\",\n                onClick: stopControl,\n                startIcon: /*#__PURE__*/_jsxDEV(Stop, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 32\n                }, this),\n                children: \"Stop Test\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Performance Metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 2,\n                p: 2,\n                bgcolor: 'background.paper',\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: \"Settle Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                color: getPerformanceColor(settleTime, {\n                  excellent: 2,\n                  good: 5\n                }),\n                children: settleTime !== null ? `${settleTime.toFixed(2)}s` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"text.secondary\",\n                children: \"Target: < 2s (excellent), < 5s (good)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 2,\n                p: 2,\n                bgcolor: 'background.paper',\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: \"Overshoot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                color: getPerformanceColor(overshoot, {\n                  excellent: 5,\n                  good: 15\n                }),\n                children: overshoot !== null ? `${overshoot.toFixed(1)}%` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"text.secondary\",\n                children: \"Target: < 5% (excellent), < 15% (good)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 2,\n                p: 2,\n                bgcolor: 'background.paper',\n                borderRadius: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"text.secondary\",\n                children: \"Steady-State Error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                color: getPerformanceColor(steadyStateError, {\n                  excellent: 1,\n                  good: 3\n                }),\n                children: steadyStateError !== null ? `${steadyStateError.toFixed(2)}°` : 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"caption\",\n                color: \"text.secondary\",\n                children: \"Target: < 1\\xB0 (excellent), < 3\\xB0 (good)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Alert, {\n              severity: controlActive ? \"info\" : connected ? \"success\" : \"warning\",\n              sx: {\n                mt: 2\n              },\n              children: controlActive ? \"Control loop active - monitoring response...\" : connected ? \"Ready to start PD control test\" : \"Robot not connected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Step Response\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                height: 300,\n                bgcolor: 'background.paper',\n                borderRadius: 1,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                border: '1px dashed',\n                borderColor: 'divider'\n              },\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                color: \"text.secondary\",\n                children: responseData.length > 0 ? `Response data: ${responseData.length} samples` : \"Start a test to see the step response plot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(PDControlChallenge, \"50YU0sAAyAJErmpCuRU7G7JMlvA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = PDControlChallenge;\nexport default PDControlChallenge;\nvar _c;\n$RefreshReg$(_c, \"PDControlChallenge\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","Box","Typography","Card","CardContent","Grid","Slider","TextField","Button","Alert","FormControl","InputLabel","Select","MenuItem","Switch","FormControlLabel","PlayArrow","Stop","Tune","robotService","jsxDEV","_jsxDEV","Fragment","_Fragment","PDControlChallenge","challenge","onDataChange","onError","started","_s","dispatch","connected","jointAngles","state","robot","kp","setKp","kd","setKd","targetPosition","setTargetPosition","selectedJoint","setSelectedJoint","controlActive","setControlActive","responseData","setResponseData","settleTime","setSettleTime","overshoot","setOvershoot","steadyStateError","setSteadyStateError","autoTune","setAutoTune","slice","startControl","response","setPDControl","target","monitorResponse","error","stopControl","stopPDControl","analyzeResponse","interval","setInterval","clearInterval","currentAngle","timestamp","Date","now","prev","time","position","length","Math","abs","finalValue","tolerance","settleIndex","i","settleTimeMs","maxValue","max","map","d","minValue","min","overshootPercent","lastValues","avgFinalValue","reduce","sum","performAutoTune","autoTunePD","data","getPerformanceColor","value","thresholds","excellent","good","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","sx","mb","container","spacing","item","xs","md","fullWidth","label","onChange","e","disabled","type","Number","inputProps","step","valueLabelDisplay","control","checked","display","gap","onClick","startIcon","color","p","bgcolor","borderRadius","toFixed","severity","mt","height","alignItems","justifyContent","border","borderColor","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/challenges/PDControlChallenge.jsx"],"sourcesContent":["// ===== PDControlChallenge.jsx =====\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Slider,\r\n  TextField,\r\n  Button,\r\n  Alert,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Switch,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport { PlayArrow, Stop, Tune } from '@mui/icons-material';\r\nimport robotService from '../../services/robotService';\r\n\r\nconst PDControlChallenge = ({ challenge, onDataChange, onError, started }) => {\r\n  const dispatch = useDispatch();\r\n  const { connected, jointAngles } = useSelector(state => state.robot);\r\n  \r\n  const [kp, setKp] = useState(400);\r\n  const [kd, setKd] = useState(0);\r\n  const [targetPosition, setTargetPosition] = useState(0);\r\n  const [selectedJoint, setSelectedJoint] = useState(1);\r\n  const [controlActive, setControlActive] = useState(false);\r\n  const [responseData, setResponseData] = useState([]);\r\n  const [settleTime, setSettleTime] = useState(null);\r\n  const [overshoot, setOvershoot] = useState(null);\r\n  const [steadyStateError, setSteadyStateError] = useState(null);\r\n  const [autoTune, setAutoTune] = useState(false);\r\n\r\n  useEffect(() => {\r\n    onDataChange && onDataChange({\r\n      kp,\r\n      kd,\r\n      targetPosition,\r\n      selectedJoint,\r\n      settleTime,\r\n      overshoot,\r\n      steadyStateError,\r\n      responseData: responseData.slice(-100) // Keep last 100 points\r\n    });\r\n  }, [kp, kd, targetPosition, selectedJoint, settleTime, overshoot, steadyStateError, responseData]);\r\n\r\n  const startControl = async () => {\r\n    try {\r\n      if (!connected) {\r\n        onError('Robot not connected');\r\n        return;\r\n      }\r\n\r\n      setControlActive(true);\r\n      setResponseData([]);\r\n      \r\n      const response = await robotService.setPDControl(selectedJoint, {\r\n        kp,\r\n        kd,\r\n        target: targetPosition\r\n      });\r\n\r\n      // Start monitoring response\r\n      monitorResponse();\r\n      \r\n    } catch (error) {\r\n      onError('Failed to start PD control');\r\n      setControlActive(false);\r\n    }\r\n  };\r\n\r\n  const stopControl = async () => {\r\n    try {\r\n      await robotService.stopPDControl(selectedJoint);\r\n      setControlActive(false);\r\n      analyzeResponse();\r\n    } catch (error) {\r\n      onError('Failed to stop PD control');\r\n    }\r\n  };\r\n\r\n  const monitorResponse = () => {\r\n    const interval = setInterval(async () => {\r\n      if (!controlActive) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const currentAngle = jointAngles[selectedJoint - 1] || 0;\r\n        const timestamp = Date.now();\r\n        \r\n        setResponseData(prev => [...prev, {\r\n          time: timestamp,\r\n          position: currentAngle,\r\n          target: targetPosition,\r\n          error: targetPosition - currentAngle\r\n        }]);\r\n\r\n        // Stop after 10 seconds or when settled\r\n        if (responseData.length > 1000 || Math.abs(targetPosition - currentAngle) < 1) {\r\n          clearInterval(interval);\r\n          setControlActive(false);\r\n          analyzeResponse();\r\n        }\r\n      } catch (error) {\r\n        clearInterval(interval);\r\n        setControlActive(false);\r\n      }\r\n    }, 10); // 100Hz sampling\r\n  };\r\n\r\n  const analyzeResponse = () => {\r\n    if (responseData.length < 10) return;\r\n\r\n    // Calculate settle time (time to reach and stay within 2% of target)\r\n    const finalValue = targetPosition;\r\n    const tolerance = Math.abs(finalValue) * 0.02 + 1; // 2% + 1 degree\r\n    \r\n    let settleIndex = -1;\r\n    for (let i = responseData.length - 1; i >= 0; i--) {\r\n      if (Math.abs(responseData[i].error) > tolerance) {\r\n        settleIndex = i + 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (settleIndex > 0) {\r\n      const settleTimeMs = responseData[settleIndex].time - responseData[0].time;\r\n      setSettleTime(settleTimeMs / 1000); // Convert to seconds\r\n    }\r\n\r\n    // Calculate overshoot\r\n    const maxValue = Math.max(...responseData.map(d => d.position));\r\n    const minValue = Math.min(...responseData.map(d => d.position));\r\n    \r\n    let overshootPercent = 0;\r\n    if (targetPosition > responseData[0].position) {\r\n      overshootPercent = Math.max(0, (maxValue - finalValue) / Math.abs(finalValue) * 100);\r\n    } else {\r\n      overshootPercent = Math.max(0, (finalValue - minValue) / Math.abs(finalValue) * 100);\r\n    }\r\n    setOvershoot(overshootPercent);\r\n\r\n    // Calculate steady-state error\r\n    const lastValues = responseData.slice(-50); // Last 50 samples\r\n    const avgFinalValue = lastValues.reduce((sum, d) => sum + d.position, 0) / lastValues.length;\r\n    setSteadyStateError(Math.abs(finalValue - avgFinalValue));\r\n  };\r\n\r\n  const performAutoTune = async () => {\r\n    try {\r\n      setAutoTune(true);\r\n      const response = await robotService.autoTunePD(selectedJoint, targetPosition);\r\n      setKp(response.data.kp);\r\n      setKd(response.data.kd);\r\n    } catch (error) {\r\n      onError('Auto-tune failed');\r\n    } finally {\r\n      setAutoTune(false);\r\n    }\r\n  };\r\n\r\n  const getPerformanceColor = (value, thresholds) => {\r\n    if (value === null) return 'text.secondary';\r\n    if (value <= thresholds.excellent) return 'success.main';\r\n    if (value <= thresholds.good) return 'warning.main';\r\n    return 'error.main';\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        PD Control Tuning Challenge\r\n      </Typography>\r\n      \r\n      <Typography variant=\"body1\" sx={{ mb: 3 }}>\r\n        Tune the PD controller parameters (Kp and Kd) to achieve optimal step response performance.\r\n        Minimize settle time, overshoot, and steady-state error.\r\n      </Typography>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Control Parameters */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Control Parameters\r\n              </Typography>\r\n              \r\n              {/* Joint Selection */}\r\n              <FormControl fullWidth sx={{ mb: 2 }}>\r\n                <InputLabel>Joint</InputLabel>\r\n                <Select\r\n                  value={selectedJoint}\r\n                  label=\"Joint\"\r\n                  onChange={(e) => setSelectedJoint(e.target.value)}\r\n                  disabled={controlActive}\r\n                >\r\n                  <MenuItem value={1}>Joint 1</MenuItem>\r\n                  <MenuItem value={2}>Joint 2</MenuItem>\r\n                  <MenuItem value={3}>Joint 3</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {/* Target Position */}\r\n              <TextField\r\n                fullWidth\r\n                label=\"Target Position (degrees)\"\r\n                type=\"number\"\r\n                value={targetPosition}\r\n                onChange={(e) => setTargetPosition(Number(e.target.value))}\r\n                disabled={controlActive}\r\n                sx={{ mb: 2 }}\r\n                inputProps={{ min: -90, max: 90 }}\r\n              />\r\n\r\n              {/* Kp Parameter */}\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Proportional Gain (Kp): {kp}\r\n                </Typography>\r\n                <Slider\r\n                  value={kp}\r\n                  onChange={(e, value) => setKp(value)}\r\n                  min={0}\r\n                  max={1000}\r\n                  step={10}\r\n                  disabled={controlActive}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n              </Box>\r\n\r\n              {/* Kd Parameter */}\r\n              <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body2\" gutterBottom>\r\n                  Derivative Gain (Kd): {kd}\r\n                </Typography>\r\n                <Slider\r\n                  value={kd}\r\n                  onChange={(e, value) => setKd(value)}\r\n                  min={0}\r\n                  max={100}\r\n                  step={1}\r\n                  disabled={controlActive}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n              </Box>\r\n\r\n              {/* Auto-tune Option */}\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={autoTune}\r\n                    onChange={(e) => setAutoTune(e.target.checked)}\r\n                    disabled={controlActive}\r\n                  />\r\n                }\r\n                label=\"Auto-tune enabled\"\r\n                sx={{ mb: 2 }}\r\n              />\r\n\r\n              {/* Control Buttons */}\r\n              <Box sx={{ display: 'flex', gap: 2 }}>\r\n                {!controlActive ? (\r\n                  <>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      onClick={startControl}\r\n                      startIcon={<PlayArrow />}\r\n                      disabled={!connected}\r\n                    >\r\n                      Start Test\r\n                    </Button>\r\n                    {autoTune && (\r\n                      <Button\r\n                        variant=\"outlined\"\r\n                        onClick={performAutoTune}\r\n                        startIcon={<Tune />}\r\n                        disabled={!connected}\r\n                      >\r\n                        Auto Tune\r\n                      </Button>\r\n                    )}\r\n                  </>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    onClick={stopControl}\r\n                    startIcon={<Stop />}\r\n                  >\r\n                    Stop Test\r\n                  </Button>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Performance Metrics */}\r\n        <Grid item xs={12} md={6}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Performance Metrics\r\n              </Typography>\r\n              \r\n              {/* Settle Time */}\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Settle Time\r\n                </Typography>\r\n                <Typography \r\n                  variant=\"h5\" \r\n                  color={getPerformanceColor(settleTime, { excellent: 2, good: 5 })}\r\n                >\r\n                  {settleTime !== null ? `${settleTime.toFixed(2)}s` : 'N/A'}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  Target: &lt; 2s (excellent), &lt; 5s (good)\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Overshoot */}\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Overshoot\r\n                </Typography>\r\n                <Typography \r\n                  variant=\"h5\" \r\n                  color={getPerformanceColor(overshoot, { excellent: 5, good: 15 })}\r\n                >\r\n                  {overshoot !== null ? `${overshoot.toFixed(1)}%` : 'N/A'}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  Target: &lt; 5% (excellent), &lt; 15% (good)\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Steady-State Error */}\r\n              <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Steady-State Error\r\n                </Typography>\r\n                <Typography \r\n                  variant=\"h5\" \r\n                  color={getPerformanceColor(steadyStateError, { excellent: 1, good: 3 })}\r\n                >\r\n                  {steadyStateError !== null ? `${steadyStateError.toFixed(2)}°` : 'N/A'}\r\n                </Typography>\r\n                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                  Target: &lt; 1° (excellent), &lt; 3° (good)\r\n                </Typography>\r\n              </Box>\r\n\r\n              {/* Current Status */}\r\n              <Alert \r\n                severity={controlActive ? \"info\" : connected ? \"success\" : \"warning\"}\r\n                sx={{ mt: 2 }}\r\n              >\r\n                {controlActive \r\n                  ? \"Control loop active - monitoring response...\" \r\n                  : connected \r\n                    ? \"Ready to start PD control test\" \r\n                    : \"Robot not connected\"\r\n                }\r\n              </Alert>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Response Plot Placeholder */}\r\n        <Grid item xs={12}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Step Response\r\n              </Typography>\r\n              <Box \r\n                sx={{ \r\n                  height: 300, \r\n                  bgcolor: 'background.paper', \r\n                  borderRadius: 1,\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  border: '1px dashed',\r\n                  borderColor: 'divider'\r\n                }}\r\n              >\r\n                <Typography color=\"text.secondary\">\r\n                  {responseData.length > 0 \r\n                    ? `Response data: ${responseData.length} samples` \r\n                    : \"Start a test to see the step response plot\"\r\n                  }\r\n                </Typography>\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PDControlChallenge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
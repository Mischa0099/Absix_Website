{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchChallenges, startChallenge, submitChallenge, setCurrentChallenge, clearCurrentChallenge, updateChallengeProgress } from '../store/challengeSlice';\nexport const useChallenges = () => {\n  _s();\n  const dispatch = useDispatch();\n  const challengeState = useSelector(state => state.challenges);\n  const loadChallenges = useCallback(async () => {\n    try {\n      await dispatch(fetchChallenges());\n      return true;\n    } catch (error) {\n      console.error('Failed to load challenges:', error);\n      return false;\n    }\n  }, [dispatch]);\n  const beginChallenge = useCallback(async (challengeId, parameters = {}) => {\n    try {\n      const result = await dispatch(startChallenge({\n        challengeId,\n        parameters\n      }));\n      return result.type.includes('fulfilled');\n    } catch (error) {\n      console.error('Failed to start challenge:', error);\n      return false;\n    }\n  }, [dispatch]);\n  const submitSolution = useCallback(async (challengeId, submission) => {\n    try {\n      const result = await dispatch(submitChallenge({\n        challengeId,\n        submission\n      }));\n      return result.type.includes('fulfilled') ? result.payload.data : null;\n    } catch (error) {\n      console.error('Failed to submit challenge:', error);\n      return null;\n    }\n  }, [dispatch]);\n  const setActive = useCallback(challenge => {\n    dispatch(setCurrentChallenge(challenge));\n  }, [dispatch]);\n  const clearActive = useCallback(() => {\n    dispatch(clearCurrentChallenge());\n  }, [dispatch]);\n  const updateProgress = useCallback((challengeId, progress) => {\n    dispatch(updateChallengeProgress({\n      challengeId,\n      progress\n    }));\n  }, [dispatch]);\n  const getChallengeById = useCallback(id => {\n    return challengeState.challenges.find(c => c.id === id);\n  }, [challengeState.challenges]);\n  const getCompletedChallenges = useCallback(() => {\n    return challengeState.challenges.filter(c => c.completed);\n  }, [challengeState.challenges]);\n  const getAvailableChallenges = useCallback(() => {\n    return challengeState.challenges.filter(c => !c.locked && !c.completed);\n  }, [challengeState.challenges]);\n  return {\n    ...challengeState,\n    loadChallenges,\n    beginChallenge,\n    submitSolution,\n    setActive,\n    clearActive,\n    updateProgress,\n    getChallengeById,\n    getCompletedChallenges,\n    getAvailableChallenges\n  };\n};\n_s(useChallenges, \"MaC0eV5T+tmfAQzCXSxzeF/ogjU=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useCallback","useSelector","useDispatch","fetchChallenges","startChallenge","submitChallenge","setCurrentChallenge","clearCurrentChallenge","updateChallengeProgress","useChallenges","_s","dispatch","challengeState","state","challenges","loadChallenges","error","console","beginChallenge","challengeId","parameters","result","type","includes","submitSolution","submission","payload","data","setActive","challenge","clearActive","updateProgress","progress","getChallengeById","id","find","c","getCompletedChallenges","filter","completed","getAvailableChallenges","locked"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/hooks/useChallenges.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { \n  fetchChallenges, \n  startChallenge, \n  submitChallenge, \n  setCurrentChallenge,\n  clearCurrentChallenge,\n  updateChallengeProgress \n} from '../store/challengeSlice';\n\nexport const useChallenges = () => {\n  const dispatch = useDispatch();\n  const challengeState = useSelector(state => state.challenges);\n\n  const loadChallenges = useCallback(async () => {\n    try {\n      await dispatch(fetchChallenges());\n      return true;\n    } catch (error) {\n      console.error('Failed to load challenges:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  const beginChallenge = useCallback(async (challengeId, parameters = {}) => {\n    try {\n      const result = await dispatch(startChallenge({ challengeId, parameters }));\n      return result.type.includes('fulfilled');\n    } catch (error) {\n      console.error('Failed to start challenge:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  const submitSolution = useCallback(async (challengeId, submission) => {\n    try {\n      const result = await dispatch(submitChallenge({ challengeId, submission }));\n      return result.type.includes('fulfilled') ? result.payload.data : null;\n    } catch (error) {\n      console.error('Failed to submit challenge:', error);\n      return null;\n    }\n  }, [dispatch]);\n\n  const setActive = useCallback((challenge) => {\n    dispatch(setCurrentChallenge(challenge));\n  }, [dispatch]);\n\n  const clearActive = useCallback(() => {\n    dispatch(clearCurrentChallenge());\n  }, [dispatch]);\n\n  const updateProgress = useCallback((challengeId, progress) => {\n    dispatch(updateChallengeProgress({ challengeId, progress }));\n  }, [dispatch]);\n\n  const getChallengeById = useCallback((id) => {\n    return challengeState.challenges.find(c => c.id === id);\n  }, [challengeState.challenges]);\n\n  const getCompletedChallenges = useCallback(() => {\n    return challengeState.challenges.filter(c => c.completed);\n  }, [challengeState.challenges]);\n\n  const getAvailableChallenges = useCallback(() => {\n    return challengeState.challenges.filter(c => !c.locked && !c.completed);\n  }, [challengeState.challenges]);\n\n  return {\n    ...challengeState,\n    loadChallenges,\n    beginChallenge,\n    submitSolution,\n    setActive,\n    clearActive,\n    updateProgress,\n    getChallengeById,\n    getCompletedChallenges,\n    getAvailableChallenges,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
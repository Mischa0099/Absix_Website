{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Mock challenges data\nconst mockChallenges = [{\n  id: 'C1',\n  title: 'Robot Configuration',\n  description: 'Learn basic robot setup and configuration',\n  difficulty: 'Beginner',\n  estimated_time: 30,\n  is_unlocked: true,\n  is_completed: false,\n  best_score: 0,\n  instructions: 'Configure the robot and understand its basic parameters.',\n  learning_objectives: ['Understand robot kinematics', 'Learn joint configurations', 'Practice basic control']\n}, {\n  id: 'C2',\n  title: 'Control Theory Quiz',\n  description: 'Test your knowledge of control theory fundamentals',\n  difficulty: 'Beginner',\n  estimated_time: 20,\n  is_unlocked: true,\n  is_completed: false,\n  best_score: 0,\n  instructions: 'Answer questions about control theory and robotics fundamentals.',\n  learning_objectives: ['Review control theory', 'Understand PID control', 'Learn stability concepts']\n}, {\n  id: 'C3',\n  title: 'PD Control Tuning',\n  description: 'Tune PD controller parameters for optimal performance',\n  difficulty: 'Intermediate',\n  estimated_time: 45,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  instructions: 'Tune the PD controller to achieve stable robot motion.',\n  learning_objectives: ['Learn PD control', 'Understand parameter tuning', 'Practice stability analysis']\n}, {\n  id: 'C4',\n  title: 'Workspace Analysis',\n  description: 'Analyze the robot workspace and reachability',\n  difficulty: 'Intermediate',\n  estimated_time: 40,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  instructions: 'Analyze the robot workspace and determine reachable positions.',\n  learning_objectives: ['Understand workspace concepts', 'Learn forward kinematics', 'Practice geometric analysis']\n}, {\n  id: 'C5',\n  title: 'Inverse Kinematics',\n  description: 'Solve inverse kinematics for target positions',\n  difficulty: 'Advanced',\n  estimated_time: 60,\n  is_unlocked: false,\n  is_completed: false,\n  best_score: 0,\n  instructions: 'Calculate joint angles for desired end-effector positions.',\n  learning_objectives: ['Master inverse kinematics', 'Understand multiple solutions', 'Practice numerical methods']\n}];\n\n// Mock leaderboard data\nconst mockLeaderboard = [{\n  id: 1,\n  username: 'student1',\n  challenges_completed: 5,\n  total_score: 450,\n  display_name: 'Student One'\n}, {\n  id: 2,\n  username: 'student2',\n  challenges_completed: 4,\n  total_score: 380,\n  display_name: 'Student Two'\n}, {\n  id: 3,\n  username: 'admin',\n  challenges_completed: 3,\n  total_score: 290,\n  display_name: 'Administrator'\n}];\n\n// Async thunks\nexport const fetchChallenges = createAsyncThunk('challenges/fetchChallenges', async (_, {\n  getState\n}) => {\n  var _auth$user;\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  const {\n    auth\n  } = getState();\n  const userId = (_auth$user = auth.user) === null || _auth$user === void 0 ? void 0 : _auth$user.id;\n\n  // Get user progress from localStorage\n  const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n\n  // Update challenges with user progress\n  const challengesWithProgress = mockChallenges.map(challenge => {\n    var _userProgress$challen, _userProgress$challen2, _userProgress$challen3;\n    return {\n      ...challenge,\n      is_completed: ((_userProgress$challen = userProgress[challenge.id]) === null || _userProgress$challen === void 0 ? void 0 : _userProgress$challen.completed) || false,\n      best_score: ((_userProgress$challen2 = userProgress[challenge.id]) === null || _userProgress$challen2 === void 0 ? void 0 : _userProgress$challen2.best_score) || 0,\n      is_unlocked: challenge.id === 'C1' || challenge.id === 'C2' || ((_userProgress$challen3 = userProgress[challenge.id]) === null || _userProgress$challen3 === void 0 ? void 0 : _userProgress$challen3.unlocked) || false\n    };\n  });\n  return challengesWithProgress;\n});\nexport const fetchChallenge = createAsyncThunk('challenges/fetchChallenge', async challengeId => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 500));\n  const challenge = mockChallenges.find(c => c.id === challengeId);\n  if (!challenge) {\n    throw new Error('Challenge not found');\n  }\n  return challenge;\n});\nexport const submitChallenge = createAsyncThunk('challenges/submitChallenge', async ({\n  challengeId,\n  submission\n}, {\n  getState\n}) => {\n  var _auth$user2, _userProgress$challen4;\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  const {\n    auth\n  } = getState();\n  const userId = (_auth$user2 = auth.user) === null || _auth$user2 === void 0 ? void 0 : _auth$user2.id;\n\n  // Calculate a mock score\n  const score = Math.floor(Math.random() * 40) + 60; // 60-100\n\n  // Update user progress\n  const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n  userProgress[challengeId] = {\n    completed: true,\n    best_score: Math.max(((_userProgress$challen4 = userProgress[challengeId]) === null || _userProgress$challen4 === void 0 ? void 0 : _userProgress$challen4.best_score) || 0, score),\n    unlocked: true\n  };\n\n  // Unlock next challenge\n  const challengeIndex = mockChallenges.findIndex(c => c.id === challengeId);\n  if (challengeIndex < mockChallenges.length - 1) {\n    const nextChallenge = mockChallenges[challengeIndex + 1];\n    userProgress[nextChallenge.id] = {\n      ...userProgress[nextChallenge.id],\n      unlocked: true\n    };\n  }\n  localStorage.setItem(`progress_${userId}`, JSON.stringify(userProgress));\n  return {\n    challengeId,\n    score,\n    success: score >= 70\n  };\n});\nexport const fetchUserProgress = createAsyncThunk('challenges/fetchUserProgress', async (_, {\n  getState\n}) => {\n  var _auth$user3;\n  const {\n    auth\n  } = getState();\n  const userId = (_auth$user3 = auth.user) === null || _auth$user3 === void 0 ? void 0 : _auth$user3.id;\n  const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n  const totalScore = Object.values(userProgress).reduce((sum, progress) => sum + (progress.best_score || 0), 0);\n  const challengesCompleted = Object.values(userProgress).filter(progress => progress.completed).length;\n  return {\n    totalScore,\n    challengesCompleted,\n    averageScore: challengesCompleted > 0 ? Math.round(totalScore / challengesCompleted) : 0\n  };\n});\nexport const fetchLeaderboard = createAsyncThunk('challenges/fetchLeaderboard', async () => {\n  // Simulate API call\n  await new Promise(resolve => setTimeout(resolve, 800));\n  return mockLeaderboard;\n});\nconst initialState = {\n  challenges: [],\n  currentChallenge: null,\n  userProgress: null,\n  leaderboard: [],\n  loading: false,\n  error: null\n};\nconst challengeSlice = createSlice({\n  name: 'challenges',\n  initialState,\n  reducers: {\n    setCurrentChallenge: (state, action) => {\n      state.currentChallenge = state.challenges.find(c => c.id === action.payload);\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch challenges\n    .addCase(fetchChallenges.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchChallenges.fulfilled, (state, action) => {\n      state.loading = false;\n      state.challenges = action.payload;\n    }).addCase(fetchChallenges.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Fetch single challenge\n    .addCase(fetchChallenge.fulfilled, (state, action) => {\n      state.currentChallenge = action.payload;\n    })\n    // Submit challenge\n    .addCase(submitChallenge.fulfilled, (state, action) => {\n      const {\n        challengeId,\n        score\n      } = action.payload;\n      const challenge = state.challenges.find(c => c.id === challengeId);\n      if (challenge) {\n        challenge.is_completed = true;\n        challenge.best_score = Math.max(challenge.best_score, score);\n      }\n    })\n    // Fetch user progress\n    .addCase(fetchUserProgress.fulfilled, (state, action) => {\n      state.userProgress = action.payload;\n    })\n    // Fetch leaderboard\n    .addCase(fetchLeaderboard.fulfilled, (state, action) => {\n      state.leaderboard = action.payload;\n    });\n  }\n});\nexport const {\n  setCurrentChallenge,\n  clearError\n} = challengeSlice.actions;\nexport default challengeSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","mockChallenges","id","title","description","difficulty","estimated_time","is_unlocked","is_completed","best_score","instructions","learning_objectives","mockLeaderboard","username","challenges_completed","total_score","display_name","fetchChallenges","_","getState","_auth$user","Promise","resolve","setTimeout","auth","userId","user","userProgress","JSON","parse","localStorage","getItem","challengesWithProgress","map","challenge","_userProgress$challen","_userProgress$challen2","_userProgress$challen3","completed","unlocked","fetchChallenge","challengeId","find","c","Error","submitChallenge","submission","_auth$user2","_userProgress$challen4","score","Math","floor","random","max","challengeIndex","findIndex","length","nextChallenge","setItem","stringify","success","fetchUserProgress","_auth$user3","totalScore","Object","values","reduce","sum","progress","challengesCompleted","filter","averageScore","round","fetchLeaderboard","initialState","challenges","currentChallenge","leaderboard","loading","error","challengeSlice","name","reducers","setCurrentChallenge","state","action","payload","clearError","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/store/challengeSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Mock challenges data\nconst mockChallenges = [\n  {\n    id: 'C1',\n    title: 'Robot Configuration',\n    description: 'Learn basic robot setup and configuration',\n    difficulty: 'Beginner',\n    estimated_time: 30,\n    is_unlocked: true,\n    is_completed: false,\n    best_score: 0,\n    instructions: 'Configure the robot and understand its basic parameters.',\n    learning_objectives: ['Understand robot kinematics', 'Learn joint configurations', 'Practice basic control']\n  },\n  {\n    id: 'C2',\n    title: 'Control Theory Quiz',\n    description: 'Test your knowledge of control theory fundamentals',\n    difficulty: 'Beginner',\n    estimated_time: 20,\n    is_unlocked: true,\n    is_completed: false,\n    best_score: 0,\n    instructions: 'Answer questions about control theory and robotics fundamentals.',\n    learning_objectives: ['Review control theory', 'Understand PID control', 'Learn stability concepts']\n  },\n  {\n    id: 'C3',\n    title: 'PD Control Tuning',\n    description: 'Tune PD controller parameters for optimal performance',\n    difficulty: 'Intermediate',\n    estimated_time: 45,\n    is_unlocked: false,\n    is_completed: false,\n    best_score: 0,\n    instructions: 'Tune the PD controller to achieve stable robot motion.',\n    learning_objectives: ['Learn PD control', 'Understand parameter tuning', 'Practice stability analysis']\n  },\n  {\n    id: 'C4',\n    title: 'Workspace Analysis',\n    description: 'Analyze the robot workspace and reachability',\n    difficulty: 'Intermediate',\n    estimated_time: 40,\n    is_unlocked: false,\n    is_completed: false,\n    best_score: 0,\n    instructions: 'Analyze the robot workspace and determine reachable positions.',\n    learning_objectives: ['Understand workspace concepts', 'Learn forward kinematics', 'Practice geometric analysis']\n  },\n  {\n    id: 'C5',\n    title: 'Inverse Kinematics',\n    description: 'Solve inverse kinematics for target positions',\n    difficulty: 'Advanced',\n    estimated_time: 60,\n    is_unlocked: false,\n    is_completed: false,\n    best_score: 0,\n    instructions: 'Calculate joint angles for desired end-effector positions.',\n    learning_objectives: ['Master inverse kinematics', 'Understand multiple solutions', 'Practice numerical methods']\n  }\n];\n\n// Mock leaderboard data\nconst mockLeaderboard = [\n  { id: 1, username: 'student1', challenges_completed: 5, total_score: 450, display_name: 'Student One' },\n  { id: 2, username: 'student2', challenges_completed: 4, total_score: 380, display_name: 'Student Two' },\n  { id: 3, username: 'admin', challenges_completed: 3, total_score: 290, display_name: 'Administrator' },\n];\n\n// Async thunks\nexport const fetchChallenges = createAsyncThunk(\n  'challenges/fetchChallenges',\n  async (_, { getState }) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const { auth } = getState();\n    const userId = auth.user?.id;\n    \n    // Get user progress from localStorage\n    const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n    \n    // Update challenges with user progress\n    const challengesWithProgress = mockChallenges.map(challenge => ({\n      ...challenge,\n      is_completed: userProgress[challenge.id]?.completed || false,\n      best_score: userProgress[challenge.id]?.best_score || 0,\n      is_unlocked: challenge.id === 'C1' || challenge.id === 'C2' || userProgress[challenge.id]?.unlocked || false\n    }));\n    \n    return challengesWithProgress;\n  }\n);\n\nexport const fetchChallenge = createAsyncThunk(\n  'challenges/fetchChallenge',\n  async (challengeId) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const challenge = mockChallenges.find(c => c.id === challengeId);\n    if (!challenge) {\n      throw new Error('Challenge not found');\n    }\n    \n    return challenge;\n  }\n);\n\nexport const submitChallenge = createAsyncThunk(\n  'challenges/submitChallenge',\n  async ({ challengeId, submission }, { getState }) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const { auth } = getState();\n    const userId = auth.user?.id;\n    \n    // Calculate a mock score\n    const score = Math.floor(Math.random() * 40) + 60; // 60-100\n    \n    // Update user progress\n    const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n    userProgress[challengeId] = {\n      completed: true,\n      best_score: Math.max(userProgress[challengeId]?.best_score || 0, score),\n      unlocked: true\n    };\n    \n    // Unlock next challenge\n    const challengeIndex = mockChallenges.findIndex(c => c.id === challengeId);\n    if (challengeIndex < mockChallenges.length - 1) {\n      const nextChallenge = mockChallenges[challengeIndex + 1];\n      userProgress[nextChallenge.id] = { ...userProgress[nextChallenge.id], unlocked: true };\n    }\n    \n    localStorage.setItem(`progress_${userId}`, JSON.stringify(userProgress));\n    \n    return { challengeId, score, success: score >= 70 };\n  }\n);\n\nexport const fetchUserProgress = createAsyncThunk(\n  'challenges/fetchUserProgress',\n  async (_, { getState }) => {\n    const { auth } = getState();\n    const userId = auth.user?.id;\n    \n    const userProgress = JSON.parse(localStorage.getItem(`progress_${userId}`)) || {};\n    \n    const totalScore = Object.values(userProgress).reduce((sum, progress) => sum + (progress.best_score || 0), 0);\n    const challengesCompleted = Object.values(userProgress).filter(progress => progress.completed).length;\n    \n    return {\n      totalScore,\n      challengesCompleted,\n      averageScore: challengesCompleted > 0 ? Math.round(totalScore / challengesCompleted) : 0\n    };\n  }\n);\n\nexport const fetchLeaderboard = createAsyncThunk(\n  'challenges/fetchLeaderboard',\n  async () => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return mockLeaderboard;\n  }\n);\n\nconst initialState = {\n  challenges: [],\n  currentChallenge: null,\n  userProgress: null,\n  leaderboard: [],\n  loading: false,\n  error: null,\n};\n\nconst challengeSlice = createSlice({\n  name: 'challenges',\n  initialState,\n  reducers: {\n    setCurrentChallenge: (state, action) => {\n      state.currentChallenge = state.challenges.find(c => c.id === action.payload);\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Fetch challenges\n      .addCase(fetchChallenges.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchChallenges.fulfilled, (state, action) => {\n        state.loading = false;\n        state.challenges = action.payload;\n      })\n      .addCase(fetchChallenges.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      // Fetch single challenge\n      .addCase(fetchChallenge.fulfilled, (state, action) => {\n        state.currentChallenge = action.payload;\n      })\n      // Submit challenge\n      .addCase(submitChallenge.fulfilled, (state, action) => {\n        const { challengeId, score } = action.payload;\n        const challenge = state.challenges.find(c => c.id === challengeId);\n        if (challenge) {\n          challenge.is_completed = true;\n          challenge.best_score = Math.max(challenge.best_score, score);\n        }\n      })\n      // Fetch user progress\n      .addCase(fetchUserProgress.fulfilled, (state, action) => {\n        state.userProgress = action.payload;\n      })\n      // Fetch leaderboard\n      .addCase(fetchLeaderboard.fulfilled, (state, action) => {\n        state.leaderboard = action.payload;\n      });\n  },\n});\n\nexport const { setCurrentChallenge, clearError } = challengeSlice.actions;\nexport default challengeSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
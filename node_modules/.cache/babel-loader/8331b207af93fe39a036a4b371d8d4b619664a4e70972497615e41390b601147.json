{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useAuth.js\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useCallback } from 'react';\nimport { loginUser, registerUser, logoutUser, getCurrentUser, clearError } from '../store/authSlice';\nimport authService from '../services/authService';\nexport const useAuth = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error\n  } = useSelector(state => state.auth);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const savedToken = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      if (savedToken && savedUser && !user) {\n        try {\n          // Validate token\n          if (authService.isTokenValid()) {\n            const userData = JSON.parse(savedUser);\n            console.log('🔐 useAuth: Restoring user session');\n\n            // Optionally refresh user data from server\n            // await dispatch(getCurrentUser()).unwrap();\n          } else {\n            console.log('🔐 useAuth: Token expired, clearing auth data');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n          }\n        } catch (error) {\n          console.error('🔐 useAuth: Token validation failed:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n        }\n      }\n    };\n    checkAuthStatus();\n  }, [user, dispatch]);\n\n  // Login function\n  const login = useCallback(async (username, password) => {\n    try {\n      console.log('🔐 useAuth: Attempting login...');\n      await dispatch(loginUser({\n        username,\n        password\n      })).unwrap();\n      console.log('🔐 useAuth: Login successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Login failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Register function\n  const register = useCallback(async (username, password, email) => {\n    try {\n      console.log('🔐 useAuth: Attempting registration...');\n      await dispatch(registerUser({\n        username,\n        password,\n        email\n      })).unwrap();\n      console.log('🔐 useAuth: Registration successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Registration failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      console.log('🔐 useAuth: Logging out...');\n      await dispatch(logoutUser()).unwrap();\n      console.log('🔐 useAuth: Logout successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Logout failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Clear error function\n  const clearAuthError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  // Token validation\n  const isTokenValid = useCallback(() => {\n    return authService.isTokenValid();\n  }, []);\n  return {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    clearAuthError,\n    isTokenValid\n  };\n};\n_s(useAuth, \"tUtCzWEouSaUsNV58dPI3IfOGmI=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["useSelector","useDispatch","useEffect","useCallback","loginUser","registerUser","logoutUser","getCurrentUser","clearError","authService","useAuth","_s","dispatch","user","token","isAuthenticated","loading","error","state","auth","checkAuthStatus","savedToken","localStorage","getItem","savedUser","isTokenValid","userData","JSON","parse","console","log","removeItem","login","username","password","unwrap","register","email","logout","clearAuthError"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/hooks/useAuth.js"],"sourcesContent":["// src/hooks/useAuth.js\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useCallback } from 'react';\nimport { loginUser, registerUser, logoutUser, getCurrentUser, clearError } from '../store/authSlice';\nimport authService from '../services/authService';\n\nexport const useAuth = () => {\n  const dispatch = useDispatch();\n  const { user, token, isAuthenticated, loading, error } = useSelector(state => state.auth);\n\n  // Check for existing token on mount\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const savedToken = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      \n      if (savedToken && savedUser && !user) {\n        try {\n          // Validate token\n          if (authService.isTokenValid()) {\n            const userData = JSON.parse(savedUser);\n            console.log('🔐 useAuth: Restoring user session');\n            \n            // Optionally refresh user data from server\n            // await dispatch(getCurrentUser()).unwrap();\n          } else {\n            console.log('🔐 useAuth: Token expired, clearing auth data');\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n          }\n        } catch (error) {\n          console.error('🔐 useAuth: Token validation failed:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n        }\n      }\n    };\n\n    checkAuthStatus();\n  }, [user, dispatch]);\n\n  // Login function\n  const login = useCallback(async (username, password) => {\n    try {\n      console.log('🔐 useAuth: Attempting login...');\n      await dispatch(loginUser({ username, password })).unwrap();\n      console.log('🔐 useAuth: Login successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Login failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Register function\n  const register = useCallback(async (username, password, email) => {\n    try {\n      console.log('🔐 useAuth: Attempting registration...');\n      await dispatch(registerUser({ username, password, email })).unwrap();\n      console.log('🔐 useAuth: Registration successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Registration failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      console.log('🔐 useAuth: Logging out...');\n      await dispatch(logoutUser()).unwrap();\n      console.log('🔐 useAuth: Logout successful');\n      return true;\n    } catch (error) {\n      console.error('🔐 useAuth: Logout failed:', error);\n      return false;\n    }\n  }, [dispatch]);\n\n  // Clear error function\n  const clearAuthError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  // Token validation\n  const isTokenValid = useCallback(() => {\n    return authService.isTokenValid();\n  }, []);\n\n  return {\n    user,\n    token,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    clearAuthError,\n    isTokenValid\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
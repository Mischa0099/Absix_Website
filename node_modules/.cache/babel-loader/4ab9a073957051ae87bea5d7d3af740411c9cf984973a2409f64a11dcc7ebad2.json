{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misch\\\\Downloads\\\\absix-workstation-web-main\\\\absix-workstation-web-main\\\\frontend\\\\src\\\\components\\\\common\\\\LoadingSpinner.jsx\";\n// =================== LoadingSpinner.jsx ===================\nimport React from 'react';\nimport { Box, CircularProgress, Typography, LinearProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = ({\n  message = 'Loading...',\n  size = 40,\n  variant = 'circular',\n  color = 'primary',\n  fullScreen = false,\n  progress = null\n}) => {\n  const containerSx = fullScreen ? {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100vw',\n    height: '100vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    zIndex: 9999\n  } : {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '200px',\n    gap: 2,\n    py: 4\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: containerSx,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: 2\n      },\n      children: [variant === 'circular' ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: size,\n        color: color,\n        ...(progress !== null && {\n          variant: 'determinate',\n          value: progress\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: '100%',\n          maxWidth: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(LinearProgress, {\n          color: color,\n          ...(progress !== null && {\n            variant: 'determinate',\n            value: progress\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), message && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        textAlign: \"center\",\n        sx: {\n          maxWidth: 300\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), progress !== null && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = LoadingSpinner;\nexport default LoadingSpinner;\nvar _c;\n$RefreshReg$(_c, \"LoadingSpinner\");","map":{"version":3,"names":["React","Box","CircularProgress","Typography","LinearProgress","jsxDEV","_jsxDEV","LoadingSpinner","message","size","variant","color","fullScreen","progress","containerSx","position","top","left","width","height","display","alignItems","justifyContent","backgroundColor","zIndex","flexDirection","minHeight","gap","py","sx","children","value","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","textAlign","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/misch/Downloads/absix-workstation-web-main/absix-workstation-web-main/frontend/src/components/common/LoadingSpinner.jsx"],"sourcesContent":["// =================== LoadingSpinner.jsx ===================\nimport React from 'react';\nimport { Box, CircularProgress, Typography, LinearProgress } from '@mui/material';\n\nconst LoadingSpinner = ({ \n  message = 'Loading...', \n  size = 40, \n  variant = 'circular',\n  color = 'primary',\n  fullScreen = false,\n  progress = null\n}) => {\n  const containerSx = fullScreen \n    ? { \n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\n        zIndex: 9999\n      }\n    : { \n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '200px',\n        gap: 2,\n        py: 4\n      };\n\n  return (\n    <Box sx={containerSx}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>\n        {variant === 'circular' ? (\n          <CircularProgress \n            size={size} \n            color={color}\n            {...(progress !== null && { variant: 'determinate', value: progress })}\n          />\n        ) : (\n          <Box sx={{ width: '100%', maxWidth: 300 }}>\n            <LinearProgress \n              color={color}\n              {...(progress !== null && { variant: 'determinate', value: progress })}\n            />\n          </Box>\n        )}\n        \n        {message && (\n          <Typography \n            variant=\"body1\" \n            color=\"text.secondary\"\n            textAlign=\"center\"\n            sx={{ maxWidth: 300 }}\n          >\n            {message}\n          </Typography>\n        )}\n        \n        {progress !== null && (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {Math.round(progress)}%\n          </Typography>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default LoadingSpinner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}